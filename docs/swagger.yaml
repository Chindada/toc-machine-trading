definitions:
  auth.LoginBody:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  auth.LoginResponseBody:
    properties:
      code:
        type: integer
      expire:
        type: string
      token:
        type: string
    type: object
  auth.LogoutResponseBody:
    properties:
      code:
        type: integer
    type: object
  auth.RefreshResponseBody:
    properties:
      code:
        type: integer
      expire:
        type: string
      token:
        type: string
    type: object
  auth.UnauthorizedResponseBody:
    properties:
      code:
        type: integer
    type: object
  config.AnalyzeStock:
    properties:
      allInOutRatio:
        type: number
      allOutInRatio:
        type: number
      closeChangeRatioHigh:
        type: number
      closeChangeRatioLow:
        type: number
      maperiod:
        type: integer
      maxHoldTime:
        type: number
      rsiminCount:
        type: integer
      tickAnalyzePeriod:
        type: number
      volumePRLimit:
        type: number
    type: object
  config.Config:
    properties:
      analyzeStock:
        $ref: '#/definitions/config.AnalyzeStock'
      database:
        $ref: '#/definitions/config.Database'
      fugle:
        $ref: '#/definitions/config.Fugle'
      history:
        $ref: '#/definitions/config.History'
      manualTrade:
        type: boolean
      quota:
        $ref: '#/definitions/config.Quota'
      rabbitMQ:
        $ref: '#/definitions/config.RabbitMQ'
      server:
        $ref: '#/definitions/config.Server'
      simulation:
        type: boolean
      sinopac:
        $ref: '#/definitions/config.Sinopac'
      smtp:
        $ref: '#/definitions/config.SMTP'
      targetStock:
        $ref: '#/definitions/config.TargetStock'
      tradeFuture:
        $ref: '#/definitions/config.TradeFuture'
      tradeStock:
        $ref: '#/definitions/config.TradeStock'
    type: object
  config.Database:
    properties:
      dbname:
        type: string
      poolMax:
        type: integer
      url:
        type: string
    type: object
  config.Fugle:
    properties:
      poolMax:
        type: integer
      url:
        type: string
    type: object
  config.History:
    properties:
      historyClosePeriod:
        type: integer
      historyKbarPeriod:
        type: integer
      historyTickPeriod:
        type: integer
    type: object
  config.PriceLimit:
    properties:
      high:
        type: number
      low:
        type: number
    type: object
  config.Quota:
    properties:
      futureTradeFee:
        type: integer
      stockFeeDiscount:
        type: number
      stockTradeQuota:
        type: integer
    type: object
  config.RabbitMQ:
    properties:
      attempts:
        type: integer
      exchange:
        type: string
      url:
        type: string
      waitTime:
        type: integer
    type: object
  config.SMTP:
    properties:
      host:
        type: string
      password:
        type: string
      port:
        type: integer
      username:
        type: string
    type: object
  config.Server:
    properties:
      disableSwaggerHTTPHandler:
        type: string
      http:
        type: string
    type: object
  config.Sinopac:
    properties:
      poolMax:
        type: integer
      url:
        type: string
    type: object
  config.TargetStock:
    properties:
      blackCategory:
        items:
          type: string
        type: array
      blackStock:
        items:
          type: string
        type: array
      limitVolume:
        type: integer
      priceLimit:
        items:
          $ref: '#/definitions/config.PriceLimit'
        type: array
      realTimeRank:
        type: integer
    type: object
  config.TradeFuture:
    properties:
      allowTrade:
        type: boolean
      buySellWaitTime:
        type: integer
      inOutRatio:
        type: number
      maxHoldTime:
        type: integer
      outInRatio:
        type: number
      quantity:
        type: integer
      rateChangeRatio:
        type: number
      rateLimit:
        type: number
      subscribe:
        type: boolean
      targetBalanceHigh:
        type: number
      targetBalanceLow:
        type: number
      tickInterval:
        type: integer
      tradeOutWaitTimes:
        type: integer
      tradeTimeRange:
        $ref: '#/definitions/config.TradeTimeRange'
    type: object
  config.TradeStock:
    properties:
      allowTrade:
        type: boolean
      cancelWaitTime:
        type: integer
      holdTimeFromOpen:
        type: number
      odd:
        type: boolean
      subscribe:
        type: boolean
      totalOpenTime:
        type: number
      tradeInEndTime:
        type: number
      tradeInWaitTime:
        type: integer
      tradeOutWaitTime:
        type: integer
    type: object
  config.TradeTimeRange:
    properties:
      firstPartDuration:
        type: integer
      secondPartDuration:
        type: integer
    type: object
  entity.AccountBalance:
    properties:
      available_margin:
        type: number
      balance:
        type: number
      bank_id:
        type: integer
      date:
        type: string
      id:
        type: integer
      risk_indicator:
        type: number
      today_margin:
        type: number
      yesterday_margin:
        type: number
    type: object
  entity.Future:
    properties:
      category:
        type: string
      code:
        type: string
      delivery_date:
        type: string
      delivery_month:
        type: string
      limit_down:
        type: number
      limit_up:
        type: number
      name:
        type: string
      reference:
        type: number
      symbol:
        type: string
      underlying_kind:
        type: string
      unit:
        type: integer
      update_date:
        type: string
    type: object
  entity.FutureOrder:
    properties:
      base_order:
        $ref: '#/definitions/entity.OrderDetail'
      code:
        type: string
      future:
        $ref: '#/definitions/entity.Future'
      position:
        type: integer
    type: object
  entity.FutureTradeBalance:
    properties:
      forward:
        type: integer
      id:
        type: integer
      reverse:
        type: integer
      total:
        type: integer
      trade_count:
        type: integer
      trade_day:
        type: string
    type: object
  entity.IndexStatus:
    properties:
      break_count:
        type: integer
      price_chg:
        type: number
    type: object
  entity.OrderAction:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - ActionNone
    - ActionBuy
    - ActionSell
  entity.OrderDetail:
    properties:
      action:
        $ref: '#/definitions/entity.OrderAction'
      order_id:
        type: string
      order_time:
        type: string
      price:
        type: number
      status:
        $ref: '#/definitions/entity.OrderStatus'
    type: object
  entity.OrderStatus:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    type: integer
    x-enum-varnames:
    - StatusUnknow
    - StatusPendingSubmit
    - StatusPreSubmitted
    - StatusSubmitted
    - StatusFailed
    - StatusCancelled
    - StatusFilled
    - StatusPartFilled
  entity.ShioajiUsage:
    properties:
      connections:
        type: integer
      traffic_usage:
        type: number
      traffic_usage_percents:
        type: number
    type: object
  entity.Stock:
    properties:
      category:
        type: string
      code:
        type: string
      day_trade:
        type: boolean
      delivery_date:
        type: string
      delivery_month:
        type: string
      exchange:
        type: string
      last_close:
        type: number
      limit_down:
        type: number
      limit_up:
        type: number
      name:
        type: string
      number:
        type: string
      reference:
        type: number
      symbol:
        type: string
      underlying_kind:
        type: string
      unit:
        type: integer
      update_date:
        type: string
    type: object
  entity.StockHistoryKbar:
    properties:
      close:
        type: number
      high:
        type: number
      id:
        type: integer
      kbar_time:
        type: string
      low:
        type: number
      open:
        type: number
      stock:
        $ref: '#/definitions/entity.Stock'
      stock_num:
        type: string
      volume:
        type: integer
    type: object
  entity.StockOrder:
    properties:
      base_order:
        $ref: '#/definitions/entity.OrderDetail'
      lot:
        type: integer
      share:
        type: integer
      stock:
        $ref: '#/definitions/entity.Stock'
      stock_num:
        type: string
    type: object
  entity.StockSnapShot:
    properties:
      amount:
        type: integer
      amount_sum:
        type: integer
      chg_type:
        type: string
      close:
        type: number
      high:
        type: number
      low:
        type: number
      open:
        type: number
      pct_chg:
        type: number
      price_chg:
        type: number
      snap_time:
        type: string
      stock_name:
        type: string
      stock_num:
        type: string
      tick_type:
        type: string
      volume:
        type: integer
      volume_ratio:
        type: number
      volume_sum:
        type: integer
      yesterday_volume:
        type: number
    type: object
  entity.StockTarget:
    properties:
      id:
        type: integer
      rank:
        type: integer
      stock:
        $ref: '#/definitions/entity.Stock'
      stock_num:
        type: string
      trade_day:
        type: string
      volume:
        type: integer
    type: object
  entity.StockTradeBalance:
    properties:
      discount:
        type: integer
      forward:
        type: integer
      id:
        type: integer
      original_balance:
        type: integer
      reverse:
        type: integer
      total:
        type: integer
      trade_count:
        type: integer
      trade_day:
        type: string
    type: object
  entity.TradeIndex:
    properties:
      nasdaq:
        $ref: '#/definitions/entity.IndexStatus'
      nf:
        $ref: '#/definitions/entity.IndexStatus'
      otc:
        $ref: '#/definitions/entity.IndexStatus'
      tse:
        $ref: '#/definitions/entity.IndexStatus'
    type: object
  entity.User:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  resp.Response:
    properties:
      response:
        type: string
    type: object
  v1.accountSummary:
    properties:
      balance:
        items:
          $ref: '#/definitions/entity.AccountBalance'
        type: array
      total:
        type: number
    type: object
  v1.allOrder:
    properties:
      future:
        items:
          $ref: '#/definitions/entity.FutureOrder'
        type: array
      stock:
        items:
          $ref: '#/definitions/entity.StockOrder'
        type: array
    type: object
  v1.announcementRequest:
    properties:
      message:
        type: string
    type: object
  v1.futureOrders:
    properties:
      orders:
        items:
          $ref: '#/definitions/entity.FutureOrder'
        type: array
    type: object
  v1.lotStockRequest:
    properties:
      lot:
        type: integer
      num:
        type: string
      price:
        type: number
    type: object
  v1.manualInsertFutureOrderRequest:
    properties:
      action:
        $ref: '#/definitions/entity.OrderAction'
      code:
        type: string
      order_time:
        type: string
      price:
        type: number
      quantity:
        type: integer
    required:
    - action
    - code
    - order_time
    - price
    - quantity
    type: object
  v1.oddStockRequest:
    properties:
      num:
        type: string
      price:
        type: number
      share:
        type: integer
    type: object
  v1.reborn:
    properties:
      date:
        type: string
      stocks:
        items:
          $ref: '#/definitions/entity.Stock'
        type: array
    type: object
  v1.stockDetailResponse:
    properties:
      stock_detail:
        items:
          $ref: '#/definitions/entity.Stock'
        type: array
    type: object
  v1.tradeBalance:
    properties:
      future:
        items:
          $ref: '#/definitions/entity.FutureTradeBalance'
        type: array
      stock:
        items:
          $ref: '#/definitions/entity.StockTradeBalance'
        type: array
    type: object
  v1.tradeResponse:
    properties:
      order_id:
        type: string
      status:
        type: string
    type: object
info:
  contact: {}
  description: Toc Machine Trading's API docs
  title: TMT OpenAPI
  version: 2.5.0
paths:
  /v1/analyze/reborn:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.reborn'
            type: array
      summary: Get reborn targets
      tags:
      - Analyze V1
  /v1/basic/config:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/config.Config'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: Get all config
      tags:
      - Basic V1
  /v1/basic/stock:
    get:
      consumes:
      - application/json
      parameters:
      - description: num
        in: query
        name: num
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.stockDetailResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: Get all repo stock
      tags:
      - Basic V1
  /v1/basic/usage/shioaji:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ShioajiUsage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: Get shioaji usage
      tags:
      - Basic V1
  /v1/fcm/announcement:
    post:
      consumes:
      - application/json
      parameters:
      - description: Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/v1.announcementRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - JWT: []
      summary: Announce message to all devices
      tags:
      - FCM V1
  /v1/history/day-kbar/{stock}/{start_date}/{interval}:
    get:
      consumes:
      - application/json
      parameters:
      - description: stock
        in: path
        name: stock
        required: true
        type: string
      - description: start_date
        in: path
        name: start_date
        required: true
        type: string
      - description: interval
        in: path
        name: interval
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.StockHistoryKbar'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: Get kbar data
      tags:
      - History V1
  /v1/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.LoginBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LoginResponseBody'
      summary: Login
      tags:
      - User V1
  /v1/logout:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LogoutResponseBody'
      security:
      - JWT: []
      summary: Logout
      tags:
      - User V1
  /v1/order:
    post:
      consumes:
      - application/json
      parameters:
      - description: Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/v1.manualInsertFutureOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: Manual insert future order
      tags:
      - Order V1
  /v1/order/account/balance:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.accountSummary'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: Get account balance
      tags:
      - Account V1
  /v1/order/all:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.allOrder'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: Get all order
      tags:
      - Order V1
  /v1/order/balance:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.tradeBalance'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: Get all trade balance
      tags:
      - Order V1
  /v1/order/balance/future/last:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.FutureTradeBalance'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: Get last future trade balance
      tags:
      - Order V1
  /v1/order/balance/stock/last:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.StockTradeBalance'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: Get last stock trade balance
      tags:
      - Order V1
  /v1/order/date/{tradeday}:
    get:
      consumes:
      - application/json
      parameters:
      - description: tradeday
        in: path
        name: tradeday
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.futureOrders'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: Get all order by trade day
      tags:
      - Order V1
    put:
      consumes:
      - application/json
      parameters:
      - description: tradeday
        in: path
        name: tradeday
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.futureOrders'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: Update trade balance by trade day
      tags:
      - Order V1
  /v1/order/future/{order-id}:
    patch:
      consumes:
      - application/json
      parameters:
      - description: order-id
        in: path
        name: order-id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: Move future order to latest trade day
      tags:
      - Order V1
  /v1/order/stock/{order-id}:
    patch:
      consumes:
      - application/json
      parameters:
      - description: order-id
        in: path
        name: order-id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: Move stock order to latest trade day
      tags:
      - Order V1
  /v1/refresh:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.RefreshResponseBody'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.UnauthorizedResponseBody'
      security:
      - JWT: []
      summary: Refresh token
      tags:
      - User V1
  /v1/stream/index:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.TradeIndex'
      summary: Get index
      tags:
      - Stream V1
  /v1/stream/tse/snapshot:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.StockSnapShot'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: Get TSE snapshot
      tags:
      - Stream V1
  /v1/targets:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.StockTarget'
            type: array
      summary: Get targets
      tags:
      - Targets V1
  /v1/trade/stock/buy/lot:
    put:
      consumes:
      - application/json
      parameters:
      - description: Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/v1.lotStockRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.tradeResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.UnauthorizedResponseBody'
      security:
      - JWT: []
      summary: Buy lot stock
      tags:
      - Trade V1
  /v1/trade/stock/buy/odd:
    put:
      consumes:
      - application/json
      parameters:
      - description: Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/v1.oddStockRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.tradeResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.UnauthorizedResponseBody'
      security:
      - JWT: []
      summary: Buy odd stock
      tags:
      - Trade V1
  /v1/user:
    post:
      consumes:
      - application/json
      parameters:
      - description: Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: New user
      tags:
      - User V1
  /v1/user/update:
    put:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.UnauthorizedResponseBody'
      security:
      - JWT: []
      summary: Update auth trade user
      tags:
      - User V1
  /v1/user/verify/{user}/{code}:
    get:
      consumes:
      - application/json
      parameters:
      - description: user
        in: path
        name: user
        required: true
        type: string
      - description: code
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Verify email
      tags:
      - User V1
securityDefinitions:
  JWT:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
