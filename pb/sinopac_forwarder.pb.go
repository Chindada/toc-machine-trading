// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: src/sinopac_forwarder.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FunctionErr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *FunctionErr) Reset() {
	*x = FunctionErr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionErr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionErr) ProtoMessage() {}

func (x *FunctionErr) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionErr.ProtoReflect.Descriptor instead.
func (*FunctionErr) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{0}
}

func (x *FunctionErr) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type OrderID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId  string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Simulate bool   `protobuf:"varint,2,opt,name=simulate,proto3" json:"simulate,omitempty"`
}

func (x *OrderID) Reset() {
	*x = OrderID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderID) ProtoMessage() {}

func (x *OrderID) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderID.ProtoReflect.Descriptor instead.
func (*OrderID) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{1}
}

func (x *OrderID) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderID) GetSimulate() bool {
	if x != nil {
		return x.Simulate
	}
	return false
}

type StockOrderDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockNum string  `protobuf:"bytes,1,opt,name=stock_num,json=stockNum,proto3" json:"stock_num,omitempty"`
	Price    float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	Quantity int64   `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Simulate bool    `protobuf:"varint,4,opt,name=simulate,proto3" json:"simulate,omitempty"`
}

func (x *StockOrderDetail) Reset() {
	*x = StockOrderDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockOrderDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockOrderDetail) ProtoMessage() {}

func (x *StockOrderDetail) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockOrderDetail.ProtoReflect.Descriptor instead.
func (*StockOrderDetail) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{2}
}

func (x *StockOrderDetail) GetStockNum() string {
	if x != nil {
		return x.StockNum
	}
	return ""
}

func (x *StockOrderDetail) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *StockOrderDetail) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *StockOrderDetail) GetSimulate() bool {
	if x != nil {
		return x.Simulate
	}
	return false
}

type TradeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Status  string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Error   string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TradeResult) Reset() {
	*x = TradeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeResult) ProtoMessage() {}

func (x *TradeResult) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeResult.ProtoReflect.Descriptor instead.
func (*TradeResult) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{3}
}

func (x *TradeResult) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *TradeResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TradeResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type EventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RespCode  int64  `protobuf:"varint,1,opt,name=resp_code,json=respCode,proto3" json:"resp_code,omitempty"`
	EventCode int64  `protobuf:"varint,2,opt,name=event_code,json=eventCode,proto3" json:"event_code,omitempty"`
	Info      string `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	Event     string `protobuf:"bytes,4,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *EventResponse) Reset() {
	*x = EventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventResponse) ProtoMessage() {}

func (x *EventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventResponse.ProtoReflect.Descriptor instead.
func (*EventResponse) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{4}
}

func (x *EventResponse) GetRespCode() int64 {
	if x != nil {
		return x.RespCode
	}
	return 0
}

func (x *EventResponse) GetEventCode() int64 {
	if x != nil {
		return x.EventCode
	}
	return 0
}

func (x *EventResponse) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *EventResponse) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

type Date struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *Date) Reset() {
	*x = Date{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{5}
}

func (x *Date) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type TokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *TokenResponse) Reset() {
	*x = TokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenResponse) ProtoMessage() {}

func (x *TokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenResponse.ProtoReflect.Descriptor instead.
func (*TokenResponse) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{6}
}

func (x *TokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type StockNumArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockNumArr []string `protobuf:"bytes,1,rep,name=stock_num_arr,json=stockNumArr,proto3" json:"stock_num_arr,omitempty"`
}

func (x *StockNumArr) Reset() {
	*x = StockNumArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockNumArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockNumArr) ProtoMessage() {}

func (x *StockNumArr) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockNumArr.ProtoReflect.Descriptor instead.
func (*StockNumArr) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{7}
}

func (x *StockNumArr) GetStockNumArr() []string {
	if x != nil {
		return x.StockNumArr
	}
	return nil
}

type StockNumArrWithDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockNumArr []string `protobuf:"bytes,1,rep,name=stock_num_arr,json=stockNumArr,proto3" json:"stock_num_arr,omitempty"`
	Date        string   `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *StockNumArrWithDate) Reset() {
	*x = StockNumArrWithDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockNumArrWithDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockNumArrWithDate) ProtoMessage() {}

func (x *StockNumArrWithDate) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockNumArrWithDate.ProtoReflect.Descriptor instead.
func (*StockNumArrWithDate) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{8}
}

func (x *StockNumArrWithDate) GetStockNumArr() []string {
	if x != nil {
		return x.StockNumArr
	}
	return nil
}

func (x *StockNumArrWithDate) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type StockNumArrWithDateArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockNumArr []string `protobuf:"bytes,1,rep,name=stock_num_arr,json=stockNumArr,proto3" json:"stock_num_arr,omitempty"`
	DateArr     []string `protobuf:"bytes,2,rep,name=date_arr,json=dateArr,proto3" json:"date_arr,omitempty"`
}

func (x *StockNumArrWithDateArr) Reset() {
	*x = StockNumArrWithDateArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockNumArrWithDateArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockNumArrWithDateArr) ProtoMessage() {}

func (x *StockNumArrWithDateArr) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockNumArrWithDateArr.ProtoReflect.Descriptor instead.
func (*StockNumArrWithDateArr) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{9}
}

func (x *StockNumArrWithDateArr) GetStockNumArr() []string {
	if x != nil {
		return x.StockNumArr
	}
	return nil
}

func (x *StockNumArrWithDateArr) GetDateArr() []string {
	if x != nil {
		return x.DateArr
	}
	return nil
}

type StockDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stock []*StockDetailMessage `protobuf:"bytes,1,rep,name=stock,proto3" json:"stock,omitempty"`
}

func (x *StockDetailResponse) Reset() {
	*x = StockDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockDetailResponse) ProtoMessage() {}

func (x *StockDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockDetailResponse.ProtoReflect.Descriptor instead.
func (*StockDetailResponse) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{10}
}

func (x *StockDetailResponse) GetStock() []*StockDetailMessage {
	if x != nil {
		return x.Stock
	}
	return nil
}

type StockDetailMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange   string  `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Category   string  `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Code       string  `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Name       string  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Reference  float64 `protobuf:"fixed64,5,opt,name=reference,proto3" json:"reference,omitempty"`
	UpdateDate string  `protobuf:"bytes,6,opt,name=update_date,json=updateDate,proto3" json:"update_date,omitempty"`
	DayTrade   string  `protobuf:"bytes,7,opt,name=day_trade,json=dayTrade,proto3" json:"day_trade,omitempty"`
}

func (x *StockDetailMessage) Reset() {
	*x = StockDetailMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockDetailMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockDetailMessage) ProtoMessage() {}

func (x *StockDetailMessage) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockDetailMessage.ProtoReflect.Descriptor instead.
func (*StockDetailMessage) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{11}
}

func (x *StockDetailMessage) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *StockDetailMessage) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *StockDetailMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StockDetailMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StockDetailMessage) GetReference() float64 {
	if x != nil {
		return x.Reference
	}
	return 0
}

func (x *StockDetailMessage) GetUpdateDate() string {
	if x != nil {
		return x.UpdateDate
	}
	return ""
}

func (x *StockDetailMessage) GetDayTrade() string {
	if x != nil {
		return x.DayTrade
	}
	return ""
}

type StockSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*StockSnapshotMessage `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *StockSnapshotResponse) Reset() {
	*x = StockSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockSnapshotResponse) ProtoMessage() {}

func (x *StockSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockSnapshotResponse.ProtoReflect.Descriptor instead.
func (*StockSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{12}
}

func (x *StockSnapshotResponse) GetData() []*StockSnapshotMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

type StockSnapshotMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts              int64   `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Code            string  `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Exchange        string  `protobuf:"bytes,3,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Open            float64 `protobuf:"fixed64,4,opt,name=open,proto3" json:"open,omitempty"`
	High            float64 `protobuf:"fixed64,5,opt,name=high,proto3" json:"high,omitempty"`
	Low             float64 `protobuf:"fixed64,6,opt,name=low,proto3" json:"low,omitempty"`
	Close           float64 `protobuf:"fixed64,7,opt,name=close,proto3" json:"close,omitempty"`
	TickType        string  `protobuf:"bytes,8,opt,name=tick_type,json=tickType,proto3" json:"tick_type,omitempty"`
	ChangePrice     float64 `protobuf:"fixed64,9,opt,name=change_price,json=changePrice,proto3" json:"change_price,omitempty"`
	ChangeRate      float64 `protobuf:"fixed64,10,opt,name=change_rate,json=changeRate,proto3" json:"change_rate,omitempty"`
	ChangeType      string  `protobuf:"bytes,11,opt,name=change_type,json=changeType,proto3" json:"change_type,omitempty"`
	AveragePrice    float64 `protobuf:"fixed64,12,opt,name=average_price,json=averagePrice,proto3" json:"average_price,omitempty"`
	Volume          int64   `protobuf:"varint,13,opt,name=volume,proto3" json:"volume,omitempty"`
	TotalVolume     int64   `protobuf:"varint,14,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`
	Amount          int64   `protobuf:"varint,15,opt,name=amount,proto3" json:"amount,omitempty"`
	TotalAmount     int64   `protobuf:"varint,16,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	YesterdayVolume float64 `protobuf:"fixed64,17,opt,name=yesterday_volume,json=yesterdayVolume,proto3" json:"yesterday_volume,omitempty"`
	BuyPrice        float64 `protobuf:"fixed64,18,opt,name=buy_price,json=buyPrice,proto3" json:"buy_price,omitempty"`
	BuyVolume       float64 `protobuf:"fixed64,19,opt,name=buy_volume,json=buyVolume,proto3" json:"buy_volume,omitempty"`
	SellPrice       float64 `protobuf:"fixed64,20,opt,name=sell_price,json=sellPrice,proto3" json:"sell_price,omitempty"`
	SellVolume      int64   `protobuf:"varint,21,opt,name=sell_volume,json=sellVolume,proto3" json:"sell_volume,omitempty"`
	VolumeRatio     float64 `protobuf:"fixed64,22,opt,name=volume_ratio,json=volumeRatio,proto3" json:"volume_ratio,omitempty"`
}

func (x *StockSnapshotMessage) Reset() {
	*x = StockSnapshotMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockSnapshotMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockSnapshotMessage) ProtoMessage() {}

func (x *StockSnapshotMessage) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockSnapshotMessage.ProtoReflect.Descriptor instead.
func (*StockSnapshotMessage) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{13}
}

func (x *StockSnapshotMessage) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *StockSnapshotMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StockSnapshotMessage) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *StockSnapshotMessage) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *StockSnapshotMessage) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *StockSnapshotMessage) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *StockSnapshotMessage) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *StockSnapshotMessage) GetTickType() string {
	if x != nil {
		return x.TickType
	}
	return ""
}

func (x *StockSnapshotMessage) GetChangePrice() float64 {
	if x != nil {
		return x.ChangePrice
	}
	return 0
}

func (x *StockSnapshotMessage) GetChangeRate() float64 {
	if x != nil {
		return x.ChangeRate
	}
	return 0
}

func (x *StockSnapshotMessage) GetChangeType() string {
	if x != nil {
		return x.ChangeType
	}
	return ""
}

func (x *StockSnapshotMessage) GetAveragePrice() float64 {
	if x != nil {
		return x.AveragePrice
	}
	return 0
}

func (x *StockSnapshotMessage) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *StockSnapshotMessage) GetTotalVolume() int64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *StockSnapshotMessage) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *StockSnapshotMessage) GetTotalAmount() int64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *StockSnapshotMessage) GetYesterdayVolume() float64 {
	if x != nil {
		return x.YesterdayVolume
	}
	return 0
}

func (x *StockSnapshotMessage) GetBuyPrice() float64 {
	if x != nil {
		return x.BuyPrice
	}
	return 0
}

func (x *StockSnapshotMessage) GetBuyVolume() float64 {
	if x != nil {
		return x.BuyVolume
	}
	return 0
}

func (x *StockSnapshotMessage) GetSellPrice() float64 {
	if x != nil {
		return x.SellPrice
	}
	return 0
}

func (x *StockSnapshotMessage) GetSellVolume() int64 {
	if x != nil {
		return x.SellVolume
	}
	return 0
}

func (x *StockSnapshotMessage) GetVolumeRatio() float64 {
	if x != nil {
		return x.VolumeRatio
	}
	return 0
}

type StockHistoryTickResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*StockHistoryTickMessage `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *StockHistoryTickResponse) Reset() {
	*x = StockHistoryTickResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockHistoryTickResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockHistoryTickResponse) ProtoMessage() {}

func (x *StockHistoryTickResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockHistoryTickResponse.ProtoReflect.Descriptor instead.
func (*StockHistoryTickResponse) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{14}
}

func (x *StockHistoryTickResponse) GetData() []*StockHistoryTickMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

type StockHistoryTickMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts        int64   `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Close     float64 `protobuf:"fixed64,2,opt,name=close,proto3" json:"close,omitempty"`
	Volume    int64   `protobuf:"varint,3,opt,name=volume,proto3" json:"volume,omitempty"`
	BidPrice  float64 `protobuf:"fixed64,4,opt,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`
	BidVolume int64   `protobuf:"varint,5,opt,name=bid_volume,json=bidVolume,proto3" json:"bid_volume,omitempty"`
	AskPrice  float64 `protobuf:"fixed64,6,opt,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`
	AskVolume int64   `protobuf:"varint,7,opt,name=ask_volume,json=askVolume,proto3" json:"ask_volume,omitempty"`
	TickType  int64   `protobuf:"varint,8,opt,name=tick_type,json=tickType,proto3" json:"tick_type,omitempty"`
	StockNum  string  `protobuf:"bytes,9,opt,name=stock_num,json=stockNum,proto3" json:"stock_num,omitempty"`
}

func (x *StockHistoryTickMessage) Reset() {
	*x = StockHistoryTickMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockHistoryTickMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockHistoryTickMessage) ProtoMessage() {}

func (x *StockHistoryTickMessage) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockHistoryTickMessage.ProtoReflect.Descriptor instead.
func (*StockHistoryTickMessage) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{15}
}

func (x *StockHistoryTickMessage) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *StockHistoryTickMessage) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *StockHistoryTickMessage) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *StockHistoryTickMessage) GetBidPrice() float64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *StockHistoryTickMessage) GetBidVolume() int64 {
	if x != nil {
		return x.BidVolume
	}
	return 0
}

func (x *StockHistoryTickMessage) GetAskPrice() float64 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *StockHistoryTickMessage) GetAskVolume() int64 {
	if x != nil {
		return x.AskVolume
	}
	return 0
}

func (x *StockHistoryTickMessage) GetTickType() int64 {
	if x != nil {
		return x.TickType
	}
	return 0
}

func (x *StockHistoryTickMessage) GetStockNum() string {
	if x != nil {
		return x.StockNum
	}
	return ""
}

type StockHistoryKbarResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*StockHistoryKbarMessage `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *StockHistoryKbarResponse) Reset() {
	*x = StockHistoryKbarResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockHistoryKbarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockHistoryKbarResponse) ProtoMessage() {}

func (x *StockHistoryKbarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockHistoryKbarResponse.ProtoReflect.Descriptor instead.
func (*StockHistoryKbarResponse) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{16}
}

func (x *StockHistoryKbarResponse) GetData() []*StockHistoryKbarMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

type StockHistoryKbarMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts       int64   `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Close    float64 `protobuf:"fixed64,2,opt,name=Close,proto3" json:"Close,omitempty"`
	Open     float64 `protobuf:"fixed64,3,opt,name=Open,proto3" json:"Open,omitempty"`
	High     float64 `protobuf:"fixed64,4,opt,name=High,proto3" json:"High,omitempty"`
	Low      float64 `protobuf:"fixed64,5,opt,name=Low,proto3" json:"Low,omitempty"`
	Volume   int64   `protobuf:"varint,6,opt,name=Volume,proto3" json:"Volume,omitempty"`
	StockNum string  `protobuf:"bytes,7,opt,name=stock_num,json=stockNum,proto3" json:"stock_num,omitempty"`
}

func (x *StockHistoryKbarMessage) Reset() {
	*x = StockHistoryKbarMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockHistoryKbarMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockHistoryKbarMessage) ProtoMessage() {}

func (x *StockHistoryKbarMessage) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockHistoryKbarMessage.ProtoReflect.Descriptor instead.
func (*StockHistoryKbarMessage) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{17}
}

func (x *StockHistoryKbarMessage) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *StockHistoryKbarMessage) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *StockHistoryKbarMessage) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *StockHistoryKbarMessage) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *StockHistoryKbarMessage) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *StockHistoryKbarMessage) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *StockHistoryKbarMessage) GetStockNum() string {
	if x != nil {
		return x.StockNum
	}
	return ""
}

type StockHistoryCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*StockHistoryCloseMessage `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *StockHistoryCloseResponse) Reset() {
	*x = StockHistoryCloseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockHistoryCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockHistoryCloseResponse) ProtoMessage() {}

func (x *StockHistoryCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockHistoryCloseResponse.ProtoReflect.Descriptor instead.
func (*StockHistoryCloseResponse) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{18}
}

func (x *StockHistoryCloseResponse) GetData() []*StockHistoryCloseMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

type StockHistoryCloseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date  string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Code  string  `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Close float64 `protobuf:"fixed64,3,opt,name=close,proto3" json:"close,omitempty"`
}

func (x *StockHistoryCloseMessage) Reset() {
	*x = StockHistoryCloseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockHistoryCloseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockHistoryCloseMessage) ProtoMessage() {}

func (x *StockHistoryCloseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockHistoryCloseMessage.ProtoReflect.Descriptor instead.
func (*StockHistoryCloseMessage) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{19}
}

func (x *StockHistoryCloseMessage) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *StockHistoryCloseMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StockHistoryCloseMessage) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

type VolumeRankRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Date  string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *VolumeRankRequest) Reset() {
	*x = VolumeRankRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeRankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeRankRequest) ProtoMessage() {}

func (x *VolumeRankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeRankRequest.ProtoReflect.Descriptor instead.
func (*VolumeRankRequest) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{20}
}

func (x *VolumeRankRequest) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *VolumeRankRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type StockVolumeRankResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*StockVolumeRankMessage `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *StockVolumeRankResponse) Reset() {
	*x = StockVolumeRankResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockVolumeRankResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockVolumeRankResponse) ProtoMessage() {}

func (x *StockVolumeRankResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockVolumeRankResponse.ProtoReflect.Descriptor instead.
func (*StockVolumeRankResponse) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{21}
}

func (x *StockVolumeRankResponse) GetData() []*StockVolumeRankMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

type StockVolumeRankMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date            string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Code            string  `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name            string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Ts              int64   `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`
	Open            float64 `protobuf:"fixed64,5,opt,name=open,proto3" json:"open,omitempty"`
	High            float64 `protobuf:"fixed64,6,opt,name=high,proto3" json:"high,omitempty"`
	Low             float64 `protobuf:"fixed64,7,opt,name=low,proto3" json:"low,omitempty"`
	Close           float64 `protobuf:"fixed64,8,opt,name=close,proto3" json:"close,omitempty"`
	PriceRange      float64 `protobuf:"fixed64,9,opt,name=price_range,json=priceRange,proto3" json:"price_range,omitempty"`
	TickType        int64   `protobuf:"varint,10,opt,name=tick_type,json=tickType,proto3" json:"tick_type,omitempty"`
	ChangePrice     float64 `protobuf:"fixed64,11,opt,name=change_price,json=changePrice,proto3" json:"change_price,omitempty"`
	ChangeType      int64   `protobuf:"varint,12,opt,name=change_type,json=changeType,proto3" json:"change_type,omitempty"`
	AveragePrice    float64 `protobuf:"fixed64,13,opt,name=average_price,json=averagePrice,proto3" json:"average_price,omitempty"`
	Volume          int64   `protobuf:"varint,14,opt,name=volume,proto3" json:"volume,omitempty"`
	TotalVolume     int64   `protobuf:"varint,15,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`
	Amount          int64   `protobuf:"varint,16,opt,name=amount,proto3" json:"amount,omitempty"`
	TotalAmount     int64   `protobuf:"varint,17,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	YesterdayVolume int64   `protobuf:"varint,18,opt,name=yesterday_volume,json=yesterdayVolume,proto3" json:"yesterday_volume,omitempty"`
	VolumeRatio     float64 `protobuf:"fixed64,19,opt,name=volume_ratio,json=volumeRatio,proto3" json:"volume_ratio,omitempty"`
	BuyPrice        float64 `protobuf:"fixed64,20,opt,name=buy_price,json=buyPrice,proto3" json:"buy_price,omitempty"`
	BuyVolume       int64   `protobuf:"varint,21,opt,name=buy_volume,json=buyVolume,proto3" json:"buy_volume,omitempty"`
	SellPrice       float64 `protobuf:"fixed64,22,opt,name=sell_price,json=sellPrice,proto3" json:"sell_price,omitempty"`
	SellVolume      int64   `protobuf:"varint,23,opt,name=sell_volume,json=sellVolume,proto3" json:"sell_volume,omitempty"`
	BidOrders       int64   `protobuf:"varint,24,opt,name=bid_orders,json=bidOrders,proto3" json:"bid_orders,omitempty"`
	BidVolumes      int64   `protobuf:"varint,25,opt,name=bid_volumes,json=bidVolumes,proto3" json:"bid_volumes,omitempty"`
	AskOrders       int64   `protobuf:"varint,26,opt,name=ask_orders,json=askOrders,proto3" json:"ask_orders,omitempty"`
	AskVolumes      int64   `protobuf:"varint,27,opt,name=ask_volumes,json=askVolumes,proto3" json:"ask_volumes,omitempty"`
}

func (x *StockVolumeRankMessage) Reset() {
	*x = StockVolumeRankMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockVolumeRankMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockVolumeRankMessage) ProtoMessage() {}

func (x *StockVolumeRankMessage) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockVolumeRankMessage.ProtoReflect.Descriptor instead.
func (*StockVolumeRankMessage) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{22}
}

func (x *StockVolumeRankMessage) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *StockVolumeRankMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StockVolumeRankMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StockVolumeRankMessage) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *StockVolumeRankMessage) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *StockVolumeRankMessage) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *StockVolumeRankMessage) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *StockVolumeRankMessage) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *StockVolumeRankMessage) GetPriceRange() float64 {
	if x != nil {
		return x.PriceRange
	}
	return 0
}

func (x *StockVolumeRankMessage) GetTickType() int64 {
	if x != nil {
		return x.TickType
	}
	return 0
}

func (x *StockVolumeRankMessage) GetChangePrice() float64 {
	if x != nil {
		return x.ChangePrice
	}
	return 0
}

func (x *StockVolumeRankMessage) GetChangeType() int64 {
	if x != nil {
		return x.ChangeType
	}
	return 0
}

func (x *StockVolumeRankMessage) GetAveragePrice() float64 {
	if x != nil {
		return x.AveragePrice
	}
	return 0
}

func (x *StockVolumeRankMessage) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *StockVolumeRankMessage) GetTotalVolume() int64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *StockVolumeRankMessage) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *StockVolumeRankMessage) GetTotalAmount() int64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *StockVolumeRankMessage) GetYesterdayVolume() int64 {
	if x != nil {
		return x.YesterdayVolume
	}
	return 0
}

func (x *StockVolumeRankMessage) GetVolumeRatio() float64 {
	if x != nil {
		return x.VolumeRatio
	}
	return 0
}

func (x *StockVolumeRankMessage) GetBuyPrice() float64 {
	if x != nil {
		return x.BuyPrice
	}
	return 0
}

func (x *StockVolumeRankMessage) GetBuyVolume() int64 {
	if x != nil {
		return x.BuyVolume
	}
	return 0
}

func (x *StockVolumeRankMessage) GetSellPrice() float64 {
	if x != nil {
		return x.SellPrice
	}
	return 0
}

func (x *StockVolumeRankMessage) GetSellVolume() int64 {
	if x != nil {
		return x.SellVolume
	}
	return 0
}

func (x *StockVolumeRankMessage) GetBidOrders() int64 {
	if x != nil {
		return x.BidOrders
	}
	return 0
}

func (x *StockVolumeRankMessage) GetBidVolumes() int64 {
	if x != nil {
		return x.BidVolumes
	}
	return 0
}

func (x *StockVolumeRankMessage) GetAskOrders() int64 {
	if x != nil {
		return x.AskOrders
	}
	return 0
}

func (x *StockVolumeRankMessage) GetAskVolumes() int64 {
	if x != nil {
		return x.AskVolumes
	}
	return 0
}

type SubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailArr []string `protobuf:"bytes,1,rep,name=fail_arr,json=failArr,proto3" json:"fail_arr,omitempty"`
}

func (x *SubscribeResponse) Reset() {
	*x = SubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse) ProtoMessage() {}

func (x *SubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse.ProtoReflect.Descriptor instead.
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{23}
}

func (x *SubscribeResponse) GetFailArr() []string {
	if x != nil {
		return x.FailArr
	}
	return nil
}

type StockRealTimeTickResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code            string  `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	DateTime        string  `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	Open            float64 `protobuf:"fixed64,3,opt,name=open,proto3" json:"open,omitempty"`
	AvgPrice        float64 `protobuf:"fixed64,4,opt,name=avg_price,json=avgPrice,proto3" json:"avg_price,omitempty"`
	Close           float64 `protobuf:"fixed64,5,opt,name=close,proto3" json:"close,omitempty"`
	High            float64 `protobuf:"fixed64,6,opt,name=high,proto3" json:"high,omitempty"`
	Low             float64 `protobuf:"fixed64,7,opt,name=low,proto3" json:"low,omitempty"`
	Amount          float64 `protobuf:"fixed64,8,opt,name=amount,proto3" json:"amount,omitempty"`
	TotalAmount     float64 `protobuf:"fixed64,9,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	Volume          int64   `protobuf:"varint,10,opt,name=volume,proto3" json:"volume,omitempty"`
	TotalVolume     int64   `protobuf:"varint,11,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`
	TickType        int64   `protobuf:"varint,12,opt,name=tick_type,json=tickType,proto3" json:"tick_type,omitempty"`
	ChgType         int64   `protobuf:"varint,13,opt,name=chg_type,json=chgType,proto3" json:"chg_type,omitempty"`
	PriceChg        float64 `protobuf:"fixed64,14,opt,name=price_chg,json=priceChg,proto3" json:"price_chg,omitempty"`
	PctChg          float64 `protobuf:"fixed64,15,opt,name=pct_chg,json=pctChg,proto3" json:"pct_chg,omitempty"`
	BidSideTotalVol int64   `protobuf:"varint,16,opt,name=bid_side_total_vol,json=bidSideTotalVol,proto3" json:"bid_side_total_vol,omitempty"`
	AskSideTotalVol int64   `protobuf:"varint,17,opt,name=ask_side_total_vol,json=askSideTotalVol,proto3" json:"ask_side_total_vol,omitempty"`
	BidSideTotalCnt int64   `protobuf:"varint,18,opt,name=bid_side_total_cnt,json=bidSideTotalCnt,proto3" json:"bid_side_total_cnt,omitempty"`
	AskSideTotalCnt int64   `protobuf:"varint,19,opt,name=ask_side_total_cnt,json=askSideTotalCnt,proto3" json:"ask_side_total_cnt,omitempty"`
	Suspend         int64   `protobuf:"varint,20,opt,name=suspend,proto3" json:"suspend,omitempty"`
	Simtrade        int64   `protobuf:"varint,21,opt,name=simtrade,proto3" json:"simtrade,omitempty"`
}

func (x *StockRealTimeTickResponse) Reset() {
	*x = StockRealTimeTickResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockRealTimeTickResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockRealTimeTickResponse) ProtoMessage() {}

func (x *StockRealTimeTickResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockRealTimeTickResponse.ProtoReflect.Descriptor instead.
func (*StockRealTimeTickResponse) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{24}
}

func (x *StockRealTimeTickResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StockRealTimeTickResponse) GetDateTime() string {
	if x != nil {
		return x.DateTime
	}
	return ""
}

func (x *StockRealTimeTickResponse) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *StockRealTimeTickResponse) GetAvgPrice() float64 {
	if x != nil {
		return x.AvgPrice
	}
	return 0
}

func (x *StockRealTimeTickResponse) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *StockRealTimeTickResponse) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *StockRealTimeTickResponse) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *StockRealTimeTickResponse) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *StockRealTimeTickResponse) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *StockRealTimeTickResponse) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *StockRealTimeTickResponse) GetTotalVolume() int64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *StockRealTimeTickResponse) GetTickType() int64 {
	if x != nil {
		return x.TickType
	}
	return 0
}

func (x *StockRealTimeTickResponse) GetChgType() int64 {
	if x != nil {
		return x.ChgType
	}
	return 0
}

func (x *StockRealTimeTickResponse) GetPriceChg() float64 {
	if x != nil {
		return x.PriceChg
	}
	return 0
}

func (x *StockRealTimeTickResponse) GetPctChg() float64 {
	if x != nil {
		return x.PctChg
	}
	return 0
}

func (x *StockRealTimeTickResponse) GetBidSideTotalVol() int64 {
	if x != nil {
		return x.BidSideTotalVol
	}
	return 0
}

func (x *StockRealTimeTickResponse) GetAskSideTotalVol() int64 {
	if x != nil {
		return x.AskSideTotalVol
	}
	return 0
}

func (x *StockRealTimeTickResponse) GetBidSideTotalCnt() int64 {
	if x != nil {
		return x.BidSideTotalCnt
	}
	return 0
}

func (x *StockRealTimeTickResponse) GetAskSideTotalCnt() int64 {
	if x != nil {
		return x.AskSideTotalCnt
	}
	return 0
}

func (x *StockRealTimeTickResponse) GetSuspend() int64 {
	if x != nil {
		return x.Suspend
	}
	return 0
}

func (x *StockRealTimeTickResponse) GetSimtrade() int64 {
	if x != nil {
		return x.Simtrade
	}
	return 0
}

type StockRealTimeBidAskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       string    `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	DateTime   string    `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	BidPrice   []float64 `protobuf:"fixed64,3,rep,packed,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`
	BidVolume  []int64   `protobuf:"varint,4,rep,packed,name=bid_volume,json=bidVolume,proto3" json:"bid_volume,omitempty"`
	DiffBidVol []int64   `protobuf:"varint,5,rep,packed,name=diff_bid_vol,json=diffBidVol,proto3" json:"diff_bid_vol,omitempty"`
	AskPrice   []float64 `protobuf:"fixed64,6,rep,packed,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`
	AskVolume  []int64   `protobuf:"varint,7,rep,packed,name=ask_volume,json=askVolume,proto3" json:"ask_volume,omitempty"`
	DiffAskVol []int64   `protobuf:"varint,8,rep,packed,name=diff_ask_vol,json=diffAskVol,proto3" json:"diff_ask_vol,omitempty"`
	Suspend    int64     `protobuf:"varint,9,opt,name=suspend,proto3" json:"suspend,omitempty"`
	Simtrade   int64     `protobuf:"varint,10,opt,name=simtrade,proto3" json:"simtrade,omitempty"`
}

func (x *StockRealTimeBidAskResponse) Reset() {
	*x = StockRealTimeBidAskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockRealTimeBidAskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockRealTimeBidAskResponse) ProtoMessage() {}

func (x *StockRealTimeBidAskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockRealTimeBidAskResponse.ProtoReflect.Descriptor instead.
func (*StockRealTimeBidAskResponse) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{25}
}

func (x *StockRealTimeBidAskResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StockRealTimeBidAskResponse) GetDateTime() string {
	if x != nil {
		return x.DateTime
	}
	return ""
}

func (x *StockRealTimeBidAskResponse) GetBidPrice() []float64 {
	if x != nil {
		return x.BidPrice
	}
	return nil
}

func (x *StockRealTimeBidAskResponse) GetBidVolume() []int64 {
	if x != nil {
		return x.BidVolume
	}
	return nil
}

func (x *StockRealTimeBidAskResponse) GetDiffBidVol() []int64 {
	if x != nil {
		return x.DiffBidVol
	}
	return nil
}

func (x *StockRealTimeBidAskResponse) GetAskPrice() []float64 {
	if x != nil {
		return x.AskPrice
	}
	return nil
}

func (x *StockRealTimeBidAskResponse) GetAskVolume() []int64 {
	if x != nil {
		return x.AskVolume
	}
	return nil
}

func (x *StockRealTimeBidAskResponse) GetDiffAskVol() []int64 {
	if x != nil {
		return x.DiffAskVol
	}
	return nil
}

func (x *StockRealTimeBidAskResponse) GetSuspend() int64 {
	if x != nil {
		return x.Suspend
	}
	return 0
}

func (x *StockRealTimeBidAskResponse) GetSimtrade() int64 {
	if x != nil {
		return x.Simtrade
	}
	return 0
}

type StockOrderStatusArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*StockOrderStatus `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *StockOrderStatusArr) Reset() {
	*x = StockOrderStatusArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockOrderStatusArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockOrderStatusArr) ProtoMessage() {}

func (x *StockOrderStatusArr) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockOrderStatusArr.ProtoReflect.Descriptor instead.
func (*StockOrderStatusArr) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{26}
}

func (x *StockOrderStatusArr) GetData() []*StockOrderStatus {
	if x != nil {
		return x.Data
	}
	return nil
}

type StockOrderStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    string  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Code      string  `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Action    string  `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	Price     float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	Quantity  int64   `protobuf:"varint,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
	OrderId   string  `protobuf:"bytes,6,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderTime string  `protobuf:"bytes,7,opt,name=order_time,json=orderTime,proto3" json:"order_time,omitempty"`
}

func (x *StockOrderStatus) Reset() {
	*x = StockOrderStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_sinopac_forwarder_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockOrderStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockOrderStatus) ProtoMessage() {}

func (x *StockOrderStatus) ProtoReflect() protoreflect.Message {
	mi := &file_src_sinopac_forwarder_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockOrderStatus.ProtoReflect.Descriptor instead.
func (*StockOrderStatus) Descriptor() ([]byte, []int) {
	return file_src_sinopac_forwarder_proto_rawDescGZIP(), []int{27}
}

func (x *StockOrderStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StockOrderStatus) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StockOrderStatus) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *StockOrderStatus) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *StockOrderStatus) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *StockOrderStatus) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *StockOrderStatus) GetOrderTime() string {
	if x != nil {
		return x.OrderTime
	}
	return ""
}

var File_src_sinopac_forwarder_proto protoreflect.FileDescriptor

var file_src_sinopac_forwarder_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x73, 0x72, 0x63, 0x2f, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x73,
	0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1f, 0x0a,
	0x0b, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x40,
	0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x22, 0x7d, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x22,
	0x56, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x75, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x1a,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x25, 0x0a, 0x0d, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x31, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x41, 0x72, 0x72,
	0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x72,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x41, 0x72, 0x72, 0x22, 0x4d, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x41, 0x72, 0x72, 0x57, 0x69, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x41, 0x72, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x22, 0x57, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x41,
	0x72, 0x72, 0x57, 0x69, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x41, 0x72, 0x72, 0x12, 0x22, 0x0a,
	0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x41, 0x72,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x72, 0x22, 0x52, 0x0a, 0x13,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x22, 0xd0, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x79, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x22, 0x54, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x69, 0x6e,
	0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8d, 0x05, 0x0a, 0x14, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f,
	0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x79, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x64, 0x61, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75,
	0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x62,
	0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x75, 0x79,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0x5a, 0x0a, 0x18, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x89, 0x02, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x62, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x6b, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x73,
	0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x22, 0x5a, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x4b, 0x62, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x69,
	0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x62, 0x61, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xae, 0x01,
	0x0a, 0x17, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x62,
	0x61, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x4f,
	0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x69, 0x67, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x48, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x6f, 0x77, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x4c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x22, 0x5c,
	0x0a, 0x19, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x69, 0x6e, 0x6f,
	0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x58, 0x0a, 0x18,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x22, 0x3d, 0x0a, 0x11, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x58, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x9b, 0x06, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69,
	0x67, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x79,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x62, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x75, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x62, 0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x69, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x62, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x62, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x73, 0x6b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x61, 0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x73, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x61, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x22, 0x2e, 0x0a,
	0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x41, 0x72, 0x72, 0x22, 0x87, 0x05,
	0x0a, 0x19, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x54,
	0x69, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x68, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x63, 0x68, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x68, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x67, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x63, 0x74, 0x43, 0x68, 0x67, 0x12, 0x2b, 0x0a,
	0x12, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x76, 0x6f, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x62, 0x69, 0x64, 0x53, 0x69,
	0x64, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x73,
	0x6b, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x64, 0x65, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x12, 0x2b, 0x0a, 0x12, 0x62, 0x69, 0x64, 0x5f, 0x73,
	0x69, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x62, 0x69, 0x64, 0x53, 0x69, 0x64, 0x65, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x65,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x64, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x69, 0x6d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x69, 0x6d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x22, 0xc0, 0x02, 0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x64, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x62, 0x69, 0x64,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x62, 0x69, 0x64, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x62, 0x69, 0x64,
	0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66,
	0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x61, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x76,
	0x6f, 0x6c, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x41, 0x73,
	0x6b, 0x56, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x69, 0x6d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x69, 0x6d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x22, 0x4e, 0x0a, 0x13, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x72,
	0x72, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc2, 0x01, 0x0a, 0x10, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x32,
	0xaf, 0x0d, 0x0a, 0x10, 0x53, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20,
	0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x26, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x28, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70,
	0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x53, 0x45, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x28, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x60, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x53, 0x45, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x17, 0x2e, 0x73, 0x69, 0x6e, 0x6f,
	0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x1a, 0x2b, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x60, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x53, 0x45,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x62, 0x61, 0x72, 0x12, 0x17, 0x2e, 0x73, 0x69,
	0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x1a, 0x2b, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x62, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54,
	0x53, 0x45, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x17,
	0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x1a, 0x2c, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61,
	0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x24, 0x2e,
	0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x66, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x41, 0x72, 0x72, 0x12, 0x1e, 0x2e,
	0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x41, 0x72, 0x72, 0x1a, 0x28, 0x2e,
	0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x69, 0x63, 0x6b,
	0x12, 0x26, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x41, 0x72, 0x72,
	0x57, 0x69, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x1a, 0x2b, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70,
	0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x62, 0x61, 0x72, 0x12, 0x26,
	0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x41, 0x72, 0x72, 0x57, 0x69,
	0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x1a, 0x2b, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x62, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x26, 0x2e,
	0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x41, 0x72, 0x72, 0x57, 0x69, 0x74,
	0x68, 0x44, 0x61, 0x74, 0x65, 0x1a, 0x2c, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x41, 0x72, 0x72, 0x12, 0x29, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x41, 0x72, 0x72, 0x57, 0x69, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x41, 0x72,
	0x72, 0x1a, 0x2c, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5c, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x1e, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61,
	0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x41, 0x72, 0x72, 0x1a, 0x24, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61,
	0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5e, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x42, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x12, 0x1e, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61,
	0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x41, 0x72, 0x72, 0x1a, 0x24, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61,
	0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5e, 0x0a, 0x14, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x1e, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61,
	0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x41, 0x72, 0x72, 0x1a, 0x24, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61,
	0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x60, 0x0a, 0x16, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x42, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x12, 0x1e, 0x2e, 0x73, 0x69, 0x6e, 0x6f,
	0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x41, 0x72, 0x72, 0x1a, 0x24, 0x2e, 0x73, 0x69, 0x6e, 0x6f,
	0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x32, 0xf2, 0x02, 0x0a, 0x15, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x65, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x57, 0x0a, 0x0b, 0x54, 0x69, 0x63,
	0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x2c, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x5b, 0x0a, 0x0d, 0x42, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2e, 0x2e, 0x73, 0x69,
	0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x69, 0x64,
	0x41, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x55, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e,
	0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x00, 0x30, 0x01, 0x32, 0xdd, 0x04, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x42, 0x75, 0x79, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x12, 0x23, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x1e, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70,
	0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x09, 0x53, 0x65,
	0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x23, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61,
	0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x1e, 0x2e, 0x73,
	0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x57,
	0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x6c, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x12, 0x23, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x1e, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x1a, 0x1e, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x2e, 0x73, 0x69, 0x6e,
	0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x1e, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x72, 0x72, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x72, 0x72, 0x22, 0x00, 0x12,
	0x55, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x72, 0x72, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x22, 0x00, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_src_sinopac_forwarder_proto_rawDescOnce sync.Once
	file_src_sinopac_forwarder_proto_rawDescData = file_src_sinopac_forwarder_proto_rawDesc
)

func file_src_sinopac_forwarder_proto_rawDescGZIP() []byte {
	file_src_sinopac_forwarder_proto_rawDescOnce.Do(func() {
		file_src_sinopac_forwarder_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_sinopac_forwarder_proto_rawDescData)
	})
	return file_src_sinopac_forwarder_proto_rawDescData
}

var file_src_sinopac_forwarder_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_src_sinopac_forwarder_proto_goTypes = []interface{}{
	(*FunctionErr)(nil),                 // 0: sinopac_forwarder.FunctionErr
	(*OrderID)(nil),                     // 1: sinopac_forwarder.OrderID
	(*StockOrderDetail)(nil),            // 2: sinopac_forwarder.StockOrderDetail
	(*TradeResult)(nil),                 // 3: sinopac_forwarder.TradeResult
	(*EventResponse)(nil),               // 4: sinopac_forwarder.EventResponse
	(*Date)(nil),                        // 5: sinopac_forwarder.Date
	(*TokenResponse)(nil),               // 6: sinopac_forwarder.TokenResponse
	(*StockNumArr)(nil),                 // 7: sinopac_forwarder.StockNumArr
	(*StockNumArrWithDate)(nil),         // 8: sinopac_forwarder.StockNumArrWithDate
	(*StockNumArrWithDateArr)(nil),      // 9: sinopac_forwarder.StockNumArrWithDateArr
	(*StockDetailResponse)(nil),         // 10: sinopac_forwarder.StockDetailResponse
	(*StockDetailMessage)(nil),          // 11: sinopac_forwarder.StockDetailMessage
	(*StockSnapshotResponse)(nil),       // 12: sinopac_forwarder.StockSnapshotResponse
	(*StockSnapshotMessage)(nil),        // 13: sinopac_forwarder.StockSnapshotMessage
	(*StockHistoryTickResponse)(nil),    // 14: sinopac_forwarder.StockHistoryTickResponse
	(*StockHistoryTickMessage)(nil),     // 15: sinopac_forwarder.StockHistoryTickMessage
	(*StockHistoryKbarResponse)(nil),    // 16: sinopac_forwarder.StockHistoryKbarResponse
	(*StockHistoryKbarMessage)(nil),     // 17: sinopac_forwarder.StockHistoryKbarMessage
	(*StockHistoryCloseResponse)(nil),   // 18: sinopac_forwarder.StockHistoryCloseResponse
	(*StockHistoryCloseMessage)(nil),    // 19: sinopac_forwarder.StockHistoryCloseMessage
	(*VolumeRankRequest)(nil),           // 20: sinopac_forwarder.VolumeRankRequest
	(*StockVolumeRankResponse)(nil),     // 21: sinopac_forwarder.StockVolumeRankResponse
	(*StockVolumeRankMessage)(nil),      // 22: sinopac_forwarder.StockVolumeRankMessage
	(*SubscribeResponse)(nil),           // 23: sinopac_forwarder.SubscribeResponse
	(*StockRealTimeTickResponse)(nil),   // 24: sinopac_forwarder.StockRealTimeTickResponse
	(*StockRealTimeBidAskResponse)(nil), // 25: sinopac_forwarder.StockRealTimeBidAskResponse
	(*StockOrderStatusArr)(nil),         // 26: sinopac_forwarder.StockOrderStatusArr
	(*StockOrderStatus)(nil),            // 27: sinopac_forwarder.StockOrderStatus
	(*emptypb.Empty)(nil),               // 28: google.protobuf.Empty
}
var file_src_sinopac_forwarder_proto_depIdxs = []int32{
	11, // 0: sinopac_forwarder.StockDetailResponse.stock:type_name -> sinopac_forwarder.StockDetailMessage
	13, // 1: sinopac_forwarder.StockSnapshotResponse.data:type_name -> sinopac_forwarder.StockSnapshotMessage
	15, // 2: sinopac_forwarder.StockHistoryTickResponse.data:type_name -> sinopac_forwarder.StockHistoryTickMessage
	17, // 3: sinopac_forwarder.StockHistoryKbarResponse.data:type_name -> sinopac_forwarder.StockHistoryKbarMessage
	19, // 4: sinopac_forwarder.StockHistoryCloseResponse.data:type_name -> sinopac_forwarder.StockHistoryCloseMessage
	22, // 5: sinopac_forwarder.StockVolumeRankResponse.data:type_name -> sinopac_forwarder.StockVolumeRankMessage
	27, // 6: sinopac_forwarder.StockOrderStatusArr.data:type_name -> sinopac_forwarder.StockOrderStatus
	28, // 7: sinopac_forwarder.SinopacForwarder.GetServerToken:input_type -> google.protobuf.Empty
	28, // 8: sinopac_forwarder.SinopacForwarder.GetAllStockDetail:input_type -> google.protobuf.Empty
	28, // 9: sinopac_forwarder.SinopacForwarder.GetAllStockSnapshot:input_type -> google.protobuf.Empty
	28, // 10: sinopac_forwarder.SinopacForwarder.GetStockSnapshotTSE:input_type -> google.protobuf.Empty
	5,  // 11: sinopac_forwarder.SinopacForwarder.GetStockTSEHistoryTick:input_type -> sinopac_forwarder.Date
	5,  // 12: sinopac_forwarder.SinopacForwarder.GetStockTSEHistoryKbar:input_type -> sinopac_forwarder.Date
	5,  // 13: sinopac_forwarder.SinopacForwarder.GetStockTSEHistoryClose:input_type -> sinopac_forwarder.Date
	20, // 14: sinopac_forwarder.SinopacForwarder.GetStockVolumeRank:input_type -> sinopac_forwarder.VolumeRankRequest
	7,  // 15: sinopac_forwarder.SinopacForwarder.GetStockSnapshotByNumArr:input_type -> sinopac_forwarder.StockNumArr
	8,  // 16: sinopac_forwarder.SinopacForwarder.GetStockHistoryTick:input_type -> sinopac_forwarder.StockNumArrWithDate
	8,  // 17: sinopac_forwarder.SinopacForwarder.GetStockHistoryKbar:input_type -> sinopac_forwarder.StockNumArrWithDate
	8,  // 18: sinopac_forwarder.SinopacForwarder.GetStockHistoryClose:input_type -> sinopac_forwarder.StockNumArrWithDate
	9,  // 19: sinopac_forwarder.SinopacForwarder.GetStockHistoryCloseByDateArr:input_type -> sinopac_forwarder.StockNumArrWithDateArr
	7,  // 20: sinopac_forwarder.SinopacForwarder.SubscribeStockTick:input_type -> sinopac_forwarder.StockNumArr
	7,  // 21: sinopac_forwarder.SinopacForwarder.SubscribeStockBidAsk:input_type -> sinopac_forwarder.StockNumArr
	7,  // 22: sinopac_forwarder.SinopacForwarder.UnSubscribeStockTick:input_type -> sinopac_forwarder.StockNumArr
	7,  // 23: sinopac_forwarder.SinopacForwarder.UnSubscribeStockBidAsk:input_type -> sinopac_forwarder.StockNumArr
	28, // 24: sinopac_forwarder.LongConeectionService.EventChannel:input_type -> google.protobuf.Empty
	28, // 25: sinopac_forwarder.LongConeectionService.TickChannel:input_type -> google.protobuf.Empty
	28, // 26: sinopac_forwarder.LongConeectionService.BidAskChannel:input_type -> google.protobuf.Empty
	28, // 27: sinopac_forwarder.LongConeectionService.OrderStatusChannel:input_type -> google.protobuf.Empty
	2,  // 28: sinopac_forwarder.TradeService.BuyStock:input_type -> sinopac_forwarder.StockOrderDetail
	2,  // 29: sinopac_forwarder.TradeService.SellStock:input_type -> sinopac_forwarder.StockOrderDetail
	2,  // 30: sinopac_forwarder.TradeService.SellFirstStock:input_type -> sinopac_forwarder.StockOrderDetail
	1,  // 31: sinopac_forwarder.TradeService.CancelStock:input_type -> sinopac_forwarder.OrderID
	1,  // 32: sinopac_forwarder.TradeService.GetOrderStatusByID:input_type -> sinopac_forwarder.OrderID
	28, // 33: sinopac_forwarder.TradeService.GetOrderStatusArr:input_type -> google.protobuf.Empty
	28, // 34: sinopac_forwarder.TradeService.GetNonBlockOrderStatusArr:input_type -> google.protobuf.Empty
	6,  // 35: sinopac_forwarder.SinopacForwarder.GetServerToken:output_type -> sinopac_forwarder.TokenResponse
	10, // 36: sinopac_forwarder.SinopacForwarder.GetAllStockDetail:output_type -> sinopac_forwarder.StockDetailResponse
	12, // 37: sinopac_forwarder.SinopacForwarder.GetAllStockSnapshot:output_type -> sinopac_forwarder.StockSnapshotResponse
	12, // 38: sinopac_forwarder.SinopacForwarder.GetStockSnapshotTSE:output_type -> sinopac_forwarder.StockSnapshotResponse
	14, // 39: sinopac_forwarder.SinopacForwarder.GetStockTSEHistoryTick:output_type -> sinopac_forwarder.StockHistoryTickResponse
	16, // 40: sinopac_forwarder.SinopacForwarder.GetStockTSEHistoryKbar:output_type -> sinopac_forwarder.StockHistoryKbarResponse
	18, // 41: sinopac_forwarder.SinopacForwarder.GetStockTSEHistoryClose:output_type -> sinopac_forwarder.StockHistoryCloseResponse
	21, // 42: sinopac_forwarder.SinopacForwarder.GetStockVolumeRank:output_type -> sinopac_forwarder.StockVolumeRankResponse
	12, // 43: sinopac_forwarder.SinopacForwarder.GetStockSnapshotByNumArr:output_type -> sinopac_forwarder.StockSnapshotResponse
	14, // 44: sinopac_forwarder.SinopacForwarder.GetStockHistoryTick:output_type -> sinopac_forwarder.StockHistoryTickResponse
	16, // 45: sinopac_forwarder.SinopacForwarder.GetStockHistoryKbar:output_type -> sinopac_forwarder.StockHistoryKbarResponse
	18, // 46: sinopac_forwarder.SinopacForwarder.GetStockHistoryClose:output_type -> sinopac_forwarder.StockHistoryCloseResponse
	18, // 47: sinopac_forwarder.SinopacForwarder.GetStockHistoryCloseByDateArr:output_type -> sinopac_forwarder.StockHistoryCloseResponse
	23, // 48: sinopac_forwarder.SinopacForwarder.SubscribeStockTick:output_type -> sinopac_forwarder.SubscribeResponse
	23, // 49: sinopac_forwarder.SinopacForwarder.SubscribeStockBidAsk:output_type -> sinopac_forwarder.SubscribeResponse
	23, // 50: sinopac_forwarder.SinopacForwarder.UnSubscribeStockTick:output_type -> sinopac_forwarder.SubscribeResponse
	23, // 51: sinopac_forwarder.SinopacForwarder.UnSubscribeStockBidAsk:output_type -> sinopac_forwarder.SubscribeResponse
	4,  // 52: sinopac_forwarder.LongConeectionService.EventChannel:output_type -> sinopac_forwarder.EventResponse
	24, // 53: sinopac_forwarder.LongConeectionService.TickChannel:output_type -> sinopac_forwarder.StockRealTimeTickResponse
	25, // 54: sinopac_forwarder.LongConeectionService.BidAskChannel:output_type -> sinopac_forwarder.StockRealTimeBidAskResponse
	27, // 55: sinopac_forwarder.LongConeectionService.OrderStatusChannel:output_type -> sinopac_forwarder.StockOrderStatus
	3,  // 56: sinopac_forwarder.TradeService.BuyStock:output_type -> sinopac_forwarder.TradeResult
	3,  // 57: sinopac_forwarder.TradeService.SellStock:output_type -> sinopac_forwarder.TradeResult
	3,  // 58: sinopac_forwarder.TradeService.SellFirstStock:output_type -> sinopac_forwarder.TradeResult
	3,  // 59: sinopac_forwarder.TradeService.CancelStock:output_type -> sinopac_forwarder.TradeResult
	3,  // 60: sinopac_forwarder.TradeService.GetOrderStatusByID:output_type -> sinopac_forwarder.TradeResult
	26, // 61: sinopac_forwarder.TradeService.GetOrderStatusArr:output_type -> sinopac_forwarder.StockOrderStatusArr
	0,  // 62: sinopac_forwarder.TradeService.GetNonBlockOrderStatusArr:output_type -> sinopac_forwarder.FunctionErr
	35, // [35:63] is the sub-list for method output_type
	7,  // [7:35] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_src_sinopac_forwarder_proto_init() }
func file_src_sinopac_forwarder_proto_init() {
	if File_src_sinopac_forwarder_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_src_sinopac_forwarder_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionErr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockOrderDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Date); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockNumArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockNumArrWithDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockNumArrWithDateArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockDetailMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockSnapshotMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockHistoryTickResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockHistoryTickMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockHistoryKbarResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockHistoryKbarMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockHistoryCloseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockHistoryCloseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeRankRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockVolumeRankResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockVolumeRankMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockRealTimeTickResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockRealTimeBidAskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockOrderStatusArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_sinopac_forwarder_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockOrderStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_sinopac_forwarder_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_src_sinopac_forwarder_proto_goTypes,
		DependencyIndexes: file_src_sinopac_forwarder_proto_depIdxs,
		MessageInfos:      file_src_sinopac_forwarder_proto_msgTypes,
	}.Build()
	File_src_sinopac_forwarder_proto = out.File
	file_src_sinopac_forwarder_proto_rawDesc = nil
	file_src_sinopac_forwarder_proto_goTypes = nil
	file_src_sinopac_forwarder_proto_depIdxs = nil
}
