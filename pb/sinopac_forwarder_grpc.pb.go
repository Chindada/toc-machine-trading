// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: src/sinopac_forwarder.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HealthCheckClient is the client API for HealthCheck service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthCheckClient interface {
	// Health check
	Heartbeat(ctx context.Context, opts ...grpc.CallOption) (HealthCheck_HeartbeatClient, error)
	Terminate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type healthCheckClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthCheckClient(cc grpc.ClientConnInterface) HealthCheckClient {
	return &healthCheckClient{cc}
}

func (c *healthCheckClient) Heartbeat(ctx context.Context, opts ...grpc.CallOption) (HealthCheck_HeartbeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &HealthCheck_ServiceDesc.Streams[0], "/sinopac_forwarder.HealthCheck/Heartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &healthCheckHeartbeatClient{stream}
	return x, nil
}

type HealthCheck_HeartbeatClient interface {
	Send(*Beat) error
	Recv() (*Beat, error)
	grpc.ClientStream
}

type healthCheckHeartbeatClient struct {
	grpc.ClientStream
}

func (x *healthCheckHeartbeatClient) Send(m *Beat) error {
	return x.ClientStream.SendMsg(m)
}

func (x *healthCheckHeartbeatClient) Recv() (*Beat, error) {
	m := new(Beat)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *healthCheckClient) Terminate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.HealthCheck/Terminate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthCheckServer is the server API for HealthCheck service.
// All implementations must embed UnimplementedHealthCheckServer
// for forward compatibility
type HealthCheckServer interface {
	// Health check
	Heartbeat(HealthCheck_HeartbeatServer) error
	Terminate(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedHealthCheckServer()
}

// UnimplementedHealthCheckServer must be embedded to have forward compatible implementations.
type UnimplementedHealthCheckServer struct {
}

func (UnimplementedHealthCheckServer) Heartbeat(HealthCheck_HeartbeatServer) error {
	return status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedHealthCheckServer) Terminate(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Terminate not implemented")
}
func (UnimplementedHealthCheckServer) mustEmbedUnimplementedHealthCheckServer() {}

// UnsafeHealthCheckServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthCheckServer will
// result in compilation errors.
type UnsafeHealthCheckServer interface {
	mustEmbedUnimplementedHealthCheckServer()
}

func RegisterHealthCheckServer(s grpc.ServiceRegistrar, srv HealthCheckServer) {
	s.RegisterService(&HealthCheck_ServiceDesc, srv)
}

func _HealthCheck_Heartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HealthCheckServer).Heartbeat(&healthCheckHeartbeatServer{stream})
}

type HealthCheck_HeartbeatServer interface {
	Send(*Beat) error
	Recv() (*Beat, error)
	grpc.ServerStream
}

type healthCheckHeartbeatServer struct {
	grpc.ServerStream
}

func (x *healthCheckHeartbeatServer) Send(m *Beat) error {
	return x.ServerStream.SendMsg(m)
}

func (x *healthCheckHeartbeatServer) Recv() (*Beat, error) {
	m := new(Beat)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HealthCheck_Terminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckServer).Terminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.HealthCheck/Terminate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckServer).Terminate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthCheck_ServiceDesc is the grpc.ServiceDesc for HealthCheck service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthCheck_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sinopac_forwarder.HealthCheck",
	HandlerType: (*HealthCheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Terminate",
			Handler:    _HealthCheck_Terminate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Heartbeat",
			Handler:       _HealthCheck_Heartbeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "src/sinopac_forwarder.proto",
}

// SinopacForwarderClient is the client API for SinopacForwarder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SinopacForwarderClient interface {
	// Basic
	GetAllStockDetail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockDetailResponse, error)
	GetAllStockSnapshot(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockSnapshotResponse, error)
	GetStockSnapshotByNumArr(ctx context.Context, in *StockNumArr, opts ...grpc.CallOption) (*StockSnapshotResponse, error)
	GetStockSnapshotTSE(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockSnapshotMessage, error)
	// History
	GetStockHistoryTick(ctx context.Context, in *StockNumArrWithDate, opts ...grpc.CallOption) (*StockHistoryTickResponse, error)
	GetStockHistoryKbar(ctx context.Context, in *StockNumArrWithDate, opts ...grpc.CallOption) (*StockHistoryKbarResponse, error)
	GetStockHistoryClose(ctx context.Context, in *StockNumArrWithDate, opts ...grpc.CallOption) (*StockHistoryCloseResponse, error)
	GetStockHistoryCloseByDateArr(ctx context.Context, in *StockNumArrWithDateArr, opts ...grpc.CallOption) (*StockHistoryCloseResponse, error)
	GetStockTSEHistoryTick(ctx context.Context, in *Date, opts ...grpc.CallOption) (*StockHistoryTickResponse, error)
	GetStockTSEHistoryKbar(ctx context.Context, in *Date, opts ...grpc.CallOption) (*StockHistoryKbarResponse, error)
	GetStockTSEHistoryClose(ctx context.Context, in *Date, opts ...grpc.CallOption) (*StockHistoryCloseResponse, error)
	// Target
	GetStockVolumeRank(ctx context.Context, in *VolumeRankRequest, opts ...grpc.CallOption) (*StockVolumeRankResponse, error)
	SubscribeStockTick(ctx context.Context, in *StockNumArr, opts ...grpc.CallOption) (*SubscribeResponse, error)
	UnSubscribeStockTick(ctx context.Context, in *StockNumArr, opts ...grpc.CallOption) (*SubscribeResponse, error)
	UnSubscribeStockAllTick(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FunctionErr, error)
	SubscribeStockBidAsk(ctx context.Context, in *StockNumArr, opts ...grpc.CallOption) (*SubscribeResponse, error)
	UnSubscribeStockBidAsk(ctx context.Context, in *StockNumArr, opts ...grpc.CallOption) (*SubscribeResponse, error)
	UnSubscribeStockAllBidAsk(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FunctionErr, error)
}

type sinopacForwarderClient struct {
	cc grpc.ClientConnInterface
}

func NewSinopacForwarderClient(cc grpc.ClientConnInterface) SinopacForwarderClient {
	return &sinopacForwarderClient{cc}
}

func (c *sinopacForwarderClient) GetAllStockDetail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockDetailResponse, error) {
	out := new(StockDetailResponse)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.SinopacForwarder/GetAllStockDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinopacForwarderClient) GetAllStockSnapshot(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockSnapshotResponse, error) {
	out := new(StockSnapshotResponse)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.SinopacForwarder/GetAllStockSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinopacForwarderClient) GetStockSnapshotByNumArr(ctx context.Context, in *StockNumArr, opts ...grpc.CallOption) (*StockSnapshotResponse, error) {
	out := new(StockSnapshotResponse)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.SinopacForwarder/GetStockSnapshotByNumArr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinopacForwarderClient) GetStockSnapshotTSE(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockSnapshotMessage, error) {
	out := new(StockSnapshotMessage)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.SinopacForwarder/GetStockSnapshotTSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinopacForwarderClient) GetStockHistoryTick(ctx context.Context, in *StockNumArrWithDate, opts ...grpc.CallOption) (*StockHistoryTickResponse, error) {
	out := new(StockHistoryTickResponse)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.SinopacForwarder/GetStockHistoryTick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinopacForwarderClient) GetStockHistoryKbar(ctx context.Context, in *StockNumArrWithDate, opts ...grpc.CallOption) (*StockHistoryKbarResponse, error) {
	out := new(StockHistoryKbarResponse)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.SinopacForwarder/GetStockHistoryKbar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinopacForwarderClient) GetStockHistoryClose(ctx context.Context, in *StockNumArrWithDate, opts ...grpc.CallOption) (*StockHistoryCloseResponse, error) {
	out := new(StockHistoryCloseResponse)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.SinopacForwarder/GetStockHistoryClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinopacForwarderClient) GetStockHistoryCloseByDateArr(ctx context.Context, in *StockNumArrWithDateArr, opts ...grpc.CallOption) (*StockHistoryCloseResponse, error) {
	out := new(StockHistoryCloseResponse)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.SinopacForwarder/GetStockHistoryCloseByDateArr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinopacForwarderClient) GetStockTSEHistoryTick(ctx context.Context, in *Date, opts ...grpc.CallOption) (*StockHistoryTickResponse, error) {
	out := new(StockHistoryTickResponse)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.SinopacForwarder/GetStockTSEHistoryTick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinopacForwarderClient) GetStockTSEHistoryKbar(ctx context.Context, in *Date, opts ...grpc.CallOption) (*StockHistoryKbarResponse, error) {
	out := new(StockHistoryKbarResponse)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.SinopacForwarder/GetStockTSEHistoryKbar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinopacForwarderClient) GetStockTSEHistoryClose(ctx context.Context, in *Date, opts ...grpc.CallOption) (*StockHistoryCloseResponse, error) {
	out := new(StockHistoryCloseResponse)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.SinopacForwarder/GetStockTSEHistoryClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinopacForwarderClient) GetStockVolumeRank(ctx context.Context, in *VolumeRankRequest, opts ...grpc.CallOption) (*StockVolumeRankResponse, error) {
	out := new(StockVolumeRankResponse)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.SinopacForwarder/GetStockVolumeRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinopacForwarderClient) SubscribeStockTick(ctx context.Context, in *StockNumArr, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.SinopacForwarder/SubscribeStockTick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinopacForwarderClient) UnSubscribeStockTick(ctx context.Context, in *StockNumArr, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.SinopacForwarder/UnSubscribeStockTick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinopacForwarderClient) UnSubscribeStockAllTick(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FunctionErr, error) {
	out := new(FunctionErr)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.SinopacForwarder/UnSubscribeStockAllTick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinopacForwarderClient) SubscribeStockBidAsk(ctx context.Context, in *StockNumArr, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.SinopacForwarder/SubscribeStockBidAsk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinopacForwarderClient) UnSubscribeStockBidAsk(ctx context.Context, in *StockNumArr, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.SinopacForwarder/UnSubscribeStockBidAsk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinopacForwarderClient) UnSubscribeStockAllBidAsk(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FunctionErr, error) {
	out := new(FunctionErr)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.SinopacForwarder/UnSubscribeStockAllBidAsk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SinopacForwarderServer is the server API for SinopacForwarder service.
// All implementations must embed UnimplementedSinopacForwarderServer
// for forward compatibility
type SinopacForwarderServer interface {
	// Basic
	GetAllStockDetail(context.Context, *emptypb.Empty) (*StockDetailResponse, error)
	GetAllStockSnapshot(context.Context, *emptypb.Empty) (*StockSnapshotResponse, error)
	GetStockSnapshotByNumArr(context.Context, *StockNumArr) (*StockSnapshotResponse, error)
	GetStockSnapshotTSE(context.Context, *emptypb.Empty) (*StockSnapshotMessage, error)
	// History
	GetStockHistoryTick(context.Context, *StockNumArrWithDate) (*StockHistoryTickResponse, error)
	GetStockHistoryKbar(context.Context, *StockNumArrWithDate) (*StockHistoryKbarResponse, error)
	GetStockHistoryClose(context.Context, *StockNumArrWithDate) (*StockHistoryCloseResponse, error)
	GetStockHistoryCloseByDateArr(context.Context, *StockNumArrWithDateArr) (*StockHistoryCloseResponse, error)
	GetStockTSEHistoryTick(context.Context, *Date) (*StockHistoryTickResponse, error)
	GetStockTSEHistoryKbar(context.Context, *Date) (*StockHistoryKbarResponse, error)
	GetStockTSEHistoryClose(context.Context, *Date) (*StockHistoryCloseResponse, error)
	// Target
	GetStockVolumeRank(context.Context, *VolumeRankRequest) (*StockVolumeRankResponse, error)
	SubscribeStockTick(context.Context, *StockNumArr) (*SubscribeResponse, error)
	UnSubscribeStockTick(context.Context, *StockNumArr) (*SubscribeResponse, error)
	UnSubscribeStockAllTick(context.Context, *emptypb.Empty) (*FunctionErr, error)
	SubscribeStockBidAsk(context.Context, *StockNumArr) (*SubscribeResponse, error)
	UnSubscribeStockBidAsk(context.Context, *StockNumArr) (*SubscribeResponse, error)
	UnSubscribeStockAllBidAsk(context.Context, *emptypb.Empty) (*FunctionErr, error)
	mustEmbedUnimplementedSinopacForwarderServer()
}

// UnimplementedSinopacForwarderServer must be embedded to have forward compatible implementations.
type UnimplementedSinopacForwarderServer struct {
}

func (UnimplementedSinopacForwarderServer) GetAllStockDetail(context.Context, *emptypb.Empty) (*StockDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStockDetail not implemented")
}
func (UnimplementedSinopacForwarderServer) GetAllStockSnapshot(context.Context, *emptypb.Empty) (*StockSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStockSnapshot not implemented")
}
func (UnimplementedSinopacForwarderServer) GetStockSnapshotByNumArr(context.Context, *StockNumArr) (*StockSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockSnapshotByNumArr not implemented")
}
func (UnimplementedSinopacForwarderServer) GetStockSnapshotTSE(context.Context, *emptypb.Empty) (*StockSnapshotMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockSnapshotTSE not implemented")
}
func (UnimplementedSinopacForwarderServer) GetStockHistoryTick(context.Context, *StockNumArrWithDate) (*StockHistoryTickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockHistoryTick not implemented")
}
func (UnimplementedSinopacForwarderServer) GetStockHistoryKbar(context.Context, *StockNumArrWithDate) (*StockHistoryKbarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockHistoryKbar not implemented")
}
func (UnimplementedSinopacForwarderServer) GetStockHistoryClose(context.Context, *StockNumArrWithDate) (*StockHistoryCloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockHistoryClose not implemented")
}
func (UnimplementedSinopacForwarderServer) GetStockHistoryCloseByDateArr(context.Context, *StockNumArrWithDateArr) (*StockHistoryCloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockHistoryCloseByDateArr not implemented")
}
func (UnimplementedSinopacForwarderServer) GetStockTSEHistoryTick(context.Context, *Date) (*StockHistoryTickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockTSEHistoryTick not implemented")
}
func (UnimplementedSinopacForwarderServer) GetStockTSEHistoryKbar(context.Context, *Date) (*StockHistoryKbarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockTSEHistoryKbar not implemented")
}
func (UnimplementedSinopacForwarderServer) GetStockTSEHistoryClose(context.Context, *Date) (*StockHistoryCloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockTSEHistoryClose not implemented")
}
func (UnimplementedSinopacForwarderServer) GetStockVolumeRank(context.Context, *VolumeRankRequest) (*StockVolumeRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockVolumeRank not implemented")
}
func (UnimplementedSinopacForwarderServer) SubscribeStockTick(context.Context, *StockNumArr) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeStockTick not implemented")
}
func (UnimplementedSinopacForwarderServer) UnSubscribeStockTick(context.Context, *StockNumArr) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnSubscribeStockTick not implemented")
}
func (UnimplementedSinopacForwarderServer) UnSubscribeStockAllTick(context.Context, *emptypb.Empty) (*FunctionErr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnSubscribeStockAllTick not implemented")
}
func (UnimplementedSinopacForwarderServer) SubscribeStockBidAsk(context.Context, *StockNumArr) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeStockBidAsk not implemented")
}
func (UnimplementedSinopacForwarderServer) UnSubscribeStockBidAsk(context.Context, *StockNumArr) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnSubscribeStockBidAsk not implemented")
}
func (UnimplementedSinopacForwarderServer) UnSubscribeStockAllBidAsk(context.Context, *emptypb.Empty) (*FunctionErr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnSubscribeStockAllBidAsk not implemented")
}
func (UnimplementedSinopacForwarderServer) mustEmbedUnimplementedSinopacForwarderServer() {}

// UnsafeSinopacForwarderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SinopacForwarderServer will
// result in compilation errors.
type UnsafeSinopacForwarderServer interface {
	mustEmbedUnimplementedSinopacForwarderServer()
}

func RegisterSinopacForwarderServer(s grpc.ServiceRegistrar, srv SinopacForwarderServer) {
	s.RegisterService(&SinopacForwarder_ServiceDesc, srv)
}

func _SinopacForwarder_GetAllStockDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinopacForwarderServer).GetAllStockDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.SinopacForwarder/GetAllStockDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinopacForwarderServer).GetAllStockDetail(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SinopacForwarder_GetAllStockSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinopacForwarderServer).GetAllStockSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.SinopacForwarder/GetAllStockSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinopacForwarderServer).GetAllStockSnapshot(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SinopacForwarder_GetStockSnapshotByNumArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockNumArr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinopacForwarderServer).GetStockSnapshotByNumArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.SinopacForwarder/GetStockSnapshotByNumArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinopacForwarderServer).GetStockSnapshotByNumArr(ctx, req.(*StockNumArr))
	}
	return interceptor(ctx, in, info, handler)
}

func _SinopacForwarder_GetStockSnapshotTSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinopacForwarderServer).GetStockSnapshotTSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.SinopacForwarder/GetStockSnapshotTSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinopacForwarderServer).GetStockSnapshotTSE(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SinopacForwarder_GetStockHistoryTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockNumArrWithDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinopacForwarderServer).GetStockHistoryTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.SinopacForwarder/GetStockHistoryTick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinopacForwarderServer).GetStockHistoryTick(ctx, req.(*StockNumArrWithDate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SinopacForwarder_GetStockHistoryKbar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockNumArrWithDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinopacForwarderServer).GetStockHistoryKbar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.SinopacForwarder/GetStockHistoryKbar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinopacForwarderServer).GetStockHistoryKbar(ctx, req.(*StockNumArrWithDate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SinopacForwarder_GetStockHistoryClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockNumArrWithDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinopacForwarderServer).GetStockHistoryClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.SinopacForwarder/GetStockHistoryClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinopacForwarderServer).GetStockHistoryClose(ctx, req.(*StockNumArrWithDate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SinopacForwarder_GetStockHistoryCloseByDateArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockNumArrWithDateArr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinopacForwarderServer).GetStockHistoryCloseByDateArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.SinopacForwarder/GetStockHistoryCloseByDateArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinopacForwarderServer).GetStockHistoryCloseByDateArr(ctx, req.(*StockNumArrWithDateArr))
	}
	return interceptor(ctx, in, info, handler)
}

func _SinopacForwarder_GetStockTSEHistoryTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Date)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinopacForwarderServer).GetStockTSEHistoryTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.SinopacForwarder/GetStockTSEHistoryTick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinopacForwarderServer).GetStockTSEHistoryTick(ctx, req.(*Date))
	}
	return interceptor(ctx, in, info, handler)
}

func _SinopacForwarder_GetStockTSEHistoryKbar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Date)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinopacForwarderServer).GetStockTSEHistoryKbar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.SinopacForwarder/GetStockTSEHistoryKbar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinopacForwarderServer).GetStockTSEHistoryKbar(ctx, req.(*Date))
	}
	return interceptor(ctx, in, info, handler)
}

func _SinopacForwarder_GetStockTSEHistoryClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Date)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinopacForwarderServer).GetStockTSEHistoryClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.SinopacForwarder/GetStockTSEHistoryClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinopacForwarderServer).GetStockTSEHistoryClose(ctx, req.(*Date))
	}
	return interceptor(ctx, in, info, handler)
}

func _SinopacForwarder_GetStockVolumeRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinopacForwarderServer).GetStockVolumeRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.SinopacForwarder/GetStockVolumeRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinopacForwarderServer).GetStockVolumeRank(ctx, req.(*VolumeRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SinopacForwarder_SubscribeStockTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockNumArr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinopacForwarderServer).SubscribeStockTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.SinopacForwarder/SubscribeStockTick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinopacForwarderServer).SubscribeStockTick(ctx, req.(*StockNumArr))
	}
	return interceptor(ctx, in, info, handler)
}

func _SinopacForwarder_UnSubscribeStockTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockNumArr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinopacForwarderServer).UnSubscribeStockTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.SinopacForwarder/UnSubscribeStockTick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinopacForwarderServer).UnSubscribeStockTick(ctx, req.(*StockNumArr))
	}
	return interceptor(ctx, in, info, handler)
}

func _SinopacForwarder_UnSubscribeStockAllTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinopacForwarderServer).UnSubscribeStockAllTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.SinopacForwarder/UnSubscribeStockAllTick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinopacForwarderServer).UnSubscribeStockAllTick(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SinopacForwarder_SubscribeStockBidAsk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockNumArr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinopacForwarderServer).SubscribeStockBidAsk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.SinopacForwarder/SubscribeStockBidAsk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinopacForwarderServer).SubscribeStockBidAsk(ctx, req.(*StockNumArr))
	}
	return interceptor(ctx, in, info, handler)
}

func _SinopacForwarder_UnSubscribeStockBidAsk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockNumArr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinopacForwarderServer).UnSubscribeStockBidAsk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.SinopacForwarder/UnSubscribeStockBidAsk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinopacForwarderServer).UnSubscribeStockBidAsk(ctx, req.(*StockNumArr))
	}
	return interceptor(ctx, in, info, handler)
}

func _SinopacForwarder_UnSubscribeStockAllBidAsk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinopacForwarderServer).UnSubscribeStockAllBidAsk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.SinopacForwarder/UnSubscribeStockAllBidAsk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinopacForwarderServer).UnSubscribeStockAllBidAsk(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SinopacForwarder_ServiceDesc is the grpc.ServiceDesc for SinopacForwarder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SinopacForwarder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sinopac_forwarder.SinopacForwarder",
	HandlerType: (*SinopacForwarderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllStockDetail",
			Handler:    _SinopacForwarder_GetAllStockDetail_Handler,
		},
		{
			MethodName: "GetAllStockSnapshot",
			Handler:    _SinopacForwarder_GetAllStockSnapshot_Handler,
		},
		{
			MethodName: "GetStockSnapshotByNumArr",
			Handler:    _SinopacForwarder_GetStockSnapshotByNumArr_Handler,
		},
		{
			MethodName: "GetStockSnapshotTSE",
			Handler:    _SinopacForwarder_GetStockSnapshotTSE_Handler,
		},
		{
			MethodName: "GetStockHistoryTick",
			Handler:    _SinopacForwarder_GetStockHistoryTick_Handler,
		},
		{
			MethodName: "GetStockHistoryKbar",
			Handler:    _SinopacForwarder_GetStockHistoryKbar_Handler,
		},
		{
			MethodName: "GetStockHistoryClose",
			Handler:    _SinopacForwarder_GetStockHistoryClose_Handler,
		},
		{
			MethodName: "GetStockHistoryCloseByDateArr",
			Handler:    _SinopacForwarder_GetStockHistoryCloseByDateArr_Handler,
		},
		{
			MethodName: "GetStockTSEHistoryTick",
			Handler:    _SinopacForwarder_GetStockTSEHistoryTick_Handler,
		},
		{
			MethodName: "GetStockTSEHistoryKbar",
			Handler:    _SinopacForwarder_GetStockTSEHistoryKbar_Handler,
		},
		{
			MethodName: "GetStockTSEHistoryClose",
			Handler:    _SinopacForwarder_GetStockTSEHistoryClose_Handler,
		},
		{
			MethodName: "GetStockVolumeRank",
			Handler:    _SinopacForwarder_GetStockVolumeRank_Handler,
		},
		{
			MethodName: "SubscribeStockTick",
			Handler:    _SinopacForwarder_SubscribeStockTick_Handler,
		},
		{
			MethodName: "UnSubscribeStockTick",
			Handler:    _SinopacForwarder_UnSubscribeStockTick_Handler,
		},
		{
			MethodName: "UnSubscribeStockAllTick",
			Handler:    _SinopacForwarder_UnSubscribeStockAllTick_Handler,
		},
		{
			MethodName: "SubscribeStockBidAsk",
			Handler:    _SinopacForwarder_SubscribeStockBidAsk_Handler,
		},
		{
			MethodName: "UnSubscribeStockBidAsk",
			Handler:    _SinopacForwarder_UnSubscribeStockBidAsk_Handler,
		},
		{
			MethodName: "UnSubscribeStockAllBidAsk",
			Handler:    _SinopacForwarder_UnSubscribeStockAllBidAsk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/sinopac_forwarder.proto",
}

// TradeServiceClient is the client API for TradeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradeServiceClient interface {
	BuyStock(ctx context.Context, in *StockOrderDetail, opts ...grpc.CallOption) (*TradeResult, error)
	SellStock(ctx context.Context, in *StockOrderDetail, opts ...grpc.CallOption) (*TradeResult, error)
	SellFirstStock(ctx context.Context, in *StockOrderDetail, opts ...grpc.CallOption) (*TradeResult, error)
	CancelStock(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*TradeResult, error)
	GetOrderStatusByID(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*TradeResult, error)
	GetOrderStatusArr(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockOrderStatusArr, error)
	GetNonBlockOrderStatusArr(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FunctionErr, error)
}

type tradeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeServiceClient(cc grpc.ClientConnInterface) TradeServiceClient {
	return &tradeServiceClient{cc}
}

func (c *tradeServiceClient) BuyStock(ctx context.Context, in *StockOrderDetail, opts ...grpc.CallOption) (*TradeResult, error) {
	out := new(TradeResult)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.TradeService/BuyStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeServiceClient) SellStock(ctx context.Context, in *StockOrderDetail, opts ...grpc.CallOption) (*TradeResult, error) {
	out := new(TradeResult)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.TradeService/SellStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeServiceClient) SellFirstStock(ctx context.Context, in *StockOrderDetail, opts ...grpc.CallOption) (*TradeResult, error) {
	out := new(TradeResult)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.TradeService/SellFirstStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeServiceClient) CancelStock(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*TradeResult, error) {
	out := new(TradeResult)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.TradeService/CancelStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeServiceClient) GetOrderStatusByID(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*TradeResult, error) {
	out := new(TradeResult)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.TradeService/GetOrderStatusByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeServiceClient) GetOrderStatusArr(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockOrderStatusArr, error) {
	out := new(StockOrderStatusArr)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.TradeService/GetOrderStatusArr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeServiceClient) GetNonBlockOrderStatusArr(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FunctionErr, error) {
	out := new(FunctionErr)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.TradeService/GetNonBlockOrderStatusArr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradeServiceServer is the server API for TradeService service.
// All implementations must embed UnimplementedTradeServiceServer
// for forward compatibility
type TradeServiceServer interface {
	BuyStock(context.Context, *StockOrderDetail) (*TradeResult, error)
	SellStock(context.Context, *StockOrderDetail) (*TradeResult, error)
	SellFirstStock(context.Context, *StockOrderDetail) (*TradeResult, error)
	CancelStock(context.Context, *OrderID) (*TradeResult, error)
	GetOrderStatusByID(context.Context, *OrderID) (*TradeResult, error)
	GetOrderStatusArr(context.Context, *emptypb.Empty) (*StockOrderStatusArr, error)
	GetNonBlockOrderStatusArr(context.Context, *emptypb.Empty) (*FunctionErr, error)
	mustEmbedUnimplementedTradeServiceServer()
}

// UnimplementedTradeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTradeServiceServer struct {
}

func (UnimplementedTradeServiceServer) BuyStock(context.Context, *StockOrderDetail) (*TradeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyStock not implemented")
}
func (UnimplementedTradeServiceServer) SellStock(context.Context, *StockOrderDetail) (*TradeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellStock not implemented")
}
func (UnimplementedTradeServiceServer) SellFirstStock(context.Context, *StockOrderDetail) (*TradeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellFirstStock not implemented")
}
func (UnimplementedTradeServiceServer) CancelStock(context.Context, *OrderID) (*TradeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelStock not implemented")
}
func (UnimplementedTradeServiceServer) GetOrderStatusByID(context.Context, *OrderID) (*TradeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderStatusByID not implemented")
}
func (UnimplementedTradeServiceServer) GetOrderStatusArr(context.Context, *emptypb.Empty) (*StockOrderStatusArr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderStatusArr not implemented")
}
func (UnimplementedTradeServiceServer) GetNonBlockOrderStatusArr(context.Context, *emptypb.Empty) (*FunctionErr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNonBlockOrderStatusArr not implemented")
}
func (UnimplementedTradeServiceServer) mustEmbedUnimplementedTradeServiceServer() {}

// UnsafeTradeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradeServiceServer will
// result in compilation errors.
type UnsafeTradeServiceServer interface {
	mustEmbedUnimplementedTradeServiceServer()
}

func RegisterTradeServiceServer(s grpc.ServiceRegistrar, srv TradeServiceServer) {
	s.RegisterService(&TradeService_ServiceDesc, srv)
}

func _TradeService_BuyStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockOrderDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServiceServer).BuyStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.TradeService/BuyStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServiceServer).BuyStock(ctx, req.(*StockOrderDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeService_SellStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockOrderDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServiceServer).SellStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.TradeService/SellStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServiceServer).SellStock(ctx, req.(*StockOrderDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeService_SellFirstStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockOrderDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServiceServer).SellFirstStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.TradeService/SellFirstStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServiceServer).SellFirstStock(ctx, req.(*StockOrderDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeService_CancelStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServiceServer).CancelStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.TradeService/CancelStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServiceServer).CancelStock(ctx, req.(*OrderID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeService_GetOrderStatusByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServiceServer).GetOrderStatusByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.TradeService/GetOrderStatusByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServiceServer).GetOrderStatusByID(ctx, req.(*OrderID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeService_GetOrderStatusArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServiceServer).GetOrderStatusArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.TradeService/GetOrderStatusArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServiceServer).GetOrderStatusArr(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeService_GetNonBlockOrderStatusArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServiceServer).GetNonBlockOrderStatusArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.TradeService/GetNonBlockOrderStatusArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServiceServer).GetNonBlockOrderStatusArr(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TradeService_ServiceDesc is the grpc.ServiceDesc for TradeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sinopac_forwarder.TradeService",
	HandlerType: (*TradeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuyStock",
			Handler:    _TradeService_BuyStock_Handler,
		},
		{
			MethodName: "SellStock",
			Handler:    _TradeService_SellStock_Handler,
		},
		{
			MethodName: "SellFirstStock",
			Handler:    _TradeService_SellFirstStock_Handler,
		},
		{
			MethodName: "CancelStock",
			Handler:    _TradeService_CancelStock_Handler,
		},
		{
			MethodName: "GetOrderStatusByID",
			Handler:    _TradeService_GetOrderStatusByID_Handler,
		},
		{
			MethodName: "GetOrderStatusArr",
			Handler:    _TradeService_GetOrderStatusArr_Handler,
		},
		{
			MethodName: "GetNonBlockOrderStatusArr",
			Handler:    _TradeService_GetNonBlockOrderStatusArr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/sinopac_forwarder.proto",
}
