// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: common.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RespCode  int64  `protobuf:"varint,1,opt,name=resp_code,json=respCode,proto3" json:"resp_code,omitempty"`
	EventCode int64  `protobuf:"varint,2,opt,name=event_code,json=eventCode,proto3" json:"event_code,omitempty"`
	Info      string `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	Event     string `protobuf:"bytes,4,opt,name=event,proto3" json:"event,omitempty"`
	EventTime string `protobuf:"bytes,5,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
}

func (x *EventMessage) Reset() {
	*x = EventMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMessage) ProtoMessage() {}

func (x *EventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMessage.ProtoReflect.Descriptor instead.
func (*EventMessage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *EventMessage) GetRespCode() int64 {
	if x != nil {
		return x.RespCode
	}
	return 0
}

func (x *EventMessage) GetEventCode() int64 {
	if x != nil {
		return x.EventCode
	}
	return 0
}

func (x *EventMessage) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *EventMessage) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *EventMessage) GetEventTime() string {
	if x != nil {
		return x.EventTime
	}
	return ""
}

type StockRealTimeTickMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code            string  `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	DateTime        string  `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	Open            float64 `protobuf:"fixed64,3,opt,name=open,proto3" json:"open,omitempty"`
	AvgPrice        float64 `protobuf:"fixed64,4,opt,name=avg_price,json=avgPrice,proto3" json:"avg_price,omitempty"`
	Close           float64 `protobuf:"fixed64,5,opt,name=close,proto3" json:"close,omitempty"`
	High            float64 `protobuf:"fixed64,6,opt,name=high,proto3" json:"high,omitempty"`
	Low             float64 `protobuf:"fixed64,7,opt,name=low,proto3" json:"low,omitempty"`
	Amount          float64 `protobuf:"fixed64,8,opt,name=amount,proto3" json:"amount,omitempty"`
	TotalAmount     float64 `protobuf:"fixed64,9,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	Volume          int64   `protobuf:"varint,10,opt,name=volume,proto3" json:"volume,omitempty"`
	TotalVolume     int64   `protobuf:"varint,11,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`
	TickType        int64   `protobuf:"varint,12,opt,name=tick_type,json=tickType,proto3" json:"tick_type,omitempty"`
	ChgType         int64   `protobuf:"varint,13,opt,name=chg_type,json=chgType,proto3" json:"chg_type,omitempty"`
	PriceChg        float64 `protobuf:"fixed64,14,opt,name=price_chg,json=priceChg,proto3" json:"price_chg,omitempty"`
	PctChg          float64 `protobuf:"fixed64,15,opt,name=pct_chg,json=pctChg,proto3" json:"pct_chg,omitempty"`
	BidSideTotalVol int64   `protobuf:"varint,16,opt,name=bid_side_total_vol,json=bidSideTotalVol,proto3" json:"bid_side_total_vol,omitempty"`
	AskSideTotalVol int64   `protobuf:"varint,17,opt,name=ask_side_total_vol,json=askSideTotalVol,proto3" json:"ask_side_total_vol,omitempty"`
	BidSideTotalCnt int64   `protobuf:"varint,18,opt,name=bid_side_total_cnt,json=bidSideTotalCnt,proto3" json:"bid_side_total_cnt,omitempty"`
	AskSideTotalCnt int64   `protobuf:"varint,19,opt,name=ask_side_total_cnt,json=askSideTotalCnt,proto3" json:"ask_side_total_cnt,omitempty"`
	Suspend         bool    `protobuf:"varint,20,opt,name=suspend,proto3" json:"suspend,omitempty"`
	Simtrade        bool    `protobuf:"varint,21,opt,name=simtrade,proto3" json:"simtrade,omitempty"`
}

func (x *StockRealTimeTickMessage) Reset() {
	*x = StockRealTimeTickMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockRealTimeTickMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockRealTimeTickMessage) ProtoMessage() {}

func (x *StockRealTimeTickMessage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockRealTimeTickMessage.ProtoReflect.Descriptor instead.
func (*StockRealTimeTickMessage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *StockRealTimeTickMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StockRealTimeTickMessage) GetDateTime() string {
	if x != nil {
		return x.DateTime
	}
	return ""
}

func (x *StockRealTimeTickMessage) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *StockRealTimeTickMessage) GetAvgPrice() float64 {
	if x != nil {
		return x.AvgPrice
	}
	return 0
}

func (x *StockRealTimeTickMessage) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *StockRealTimeTickMessage) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *StockRealTimeTickMessage) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *StockRealTimeTickMessage) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *StockRealTimeTickMessage) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *StockRealTimeTickMessage) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *StockRealTimeTickMessage) GetTotalVolume() int64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *StockRealTimeTickMessage) GetTickType() int64 {
	if x != nil {
		return x.TickType
	}
	return 0
}

func (x *StockRealTimeTickMessage) GetChgType() int64 {
	if x != nil {
		return x.ChgType
	}
	return 0
}

func (x *StockRealTimeTickMessage) GetPriceChg() float64 {
	if x != nil {
		return x.PriceChg
	}
	return 0
}

func (x *StockRealTimeTickMessage) GetPctChg() float64 {
	if x != nil {
		return x.PctChg
	}
	return 0
}

func (x *StockRealTimeTickMessage) GetBidSideTotalVol() int64 {
	if x != nil {
		return x.BidSideTotalVol
	}
	return 0
}

func (x *StockRealTimeTickMessage) GetAskSideTotalVol() int64 {
	if x != nil {
		return x.AskSideTotalVol
	}
	return 0
}

func (x *StockRealTimeTickMessage) GetBidSideTotalCnt() int64 {
	if x != nil {
		return x.BidSideTotalCnt
	}
	return 0
}

func (x *StockRealTimeTickMessage) GetAskSideTotalCnt() int64 {
	if x != nil {
		return x.AskSideTotalCnt
	}
	return 0
}

func (x *StockRealTimeTickMessage) GetSuspend() bool {
	if x != nil {
		return x.Suspend
	}
	return false
}

func (x *StockRealTimeTickMessage) GetSimtrade() bool {
	if x != nil {
		return x.Simtrade
	}
	return false
}

type StockRealTimeBidAskMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       string    `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	DateTime   string    `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	BidPrice   []float64 `protobuf:"fixed64,3,rep,packed,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`
	BidVolume  []int64   `protobuf:"varint,4,rep,packed,name=bid_volume,json=bidVolume,proto3" json:"bid_volume,omitempty"`
	DiffBidVol []int64   `protobuf:"varint,5,rep,packed,name=diff_bid_vol,json=diffBidVol,proto3" json:"diff_bid_vol,omitempty"`
	AskPrice   []float64 `protobuf:"fixed64,6,rep,packed,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`
	AskVolume  []int64   `protobuf:"varint,7,rep,packed,name=ask_volume,json=askVolume,proto3" json:"ask_volume,omitempty"`
	DiffAskVol []int64   `protobuf:"varint,8,rep,packed,name=diff_ask_vol,json=diffAskVol,proto3" json:"diff_ask_vol,omitempty"`
	Suspend    bool      `protobuf:"varint,9,opt,name=suspend,proto3" json:"suspend,omitempty"`
	Simtrade   bool      `protobuf:"varint,10,opt,name=simtrade,proto3" json:"simtrade,omitempty"`
}

func (x *StockRealTimeBidAskMessage) Reset() {
	*x = StockRealTimeBidAskMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockRealTimeBidAskMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockRealTimeBidAskMessage) ProtoMessage() {}

func (x *StockRealTimeBidAskMessage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockRealTimeBidAskMessage.ProtoReflect.Descriptor instead.
func (*StockRealTimeBidAskMessage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *StockRealTimeBidAskMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StockRealTimeBidAskMessage) GetDateTime() string {
	if x != nil {
		return x.DateTime
	}
	return ""
}

func (x *StockRealTimeBidAskMessage) GetBidPrice() []float64 {
	if x != nil {
		return x.BidPrice
	}
	return nil
}

func (x *StockRealTimeBidAskMessage) GetBidVolume() []int64 {
	if x != nil {
		return x.BidVolume
	}
	return nil
}

func (x *StockRealTimeBidAskMessage) GetDiffBidVol() []int64 {
	if x != nil {
		return x.DiffBidVol
	}
	return nil
}

func (x *StockRealTimeBidAskMessage) GetAskPrice() []float64 {
	if x != nil {
		return x.AskPrice
	}
	return nil
}

func (x *StockRealTimeBidAskMessage) GetAskVolume() []int64 {
	if x != nil {
		return x.AskVolume
	}
	return nil
}

func (x *StockRealTimeBidAskMessage) GetDiffAskVol() []int64 {
	if x != nil {
		return x.DiffAskVol
	}
	return nil
}

func (x *StockRealTimeBidAskMessage) GetSuspend() bool {
	if x != nil {
		return x.Suspend
	}
	return false
}

func (x *StockRealTimeBidAskMessage) GetSimtrade() bool {
	if x != nil {
		return x.Simtrade
	}
	return false
}

type FutureRealTimeTickMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code            string  `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	DateTime        string  `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	Open            float64 `protobuf:"fixed64,3,opt,name=open,proto3" json:"open,omitempty"`
	UnderlyingPrice float64 `protobuf:"fixed64,4,opt,name=underlying_price,json=underlyingPrice,proto3" json:"underlying_price,omitempty"`
	BidSideTotalVol int64   `protobuf:"varint,5,opt,name=bid_side_total_vol,json=bidSideTotalVol,proto3" json:"bid_side_total_vol,omitempty"`
	AskSideTotalVol int64   `protobuf:"varint,6,opt,name=ask_side_total_vol,json=askSideTotalVol,proto3" json:"ask_side_total_vol,omitempty"`
	AvgPrice        float64 `protobuf:"fixed64,7,opt,name=avg_price,json=avgPrice,proto3" json:"avg_price,omitempty"`
	Close           float64 `protobuf:"fixed64,8,opt,name=close,proto3" json:"close,omitempty"`
	High            float64 `protobuf:"fixed64,9,opt,name=high,proto3" json:"high,omitempty"`
	Low             float64 `protobuf:"fixed64,10,opt,name=low,proto3" json:"low,omitempty"`
	Amount          float64 `protobuf:"fixed64,11,opt,name=amount,proto3" json:"amount,omitempty"`
	TotalAmount     float64 `protobuf:"fixed64,12,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	Volume          int64   `protobuf:"varint,13,opt,name=volume,proto3" json:"volume,omitempty"`
	TotalVolume     int64   `protobuf:"varint,14,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`
	TickType        int64   `protobuf:"varint,15,opt,name=tick_type,json=tickType,proto3" json:"tick_type,omitempty"`
	ChgType         int64   `protobuf:"varint,16,opt,name=chg_type,json=chgType,proto3" json:"chg_type,omitempty"`
	PriceChg        float64 `protobuf:"fixed64,17,opt,name=price_chg,json=priceChg,proto3" json:"price_chg,omitempty"`
	PctChg          float64 `protobuf:"fixed64,18,opt,name=pct_chg,json=pctChg,proto3" json:"pct_chg,omitempty"`
	Simtrade        bool    `protobuf:"varint,19,opt,name=simtrade,proto3" json:"simtrade,omitempty"`
}

func (x *FutureRealTimeTickMessage) Reset() {
	*x = FutureRealTimeTickMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FutureRealTimeTickMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureRealTimeTickMessage) ProtoMessage() {}

func (x *FutureRealTimeTickMessage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureRealTimeTickMessage.ProtoReflect.Descriptor instead.
func (*FutureRealTimeTickMessage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *FutureRealTimeTickMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *FutureRealTimeTickMessage) GetDateTime() string {
	if x != nil {
		return x.DateTime
	}
	return ""
}

func (x *FutureRealTimeTickMessage) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *FutureRealTimeTickMessage) GetUnderlyingPrice() float64 {
	if x != nil {
		return x.UnderlyingPrice
	}
	return 0
}

func (x *FutureRealTimeTickMessage) GetBidSideTotalVol() int64 {
	if x != nil {
		return x.BidSideTotalVol
	}
	return 0
}

func (x *FutureRealTimeTickMessage) GetAskSideTotalVol() int64 {
	if x != nil {
		return x.AskSideTotalVol
	}
	return 0
}

func (x *FutureRealTimeTickMessage) GetAvgPrice() float64 {
	if x != nil {
		return x.AvgPrice
	}
	return 0
}

func (x *FutureRealTimeTickMessage) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *FutureRealTimeTickMessage) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *FutureRealTimeTickMessage) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *FutureRealTimeTickMessage) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *FutureRealTimeTickMessage) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *FutureRealTimeTickMessage) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *FutureRealTimeTickMessage) GetTotalVolume() int64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *FutureRealTimeTickMessage) GetTickType() int64 {
	if x != nil {
		return x.TickType
	}
	return 0
}

func (x *FutureRealTimeTickMessage) GetChgType() int64 {
	if x != nil {
		return x.ChgType
	}
	return 0
}

func (x *FutureRealTimeTickMessage) GetPriceChg() float64 {
	if x != nil {
		return x.PriceChg
	}
	return 0
}

func (x *FutureRealTimeTickMessage) GetPctChg() float64 {
	if x != nil {
		return x.PctChg
	}
	return 0
}

func (x *FutureRealTimeTickMessage) GetSimtrade() bool {
	if x != nil {
		return x.Simtrade
	}
	return false
}

type FutureRealTimeBidAskMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code                 string    `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	DateTime             string    `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	BidTotalVol          int64     `protobuf:"varint,3,opt,name=bid_total_vol,json=bidTotalVol,proto3" json:"bid_total_vol,omitempty"`
	AskTotalVol          int64     `protobuf:"varint,4,opt,name=ask_total_vol,json=askTotalVol,proto3" json:"ask_total_vol,omitempty"`
	BidPrice             []float64 `protobuf:"fixed64,5,rep,packed,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`
	BidVolume            []int64   `protobuf:"varint,6,rep,packed,name=bid_volume,json=bidVolume,proto3" json:"bid_volume,omitempty"`
	DiffBidVol           []int64   `protobuf:"varint,7,rep,packed,name=diff_bid_vol,json=diffBidVol,proto3" json:"diff_bid_vol,omitempty"`
	AskPrice             []float64 `protobuf:"fixed64,8,rep,packed,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`
	AskVolume            []int64   `protobuf:"varint,9,rep,packed,name=ask_volume,json=askVolume,proto3" json:"ask_volume,omitempty"`
	DiffAskVol           []int64   `protobuf:"varint,10,rep,packed,name=diff_ask_vol,json=diffAskVol,proto3" json:"diff_ask_vol,omitempty"`
	FirstDerivedBidPrice float64   `protobuf:"fixed64,11,opt,name=first_derived_bid_price,json=firstDerivedBidPrice,proto3" json:"first_derived_bid_price,omitempty"`
	FirstDerivedAskPrice float64   `protobuf:"fixed64,12,opt,name=first_derived_ask_price,json=firstDerivedAskPrice,proto3" json:"first_derived_ask_price,omitempty"`
	FirstDerivedBidVol   int64     `protobuf:"varint,13,opt,name=first_derived_bid_vol,json=firstDerivedBidVol,proto3" json:"first_derived_bid_vol,omitempty"`
	FirstDerivedAskVol   int64     `protobuf:"varint,14,opt,name=first_derived_ask_vol,json=firstDerivedAskVol,proto3" json:"first_derived_ask_vol,omitempty"`
	UnderlyingPrice      float64   `protobuf:"fixed64,15,opt,name=underlying_price,json=underlyingPrice,proto3" json:"underlying_price,omitempty"`
	Simtrade             bool      `protobuf:"varint,16,opt,name=simtrade,proto3" json:"simtrade,omitempty"`
}

func (x *FutureRealTimeBidAskMessage) Reset() {
	*x = FutureRealTimeBidAskMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FutureRealTimeBidAskMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureRealTimeBidAskMessage) ProtoMessage() {}

func (x *FutureRealTimeBidAskMessage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureRealTimeBidAskMessage.ProtoReflect.Descriptor instead.
func (*FutureRealTimeBidAskMessage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (x *FutureRealTimeBidAskMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *FutureRealTimeBidAskMessage) GetDateTime() string {
	if x != nil {
		return x.DateTime
	}
	return ""
}

func (x *FutureRealTimeBidAskMessage) GetBidTotalVol() int64 {
	if x != nil {
		return x.BidTotalVol
	}
	return 0
}

func (x *FutureRealTimeBidAskMessage) GetAskTotalVol() int64 {
	if x != nil {
		return x.AskTotalVol
	}
	return 0
}

func (x *FutureRealTimeBidAskMessage) GetBidPrice() []float64 {
	if x != nil {
		return x.BidPrice
	}
	return nil
}

func (x *FutureRealTimeBidAskMessage) GetBidVolume() []int64 {
	if x != nil {
		return x.BidVolume
	}
	return nil
}

func (x *FutureRealTimeBidAskMessage) GetDiffBidVol() []int64 {
	if x != nil {
		return x.DiffBidVol
	}
	return nil
}

func (x *FutureRealTimeBidAskMessage) GetAskPrice() []float64 {
	if x != nil {
		return x.AskPrice
	}
	return nil
}

func (x *FutureRealTimeBidAskMessage) GetAskVolume() []int64 {
	if x != nil {
		return x.AskVolume
	}
	return nil
}

func (x *FutureRealTimeBidAskMessage) GetDiffAskVol() []int64 {
	if x != nil {
		return x.DiffAskVol
	}
	return nil
}

func (x *FutureRealTimeBidAskMessage) GetFirstDerivedBidPrice() float64 {
	if x != nil {
		return x.FirstDerivedBidPrice
	}
	return 0
}

func (x *FutureRealTimeBidAskMessage) GetFirstDerivedAskPrice() float64 {
	if x != nil {
		return x.FirstDerivedAskPrice
	}
	return 0
}

func (x *FutureRealTimeBidAskMessage) GetFirstDerivedBidVol() int64 {
	if x != nil {
		return x.FirstDerivedBidVol
	}
	return 0
}

func (x *FutureRealTimeBidAskMessage) GetFirstDerivedAskVol() int64 {
	if x != nil {
		return x.FirstDerivedAskVol
	}
	return 0
}

func (x *FutureRealTimeBidAskMessage) GetUnderlyingPrice() float64 {
	if x != nil {
		return x.UnderlyingPrice
	}
	return 0
}

func (x *FutureRealTimeBidAskMessage) GetSimtrade() bool {
	if x != nil {
		return x.Simtrade
	}
	return false
}

type ErrorMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *ErrorMessage) Reset() {
	*x = ErrorMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorMessage) ProtoMessage() {}

func (x *ErrorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorMessage.ProtoReflect.Descriptor instead.
func (*ErrorMessage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

func (x *ErrorMessage) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type Date struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *Date) Reset() {
	*x = Date{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

func (x *Date) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type StockNumArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockNumArr []string `protobuf:"bytes,1,rep,name=stock_num_arr,json=stockNumArr,proto3" json:"stock_num_arr,omitempty"`
}

func (x *StockNumArr) Reset() {
	*x = StockNumArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockNumArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockNumArr) ProtoMessage() {}

func (x *StockNumArr) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockNumArr.ProtoReflect.Descriptor instead.
func (*StockNumArr) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

func (x *StockNumArr) GetStockNumArr() []string {
	if x != nil {
		return x.StockNumArr
	}
	return nil
}

type StockNumArrWithDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockNumArr []string `protobuf:"bytes,1,rep,name=stock_num_arr,json=stockNumArr,proto3" json:"stock_num_arr,omitempty"`
	Date        string   `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *StockNumArrWithDate) Reset() {
	*x = StockNumArrWithDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockNumArrWithDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockNumArrWithDate) ProtoMessage() {}

func (x *StockNumArrWithDate) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockNumArrWithDate.ProtoReflect.Descriptor instead.
func (*StockNumArrWithDate) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

func (x *StockNumArrWithDate) GetStockNumArr() []string {
	if x != nil {
		return x.StockNumArr
	}
	return nil
}

func (x *StockNumArrWithDate) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type StockNumArrWithDateArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockNumArr []string `protobuf:"bytes,1,rep,name=stock_num_arr,json=stockNumArr,proto3" json:"stock_num_arr,omitempty"`
	DateArr     []string `protobuf:"bytes,2,rep,name=date_arr,json=dateArr,proto3" json:"date_arr,omitempty"`
}

func (x *StockNumArrWithDateArr) Reset() {
	*x = StockNumArrWithDateArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockNumArrWithDateArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockNumArrWithDateArr) ProtoMessage() {}

func (x *StockNumArrWithDateArr) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockNumArrWithDateArr.ProtoReflect.Descriptor instead.
func (*StockNumArrWithDateArr) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

func (x *StockNumArrWithDateArr) GetStockNumArr() []string {
	if x != nil {
		return x.StockNumArr
	}
	return nil
}

func (x *StockNumArrWithDateArr) GetDateArr() []string {
	if x != nil {
		return x.DateArr
	}
	return nil
}

type FutureCodeArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FutureCodeArr []string `protobuf:"bytes,1,rep,name=future_code_arr,json=futureCodeArr,proto3" json:"future_code_arr,omitempty"`
}

func (x *FutureCodeArr) Reset() {
	*x = FutureCodeArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FutureCodeArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureCodeArr) ProtoMessage() {}

func (x *FutureCodeArr) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureCodeArr.ProtoReflect.Descriptor instead.
func (*FutureCodeArr) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

func (x *FutureCodeArr) GetFutureCodeArr() []string {
	if x != nil {
		return x.FutureCodeArr
	}
	return nil
}

type FutureCodeArrWithDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FutureCodeArr []string `protobuf:"bytes,1,rep,name=future_code_arr,json=futureCodeArr,proto3" json:"future_code_arr,omitempty"`
	Date          string   `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *FutureCodeArrWithDate) Reset() {
	*x = FutureCodeArrWithDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FutureCodeArrWithDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureCodeArrWithDate) ProtoMessage() {}

func (x *FutureCodeArrWithDate) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureCodeArrWithDate.ProtoReflect.Descriptor instead.
func (*FutureCodeArrWithDate) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

func (x *FutureCodeArrWithDate) GetFutureCodeArr() []string {
	if x != nil {
		return x.FutureCodeArr
	}
	return nil
}

func (x *FutureCodeArrWithDate) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x73, 0x69, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x72, 0x22, 0x93, 0x01, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x86, 0x05, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x67,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x76,
	0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x69, 0x67, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c,
	0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x68, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x67, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x67, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x70, 0x63, 0x74, 0x43, 0x68, 0x67, 0x12, 0x2b, 0x0a, 0x12, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x69,
	0x64, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x62, 0x69, 0x64, 0x53, 0x69, 0x64, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x56, 0x6f, 0x6c, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x64, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c,
	0x12, 0x2b, 0x0a, 0x12, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x62, 0x69,
	0x64, 0x53, 0x69, 0x64, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x12, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x73, 0x6b, 0x53, 0x69,
	0x64, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x6d, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x69, 0x6d, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x22, 0xbf, 0x02, 0x0a, 0x1a, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x08, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x09, 0x62, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x64, 0x69, 0x66, 0x66, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x73, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x09, 0x61, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x69,
	0x66, 0x66, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x6d, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x69, 0x6d, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x22, 0xbe, 0x04, 0x0a, 0x19, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x2b, 0x0a, 0x12, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x62, 0x69,
	0x64, 0x53, 0x69, 0x64, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x12, 0x2b, 0x0a,
	0x12, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x76, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x73, 0x6b, 0x53, 0x69,
	0x64, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76,
	0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61,
	0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x6c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63,
	0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x68, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x67, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x67, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x70, 0x63, 0x74, 0x43, 0x68, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x6d, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x69, 0x6d, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x22, 0xed, 0x04, 0x0a, 0x1b, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x69, 0x64,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x73, 0x6b, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x01, 0x52,
	0x08, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x64,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x62,
	0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x69, 0x66, 0x66,
	0x5f, 0x62, 0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a,
	0x64, 0x69, 0x66, 0x66, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73,
	0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x61,
	0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x6b, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x61, 0x73, 0x6b,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x61,
	0x73, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x69,
	0x66, 0x66, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x35, 0x0a, 0x17, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64,
	0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x41, 0x73,
	0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x65, 0x72, 0x69,
	0x76, 0x65, 0x64, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x76,
	0x6f, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44,
	0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x12, 0x29, 0x0a, 0x10,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x6d, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x69, 0x6d, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x22, 0x20, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x1a, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x22, 0x31, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x41, 0x72, 0x72,
	0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x72,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x41, 0x72, 0x72, 0x22, 0x4d, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x41, 0x72, 0x72, 0x57, 0x69, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x41, 0x72, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x22, 0x57, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x41,
	0x72, 0x72, 0x57, 0x69, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x41, 0x72, 0x72, 0x12, 0x22, 0x0a,
	0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x41, 0x72,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x72, 0x22, 0x37, 0x0a, 0x0d,
	0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x72, 0x12, 0x26, 0x0a,
	0x0f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x41, 0x72, 0x72, 0x22, 0x53, 0x0a, 0x15, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x41, 0x72, 0x72, 0x57, 0x69, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x72,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x41, 0x72, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_common_proto_goTypes = []interface{}{
	(*EventMessage)(nil),                // 0: sinopac_forwarder.EventMessage
	(*StockRealTimeTickMessage)(nil),    // 1: sinopac_forwarder.StockRealTimeTickMessage
	(*StockRealTimeBidAskMessage)(nil),  // 2: sinopac_forwarder.StockRealTimeBidAskMessage
	(*FutureRealTimeTickMessage)(nil),   // 3: sinopac_forwarder.FutureRealTimeTickMessage
	(*FutureRealTimeBidAskMessage)(nil), // 4: sinopac_forwarder.FutureRealTimeBidAskMessage
	(*ErrorMessage)(nil),                // 5: sinopac_forwarder.ErrorMessage
	(*Date)(nil),                        // 6: sinopac_forwarder.Date
	(*StockNumArr)(nil),                 // 7: sinopac_forwarder.StockNumArr
	(*StockNumArrWithDate)(nil),         // 8: sinopac_forwarder.StockNumArrWithDate
	(*StockNumArrWithDateArr)(nil),      // 9: sinopac_forwarder.StockNumArrWithDateArr
	(*FutureCodeArr)(nil),               // 10: sinopac_forwarder.FutureCodeArr
	(*FutureCodeArrWithDate)(nil),       // 11: sinopac_forwarder.FutureCodeArrWithDate
}
var file_common_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockRealTimeTickMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockRealTimeBidAskMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FutureRealTimeTickMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FutureRealTimeBidAskMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Date); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockNumArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockNumArrWithDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockNumArrWithDateArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FutureCodeArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FutureCodeArrWithDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
