// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: health.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HealthCheckInterfaceClient is the client API for HealthCheckInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthCheckInterfaceClient interface {
	Heartbeat(ctx context.Context, opts ...grpc.CallOption) (HealthCheckInterface_HeartbeatClient, error)
	Terminate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type healthCheckInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthCheckInterfaceClient(cc grpc.ClientConnInterface) HealthCheckInterfaceClient {
	return &healthCheckInterfaceClient{cc}
}

func (c *healthCheckInterfaceClient) Heartbeat(ctx context.Context, opts ...grpc.CallOption) (HealthCheckInterface_HeartbeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &HealthCheckInterface_ServiceDesc.Streams[0], "/sinopac_forwarder.HealthCheckInterface/Heartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &healthCheckInterfaceHeartbeatClient{stream}
	return x, nil
}

type HealthCheckInterface_HeartbeatClient interface {
	Send(*BeatMessage) error
	Recv() (*BeatMessage, error)
	grpc.ClientStream
}

type healthCheckInterfaceHeartbeatClient struct {
	grpc.ClientStream
}

func (x *healthCheckInterfaceHeartbeatClient) Send(m *BeatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *healthCheckInterfaceHeartbeatClient) Recv() (*BeatMessage, error) {
	m := new(BeatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *healthCheckInterfaceClient) Terminate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/sinopac_forwarder.HealthCheckInterface/Terminate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthCheckInterfaceServer is the server API for HealthCheckInterface service.
// All implementations must embed UnimplementedHealthCheckInterfaceServer
// for forward compatibility
type HealthCheckInterfaceServer interface {
	Heartbeat(HealthCheckInterface_HeartbeatServer) error
	Terminate(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedHealthCheckInterfaceServer()
}

// UnimplementedHealthCheckInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedHealthCheckInterfaceServer struct {
}

func (UnimplementedHealthCheckInterfaceServer) Heartbeat(HealthCheckInterface_HeartbeatServer) error {
	return status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedHealthCheckInterfaceServer) Terminate(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Terminate not implemented")
}
func (UnimplementedHealthCheckInterfaceServer) mustEmbedUnimplementedHealthCheckInterfaceServer() {}

// UnsafeHealthCheckInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthCheckInterfaceServer will
// result in compilation errors.
type UnsafeHealthCheckInterfaceServer interface {
	mustEmbedUnimplementedHealthCheckInterfaceServer()
}

func RegisterHealthCheckInterfaceServer(s grpc.ServiceRegistrar, srv HealthCheckInterfaceServer) {
	s.RegisterService(&HealthCheckInterface_ServiceDesc, srv)
}

func _HealthCheckInterface_Heartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HealthCheckInterfaceServer).Heartbeat(&healthCheckInterfaceHeartbeatServer{stream})
}

type HealthCheckInterface_HeartbeatServer interface {
	Send(*BeatMessage) error
	Recv() (*BeatMessage, error)
	grpc.ServerStream
}

type healthCheckInterfaceHeartbeatServer struct {
	grpc.ServerStream
}

func (x *healthCheckInterfaceHeartbeatServer) Send(m *BeatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *healthCheckInterfaceHeartbeatServer) Recv() (*BeatMessage, error) {
	m := new(BeatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HealthCheckInterface_Terminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckInterfaceServer).Terminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sinopac_forwarder.HealthCheckInterface/Terminate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckInterfaceServer).Terminate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthCheckInterface_ServiceDesc is the grpc.ServiceDesc for HealthCheckInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthCheckInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sinopac_forwarder.HealthCheckInterface",
	HandlerType: (*HealthCheckInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Terminate",
			Handler:    _HealthCheckInterface_Terminate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Heartbeat",
			Handler:       _HealthCheckInterface_Heartbeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "health.proto",
}
