// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package trade_test is a generated GoMock package.
package trade_test

import (
	context "context"
	reflect "reflect"
	time "time"
	entity "tmt/internal/entity"
	trade "tmt/internal/usecase/case/trade"
	pb "tmt/pb"
	eventbus "tmt/pkg/eventbus"
	log "tmt/pkg/log"

	gomock "github.com/golang/mock/gomock"
)

// MockTrade is a mock of Trade interface.
type MockTrade struct {
	ctrl     *gomock.Controller
	recorder *MockTradeMockRecorder
}

// MockTradeMockRecorder is the mock recorder for MockTrade.
type MockTradeMockRecorder struct {
	mock *MockTrade
}

// NewMockTrade creates a new mock instance.
func NewMockTrade(ctrl *gomock.Controller) *MockTrade {
	mock := &MockTrade{ctrl: ctrl}
	mock.recorder = &MockTradeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrade) EXPECT() *MockTradeMockRecorder {
	return m.recorder
}

// BuyFuture mocks base method.
func (m *MockTrade) BuyFuture(order *entity.FutureOrder) (string, entity.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyFuture", order)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(entity.OrderStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BuyFuture indicates an expected call of BuyFuture.
func (mr *MockTradeMockRecorder) BuyFuture(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyFuture", reflect.TypeOf((*MockTrade)(nil).BuyFuture), order)
}

// CalculateBuyCost mocks base method.
func (m *MockTrade) CalculateBuyCost(price float64, quantity int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateBuyCost", price, quantity)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CalculateBuyCost indicates an expected call of CalculateBuyCost.
func (mr *MockTradeMockRecorder) CalculateBuyCost(price, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateBuyCost", reflect.TypeOf((*MockTrade)(nil).CalculateBuyCost), price, quantity)
}

// CalculateSellCost mocks base method.
func (m *MockTrade) CalculateSellCost(price float64, quantity int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateSellCost", price, quantity)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CalculateSellCost indicates an expected call of CalculateSellCost.
func (mr *MockTradeMockRecorder) CalculateSellCost(price, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateSellCost", reflect.TypeOf((*MockTrade)(nil).CalculateSellCost), price, quantity)
}

// CalculateTradeDiscount mocks base method.
func (m *MockTrade) CalculateTradeDiscount(price float64, quantity int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateTradeDiscount", price, quantity)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CalculateTradeDiscount indicates an expected call of CalculateTradeDiscount.
func (mr *MockTradeMockRecorder) CalculateTradeDiscount(price, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateTradeDiscount", reflect.TypeOf((*MockTrade)(nil).CalculateTradeDiscount), price, quantity)
}

// CancelFutureOrderByID mocks base method.
func (m *MockTrade) CancelFutureOrderByID(orderID string) (string, entity.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelFutureOrderByID", orderID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(entity.OrderStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CancelFutureOrderByID indicates an expected call of CancelFutureOrderByID.
func (mr *MockTradeMockRecorder) CancelFutureOrderByID(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelFutureOrderByID", reflect.TypeOf((*MockTrade)(nil).CancelFutureOrderByID), orderID)
}

// GetAccountBalance mocks base method.
func (m *MockTrade) GetAccountBalance(ctx context.Context) ([]*entity.AccountBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBalance", ctx)
	ret0, _ := ret[0].([]*entity.AccountBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBalance indicates an expected call of GetAccountBalance.
func (mr *MockTradeMockRecorder) GetAccountBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBalance", reflect.TypeOf((*MockTrade)(nil).GetAccountBalance), ctx)
}

// GetAllFutureOrder mocks base method.
func (m *MockTrade) GetAllFutureOrder(ctx context.Context) ([]*entity.FutureOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFutureOrder", ctx)
	ret0, _ := ret[0].([]*entity.FutureOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFutureOrder indicates an expected call of GetAllFutureOrder.
func (mr *MockTradeMockRecorder) GetAllFutureOrder(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFutureOrder", reflect.TypeOf((*MockTrade)(nil).GetAllFutureOrder), ctx)
}

// GetAllFutureTradeBalance mocks base method.
func (m *MockTrade) GetAllFutureTradeBalance(ctx context.Context) ([]*entity.FutureTradeBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFutureTradeBalance", ctx)
	ret0, _ := ret[0].([]*entity.FutureTradeBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFutureTradeBalance indicates an expected call of GetAllFutureTradeBalance.
func (mr *MockTradeMockRecorder) GetAllFutureTradeBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFutureTradeBalance", reflect.TypeOf((*MockTrade)(nil).GetAllFutureTradeBalance), ctx)
}

// GetAllStockOrder mocks base method.
func (m *MockTrade) GetAllStockOrder(ctx context.Context) ([]*entity.StockOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStockOrder", ctx)
	ret0, _ := ret[0].([]*entity.StockOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStockOrder indicates an expected call of GetAllStockOrder.
func (mr *MockTradeMockRecorder) GetAllStockOrder(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStockOrder", reflect.TypeOf((*MockTrade)(nil).GetAllStockOrder), ctx)
}

// GetAllStockTradeBalance mocks base method.
func (m *MockTrade) GetAllStockTradeBalance(ctx context.Context) ([]*entity.StockTradeBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStockTradeBalance", ctx)
	ret0, _ := ret[0].([]*entity.StockTradeBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStockTradeBalance indicates an expected call of GetAllStockTradeBalance.
func (mr *MockTradeMockRecorder) GetAllStockTradeBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStockTradeBalance", reflect.TypeOf((*MockTrade)(nil).GetAllStockTradeBalance), ctx)
}

// GetFutureOrderByTradeDay mocks base method.
func (m *MockTrade) GetFutureOrderByTradeDay(ctx context.Context, tradeDay string) ([]*entity.FutureOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFutureOrderByTradeDay", ctx, tradeDay)
	ret0, _ := ret[0].([]*entity.FutureOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFutureOrderByTradeDay indicates an expected call of GetFutureOrderByTradeDay.
func (mr *MockTradeMockRecorder) GetFutureOrderByTradeDay(ctx, tradeDay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFutureOrderByTradeDay", reflect.TypeOf((*MockTrade)(nil).GetFutureOrderByTradeDay), ctx, tradeDay)
}

// GetFuturePosition mocks base method.
func (m *MockTrade) GetFuturePosition() ([]*entity.FuturePosition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFuturePosition")
	ret0, _ := ret[0].([]*entity.FuturePosition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFuturePosition indicates an expected call of GetFuturePosition.
func (mr *MockTradeMockRecorder) GetFuturePosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFuturePosition", reflect.TypeOf((*MockTrade)(nil).GetFuturePosition))
}

// GetLastFutureTradeBalance mocks base method.
func (m *MockTrade) GetLastFutureTradeBalance(ctx context.Context) (*entity.FutureTradeBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastFutureTradeBalance", ctx)
	ret0, _ := ret[0].(*entity.FutureTradeBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastFutureTradeBalance indicates an expected call of GetLastFutureTradeBalance.
func (mr *MockTradeMockRecorder) GetLastFutureTradeBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastFutureTradeBalance", reflect.TypeOf((*MockTrade)(nil).GetLastFutureTradeBalance), ctx)
}

// GetLastStockTradeBalance mocks base method.
func (m *MockTrade) GetLastStockTradeBalance(ctx context.Context) (*entity.StockTradeBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastStockTradeBalance", ctx)
	ret0, _ := ret[0].(*entity.StockTradeBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastStockTradeBalance indicates an expected call of GetLastStockTradeBalance.
func (mr *MockTradeMockRecorder) GetLastStockTradeBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastStockTradeBalance", reflect.TypeOf((*MockTrade)(nil).GetLastStockTradeBalance), ctx)
}

// Init mocks base method.
func (m *MockTrade) Init(logger *log.Log, bus *eventbus.Bus) trade.Trade {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", logger, bus)
	ret0, _ := ret[0].(trade.Trade)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockTradeMockRecorder) Init(logger, bus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockTrade)(nil).Init), logger, bus)
}

// IsFutureTradeTime mocks base method.
func (m *MockTrade) IsFutureTradeTime() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFutureTradeTime")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFutureTradeTime indicates an expected call of IsFutureTradeTime.
func (mr *MockTradeMockRecorder) IsFutureTradeTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFutureTradeTime", reflect.TypeOf((*MockTrade)(nil).IsFutureTradeTime))
}

// ManualInsertFutureOrder mocks base method.
func (m *MockTrade) ManualInsertFutureOrder(ctx context.Context, order *entity.FutureOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManualInsertFutureOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// ManualInsertFutureOrder indicates an expected call of ManualInsertFutureOrder.
func (mr *MockTradeMockRecorder) ManualInsertFutureOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManualInsertFutureOrder", reflect.TypeOf((*MockTrade)(nil).ManualInsertFutureOrder), ctx, order)
}

// MoveFutureOrderToLatestTradeDay mocks base method.
func (m *MockTrade) MoveFutureOrderToLatestTradeDay(ctx context.Context, orderID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveFutureOrderToLatestTradeDay", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveFutureOrderToLatestTradeDay indicates an expected call of MoveFutureOrderToLatestTradeDay.
func (mr *MockTradeMockRecorder) MoveFutureOrderToLatestTradeDay(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveFutureOrderToLatestTradeDay", reflect.TypeOf((*MockTrade)(nil).MoveFutureOrderToLatestTradeDay), ctx, orderID)
}

// MoveStockOrderToLatestTradeDay mocks base method.
func (m *MockTrade) MoveStockOrderToLatestTradeDay(ctx context.Context, orderID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveStockOrderToLatestTradeDay", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveStockOrderToLatestTradeDay indicates an expected call of MoveStockOrderToLatestTradeDay.
func (mr *MockTradeMockRecorder) MoveStockOrderToLatestTradeDay(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveStockOrderToLatestTradeDay", reflect.TypeOf((*MockTrade)(nil).MoveStockOrderToLatestTradeDay), ctx, orderID)
}

// SellFuture mocks base method.
func (m *MockTrade) SellFuture(order *entity.FutureOrder) (string, entity.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SellFuture", order)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(entity.OrderStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SellFuture indicates an expected call of SellFuture.
func (mr *MockTradeMockRecorder) SellFuture(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SellFuture", reflect.TypeOf((*MockTrade)(nil).SellFuture), order)
}

// UpdateTradeBalanceByTradeDay mocks base method.
func (m *MockTrade) UpdateTradeBalanceByTradeDay(ctx context.Context, date string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTradeBalanceByTradeDay", ctx, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTradeBalanceByTradeDay indicates an expected call of UpdateTradeBalanceByTradeDay.
func (mr *MockTradeMockRecorder) UpdateTradeBalanceByTradeDay(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTradeBalanceByTradeDay", reflect.TypeOf((*MockTrade)(nil).UpdateTradeBalanceByTradeDay), ctx, date)
}

// MockTradeRepo is a mock of TradeRepo interface.
type MockTradeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTradeRepoMockRecorder
}

// MockTradeRepoMockRecorder is the mock recorder for MockTradeRepo.
type MockTradeRepoMockRecorder struct {
	mock *MockTradeRepo
}

// NewMockTradeRepo creates a new mock instance.
func NewMockTradeRepo(ctrl *gomock.Controller) *MockTradeRepo {
	mock := &MockTradeRepo{ctrl: ctrl}
	mock.recorder = &MockTradeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTradeRepo) EXPECT() *MockTradeRepoMockRecorder {
	return m.recorder
}

// DeleteInventoryStockByDate mocks base method.
func (m *MockTradeRepo) DeleteInventoryStockByDate(ctx context.Context, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInventoryStockByDate", ctx, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInventoryStockByDate indicates an expected call of DeleteInventoryStockByDate.
func (mr *MockTradeRepoMockRecorder) DeleteInventoryStockByDate(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInventoryStockByDate", reflect.TypeOf((*MockTradeRepo)(nil).DeleteInventoryStockByDate), ctx, date)
}

// InsertInventoryStock mocks base method.
func (m *MockTradeRepo) InsertInventoryStock(ctx context.Context, t []*entity.InventoryStock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertInventoryStock", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertInventoryStock indicates an expected call of InsertInventoryStock.
func (mr *MockTradeRepoMockRecorder) InsertInventoryStock(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertInventoryStock", reflect.TypeOf((*MockTradeRepo)(nil).InsertInventoryStock), ctx, t)
}

// InsertOrUpdateAccountBalance mocks base method.
func (m *MockTradeRepo) InsertOrUpdateAccountBalance(ctx context.Context, t *entity.AccountBalance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateAccountBalance", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateAccountBalance indicates an expected call of InsertOrUpdateAccountBalance.
func (mr *MockTradeRepoMockRecorder) InsertOrUpdateAccountBalance(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateAccountBalance", reflect.TypeOf((*MockTradeRepo)(nil).InsertOrUpdateAccountBalance), ctx, t)
}

// InsertOrUpdateAccountSettlement mocks base method.
func (m *MockTradeRepo) InsertOrUpdateAccountSettlement(ctx context.Context, t *entity.Settlement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateAccountSettlement", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateAccountSettlement indicates an expected call of InsertOrUpdateAccountSettlement.
func (mr *MockTradeRepoMockRecorder) InsertOrUpdateAccountSettlement(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateAccountSettlement", reflect.TypeOf((*MockTradeRepo)(nil).InsertOrUpdateAccountSettlement), ctx, t)
}

// InsertOrUpdateFutureOrderByOrderID mocks base method.
func (m *MockTradeRepo) InsertOrUpdateFutureOrderByOrderID(ctx context.Context, t *entity.FutureOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateFutureOrderByOrderID", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateFutureOrderByOrderID indicates an expected call of InsertOrUpdateFutureOrderByOrderID.
func (mr *MockTradeRepoMockRecorder) InsertOrUpdateFutureOrderByOrderID(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateFutureOrderByOrderID", reflect.TypeOf((*MockTradeRepo)(nil).InsertOrUpdateFutureOrderByOrderID), ctx, t)
}

// InsertOrUpdateFutureTradeBalance mocks base method.
func (m *MockTradeRepo) InsertOrUpdateFutureTradeBalance(ctx context.Context, t *entity.FutureTradeBalance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateFutureTradeBalance", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateFutureTradeBalance indicates an expected call of InsertOrUpdateFutureTradeBalance.
func (mr *MockTradeRepoMockRecorder) InsertOrUpdateFutureTradeBalance(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateFutureTradeBalance", reflect.TypeOf((*MockTradeRepo)(nil).InsertOrUpdateFutureTradeBalance), ctx, t)
}

// InsertOrUpdateOrderByOrderID mocks base method.
func (m *MockTradeRepo) InsertOrUpdateOrderByOrderID(ctx context.Context, t *entity.StockOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateOrderByOrderID", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateOrderByOrderID indicates an expected call of InsertOrUpdateOrderByOrderID.
func (mr *MockTradeRepoMockRecorder) InsertOrUpdateOrderByOrderID(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateOrderByOrderID", reflect.TypeOf((*MockTradeRepo)(nil).InsertOrUpdateOrderByOrderID), ctx, t)
}

// InsertOrUpdateStockTradeBalance mocks base method.
func (m *MockTradeRepo) InsertOrUpdateStockTradeBalance(ctx context.Context, t *entity.StockTradeBalance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateStockTradeBalance", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateStockTradeBalance indicates an expected call of InsertOrUpdateStockTradeBalance.
func (mr *MockTradeRepoMockRecorder) InsertOrUpdateStockTradeBalance(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateStockTradeBalance", reflect.TypeOf((*MockTradeRepo)(nil).InsertOrUpdateStockTradeBalance), ctx, t)
}

// QueryAccountBalanceByDateAndBankID mocks base method.
func (m *MockTradeRepo) QueryAccountBalanceByDateAndBankID(ctx context.Context, date time.Time, bankID int) (*entity.AccountBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAccountBalanceByDateAndBankID", ctx, date, bankID)
	ret0, _ := ret[0].(*entity.AccountBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAccountBalanceByDateAndBankID indicates an expected call of QueryAccountBalanceByDateAndBankID.
func (mr *MockTradeRepoMockRecorder) QueryAccountBalanceByDateAndBankID(ctx, date, bankID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAccountBalanceByDateAndBankID", reflect.TypeOf((*MockTradeRepo)(nil).QueryAccountBalanceByDateAndBankID), ctx, date, bankID)
}

// QueryAccountSettlementByDate mocks base method.
func (m *MockTradeRepo) QueryAccountSettlementByDate(ctx context.Context, date time.Time) (*entity.Settlement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAccountSettlementByDate", ctx, date)
	ret0, _ := ret[0].(*entity.Settlement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAccountSettlementByDate indicates an expected call of QueryAccountSettlementByDate.
func (mr *MockTradeRepoMockRecorder) QueryAccountSettlementByDate(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAccountSettlementByDate", reflect.TypeOf((*MockTradeRepo)(nil).QueryAccountSettlementByDate), ctx, date)
}

// QueryAllFutureOrder mocks base method.
func (m *MockTradeRepo) QueryAllFutureOrder(ctx context.Context) ([]*entity.FutureOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllFutureOrder", ctx)
	ret0, _ := ret[0].([]*entity.FutureOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllFutureOrder indicates an expected call of QueryAllFutureOrder.
func (mr *MockTradeRepoMockRecorder) QueryAllFutureOrder(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllFutureOrder", reflect.TypeOf((*MockTradeRepo)(nil).QueryAllFutureOrder), ctx)
}

// QueryAllFutureOrderByDate mocks base method.
func (m *MockTradeRepo) QueryAllFutureOrderByDate(ctx context.Context, timeTange []time.Time) ([]*entity.FutureOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllFutureOrderByDate", ctx, timeTange)
	ret0, _ := ret[0].([]*entity.FutureOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllFutureOrderByDate indicates an expected call of QueryAllFutureOrderByDate.
func (mr *MockTradeRepoMockRecorder) QueryAllFutureOrderByDate(ctx, timeTange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllFutureOrderByDate", reflect.TypeOf((*MockTradeRepo)(nil).QueryAllFutureOrderByDate), ctx, timeTange)
}

// QueryAllFutureTradeBalance mocks base method.
func (m *MockTradeRepo) QueryAllFutureTradeBalance(ctx context.Context) ([]*entity.FutureTradeBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllFutureTradeBalance", ctx)
	ret0, _ := ret[0].([]*entity.FutureTradeBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllFutureTradeBalance indicates an expected call of QueryAllFutureTradeBalance.
func (mr *MockTradeRepoMockRecorder) QueryAllFutureTradeBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllFutureTradeBalance", reflect.TypeOf((*MockTradeRepo)(nil).QueryAllFutureTradeBalance), ctx)
}

// QueryAllLastAccountBalance mocks base method.
func (m *MockTradeRepo) QueryAllLastAccountBalance(ctx context.Context, bankIDArr []int) ([]*entity.AccountBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllLastAccountBalance", ctx, bankIDArr)
	ret0, _ := ret[0].([]*entity.AccountBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllLastAccountBalance indicates an expected call of QueryAllLastAccountBalance.
func (mr *MockTradeRepoMockRecorder) QueryAllLastAccountBalance(ctx, bankIDArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllLastAccountBalance", reflect.TypeOf((*MockTradeRepo)(nil).QueryAllLastAccountBalance), ctx, bankIDArr)
}

// QueryAllStockOrder mocks base method.
func (m *MockTradeRepo) QueryAllStockOrder(ctx context.Context) ([]*entity.StockOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllStockOrder", ctx)
	ret0, _ := ret[0].([]*entity.StockOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllStockOrder indicates an expected call of QueryAllStockOrder.
func (mr *MockTradeRepoMockRecorder) QueryAllStockOrder(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllStockOrder", reflect.TypeOf((*MockTradeRepo)(nil).QueryAllStockOrder), ctx)
}

// QueryAllStockOrderByDate mocks base method.
func (m *MockTradeRepo) QueryAllStockOrderByDate(ctx context.Context, timeTange []time.Time) ([]*entity.StockOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllStockOrderByDate", ctx, timeTange)
	ret0, _ := ret[0].([]*entity.StockOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllStockOrderByDate indicates an expected call of QueryAllStockOrderByDate.
func (mr *MockTradeRepoMockRecorder) QueryAllStockOrderByDate(ctx, timeTange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllStockOrderByDate", reflect.TypeOf((*MockTradeRepo)(nil).QueryAllStockOrderByDate), ctx, timeTange)
}

// QueryAllStockTradeBalance mocks base method.
func (m *MockTradeRepo) QueryAllStockTradeBalance(ctx context.Context) ([]*entity.StockTradeBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllStockTradeBalance", ctx)
	ret0, _ := ret[0].([]*entity.StockTradeBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllStockTradeBalance indicates an expected call of QueryAllStockTradeBalance.
func (mr *MockTradeRepoMockRecorder) QueryAllStockTradeBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllStockTradeBalance", reflect.TypeOf((*MockTradeRepo)(nil).QueryAllStockTradeBalance), ctx)
}

// QueryFutureOrderByID mocks base method.
func (m *MockTradeRepo) QueryFutureOrderByID(ctx context.Context, orderID string) (*entity.FutureOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFutureOrderByID", ctx, orderID)
	ret0, _ := ret[0].(*entity.FutureOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFutureOrderByID indicates an expected call of QueryFutureOrderByID.
func (mr *MockTradeRepoMockRecorder) QueryFutureOrderByID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFutureOrderByID", reflect.TypeOf((*MockTradeRepo)(nil).QueryFutureOrderByID), ctx, orderID)
}

// QueryFutureTradeBalanceByDate mocks base method.
func (m *MockTradeRepo) QueryFutureTradeBalanceByDate(ctx context.Context, date time.Time) (*entity.FutureTradeBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFutureTradeBalanceByDate", ctx, date)
	ret0, _ := ret[0].(*entity.FutureTradeBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFutureTradeBalanceByDate indicates an expected call of QueryFutureTradeBalanceByDate.
func (mr *MockTradeRepoMockRecorder) QueryFutureTradeBalanceByDate(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFutureTradeBalanceByDate", reflect.TypeOf((*MockTradeRepo)(nil).QueryFutureTradeBalanceByDate), ctx, date)
}

// QueryInventoryStockByDate mocks base method.
func (m *MockTradeRepo) QueryInventoryStockByDate(ctx context.Context, date time.Time) ([]*entity.InventoryStock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryInventoryStockByDate", ctx, date)
	ret0, _ := ret[0].([]*entity.InventoryStock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryInventoryStockByDate indicates an expected call of QueryInventoryStockByDate.
func (mr *MockTradeRepoMockRecorder) QueryInventoryStockByDate(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInventoryStockByDate", reflect.TypeOf((*MockTradeRepo)(nil).QueryInventoryStockByDate), ctx, date)
}

// QueryLastFutureTradeBalance mocks base method.
func (m *MockTradeRepo) QueryLastFutureTradeBalance(ctx context.Context) (*entity.FutureTradeBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLastFutureTradeBalance", ctx)
	ret0, _ := ret[0].(*entity.FutureTradeBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLastFutureTradeBalance indicates an expected call of QueryLastFutureTradeBalance.
func (mr *MockTradeRepoMockRecorder) QueryLastFutureTradeBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLastFutureTradeBalance", reflect.TypeOf((*MockTradeRepo)(nil).QueryLastFutureTradeBalance), ctx)
}

// QueryLastStockTradeBalance mocks base method.
func (m *MockTradeRepo) QueryLastStockTradeBalance(ctx context.Context) (*entity.StockTradeBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLastStockTradeBalance", ctx)
	ret0, _ := ret[0].(*entity.StockTradeBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLastStockTradeBalance indicates an expected call of QueryLastStockTradeBalance.
func (mr *MockTradeRepoMockRecorder) QueryLastStockTradeBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLastStockTradeBalance", reflect.TypeOf((*MockTradeRepo)(nil).QueryLastStockTradeBalance), ctx)
}

// QueryStockOrderByID mocks base method.
func (m *MockTradeRepo) QueryStockOrderByID(ctx context.Context, orderID string) (*entity.StockOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryStockOrderByID", ctx, orderID)
	ret0, _ := ret[0].(*entity.StockOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryStockOrderByID indicates an expected call of QueryStockOrderByID.
func (mr *MockTradeRepoMockRecorder) QueryStockOrderByID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryStockOrderByID", reflect.TypeOf((*MockTradeRepo)(nil).QueryStockOrderByID), ctx, orderID)
}

// QueryStockTradeBalanceByDate mocks base method.
func (m *MockTradeRepo) QueryStockTradeBalanceByDate(ctx context.Context, date time.Time) (*entity.StockTradeBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryStockTradeBalanceByDate", ctx, date)
	ret0, _ := ret[0].(*entity.StockTradeBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryStockTradeBalanceByDate indicates an expected call of QueryStockTradeBalanceByDate.
func (mr *MockTradeRepoMockRecorder) QueryStockTradeBalanceByDate(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryStockTradeBalanceByDate", reflect.TypeOf((*MockTradeRepo)(nil).QueryStockTradeBalanceByDate), ctx, date)
}

// MockTradegRPCAPI is a mock of TradegRPCAPI interface.
type MockTradegRPCAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTradegRPCAPIMockRecorder
}

// MockTradegRPCAPIMockRecorder is the mock recorder for MockTradegRPCAPI.
type MockTradegRPCAPIMockRecorder struct {
	mock *MockTradegRPCAPI
}

// NewMockTradegRPCAPI creates a new mock instance.
func NewMockTradegRPCAPI(ctrl *gomock.Controller) *MockTradegRPCAPI {
	mock := &MockTradegRPCAPI{ctrl: ctrl}
	mock.recorder = &MockTradegRPCAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTradegRPCAPI) EXPECT() *MockTradegRPCAPIMockRecorder {
	return m.recorder
}

// BuyFuture mocks base method.
func (m *MockTradegRPCAPI) BuyFuture(order *entity.FutureOrder) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyFuture", order)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuyFuture indicates an expected call of BuyFuture.
func (mr *MockTradegRPCAPIMockRecorder) BuyFuture(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyFuture", reflect.TypeOf((*MockTradegRPCAPI)(nil).BuyFuture), order)
}

// BuyOddStock mocks base method.
func (m *MockTradegRPCAPI) BuyOddStock(order *entity.StockOrder) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyOddStock", order)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuyOddStock indicates an expected call of BuyOddStock.
func (mr *MockTradegRPCAPIMockRecorder) BuyOddStock(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyOddStock", reflect.TypeOf((*MockTradegRPCAPI)(nil).BuyOddStock), order)
}

// BuyStock mocks base method.
func (m *MockTradegRPCAPI) BuyStock(order *entity.StockOrder) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyStock", order)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuyStock indicates an expected call of BuyStock.
func (mr *MockTradegRPCAPIMockRecorder) BuyStock(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyStock", reflect.TypeOf((*MockTradegRPCAPI)(nil).BuyStock), order)
}

// CancelFuture mocks base method.
func (m *MockTradegRPCAPI) CancelFuture(orderID string) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelFuture", orderID)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelFuture indicates an expected call of CancelFuture.
func (mr *MockTradegRPCAPIMockRecorder) CancelFuture(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelFuture", reflect.TypeOf((*MockTradegRPCAPI)(nil).CancelFuture), orderID)
}

// CancelStock mocks base method.
func (m *MockTradegRPCAPI) CancelStock(orderID string) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelStock", orderID)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelStock indicates an expected call of CancelStock.
func (mr *MockTradegRPCAPIMockRecorder) CancelStock(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelStock", reflect.TypeOf((*MockTradegRPCAPI)(nil).CancelStock), orderID)
}

// GetAccountBalance mocks base method.
func (m *MockTradegRPCAPI) GetAccountBalance() (*pb.AccountBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBalance")
	ret0, _ := ret[0].(*pb.AccountBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBalance indicates an expected call of GetAccountBalance.
func (mr *MockTradegRPCAPIMockRecorder) GetAccountBalance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBalance", reflect.TypeOf((*MockTradegRPCAPI)(nil).GetAccountBalance))
}

// GetFuturePosition mocks base method.
func (m *MockTradegRPCAPI) GetFuturePosition() (*pb.FuturePositionArr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFuturePosition")
	ret0, _ := ret[0].(*pb.FuturePositionArr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFuturePosition indicates an expected call of GetFuturePosition.
func (mr *MockTradegRPCAPIMockRecorder) GetFuturePosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFuturePosition", reflect.TypeOf((*MockTradegRPCAPI)(nil).GetFuturePosition))
}

// GetLocalOrderStatusArr mocks base method.
func (m *MockTradegRPCAPI) GetLocalOrderStatusArr() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalOrderStatusArr")
	ret0, _ := ret[0].(error)
	return ret0
}

// GetLocalOrderStatusArr indicates an expected call of GetLocalOrderStatusArr.
func (mr *MockTradegRPCAPIMockRecorder) GetLocalOrderStatusArr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalOrderStatusArr", reflect.TypeOf((*MockTradegRPCAPI)(nil).GetLocalOrderStatusArr))
}

// GetMargin mocks base method.
func (m *MockTradegRPCAPI) GetMargin() (*pb.Margin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMargin")
	ret0, _ := ret[0].(*pb.Margin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMargin indicates an expected call of GetMargin.
func (mr *MockTradegRPCAPIMockRecorder) GetMargin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMargin", reflect.TypeOf((*MockTradegRPCAPI)(nil).GetMargin))
}

// GetNonBlockOrderStatusArr mocks base method.
func (m *MockTradegRPCAPI) GetNonBlockOrderStatusArr() (*pb.ErrorMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonBlockOrderStatusArr")
	ret0, _ := ret[0].(*pb.ErrorMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNonBlockOrderStatusArr indicates an expected call of GetNonBlockOrderStatusArr.
func (mr *MockTradegRPCAPIMockRecorder) GetNonBlockOrderStatusArr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonBlockOrderStatusArr", reflect.TypeOf((*MockTradegRPCAPI)(nil).GetNonBlockOrderStatusArr))
}

// GetOrderStatusByID mocks base method.
func (m *MockTradegRPCAPI) GetOrderStatusByID(orderID string) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderStatusByID", orderID)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderStatusByID indicates an expected call of GetOrderStatusByID.
func (mr *MockTradegRPCAPIMockRecorder) GetOrderStatusByID(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderStatusByID", reflect.TypeOf((*MockTradegRPCAPI)(nil).GetOrderStatusByID), orderID)
}

// GetSettlement mocks base method.
func (m *MockTradegRPCAPI) GetSettlement() (*pb.SettlementList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettlement")
	ret0, _ := ret[0].(*pb.SettlementList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettlement indicates an expected call of GetSettlement.
func (mr *MockTradegRPCAPIMockRecorder) GetSettlement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettlement", reflect.TypeOf((*MockTradegRPCAPI)(nil).GetSettlement))
}

// GetSimulateOrderStatusArr mocks base method.
func (m *MockTradegRPCAPI) GetSimulateOrderStatusArr() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSimulateOrderStatusArr")
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSimulateOrderStatusArr indicates an expected call of GetSimulateOrderStatusArr.
func (mr *MockTradegRPCAPIMockRecorder) GetSimulateOrderStatusArr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSimulateOrderStatusArr", reflect.TypeOf((*MockTradegRPCAPI)(nil).GetSimulateOrderStatusArr))
}

// GetStockPosition mocks base method.
func (m *MockTradegRPCAPI) GetStockPosition() (*pb.StockPositionArr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockPosition")
	ret0, _ := ret[0].(*pb.StockPositionArr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockPosition indicates an expected call of GetStockPosition.
func (mr *MockTradegRPCAPIMockRecorder) GetStockPosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockPosition", reflect.TypeOf((*MockTradegRPCAPI)(nil).GetStockPosition))
}

// SellFirstFuture mocks base method.
func (m *MockTradegRPCAPI) SellFirstFuture(order *entity.FutureOrder) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SellFirstFuture", order)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SellFirstFuture indicates an expected call of SellFirstFuture.
func (mr *MockTradegRPCAPIMockRecorder) SellFirstFuture(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SellFirstFuture", reflect.TypeOf((*MockTradegRPCAPI)(nil).SellFirstFuture), order)
}

// SellFirstStock mocks base method.
func (m *MockTradegRPCAPI) SellFirstStock(order *entity.StockOrder) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SellFirstStock", order)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SellFirstStock indicates an expected call of SellFirstStock.
func (mr *MockTradegRPCAPIMockRecorder) SellFirstStock(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SellFirstStock", reflect.TypeOf((*MockTradegRPCAPI)(nil).SellFirstStock), order)
}

// SellFuture mocks base method.
func (m *MockTradegRPCAPI) SellFuture(order *entity.FutureOrder) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SellFuture", order)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SellFuture indicates an expected call of SellFuture.
func (mr *MockTradegRPCAPIMockRecorder) SellFuture(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SellFuture", reflect.TypeOf((*MockTradegRPCAPI)(nil).SellFuture), order)
}

// SellOddStock mocks base method.
func (m *MockTradegRPCAPI) SellOddStock(order *entity.StockOrder) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SellOddStock", order)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SellOddStock indicates an expected call of SellOddStock.
func (mr *MockTradegRPCAPIMockRecorder) SellOddStock(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SellOddStock", reflect.TypeOf((*MockTradegRPCAPI)(nil).SellOddStock), order)
}

// SellStock mocks base method.
func (m *MockTradegRPCAPI) SellStock(order *entity.StockOrder) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SellStock", order)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SellStock indicates an expected call of SellStock.
func (mr *MockTradegRPCAPIMockRecorder) SellStock(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SellStock", reflect.TypeOf((*MockTradegRPCAPI)(nil).SellStock), order)
}
