// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces_rabbit.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	reflect "reflect"
	entity "tmt/internal/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockRabbit is a mock of Rabbit interface.
type MockRabbit struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitMockRecorder
}

// MockRabbitMockRecorder is the mock recorder for MockRabbit.
type MockRabbitMockRecorder struct {
	mock *MockRabbit
}

// NewMockRabbit creates a new mock instance.
func NewMockRabbit(ctrl *gomock.Controller) *MockRabbit {
	mock := &MockRabbit{ctrl: ctrl}
	mock.recorder = &MockRabbitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbit) EXPECT() *MockRabbitMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRabbit) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRabbitMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRabbit)(nil).Close))
}

// EventConsumer mocks base method.
func (m *MockRabbit) EventConsumer(eventChan chan *entity.SinopacEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EventConsumer", eventChan)
}

// EventConsumer indicates an expected call of EventConsumer.
func (mr *MockRabbitMockRecorder) EventConsumer(eventChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventConsumer", reflect.TypeOf((*MockRabbit)(nil).EventConsumer), eventChan)
}

// FillAllBasic mocks base method.
func (m *MockRabbit) FillAllBasic(allStockMap map[string]*entity.Stock, allFutureMap map[string]*entity.Future) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FillAllBasic", allStockMap, allFutureMap)
}

// FillAllBasic indicates an expected call of FillAllBasic.
func (mr *MockRabbitMockRecorder) FillAllBasic(allStockMap, allFutureMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FillAllBasic", reflect.TypeOf((*MockRabbit)(nil).FillAllBasic), allStockMap, allFutureMap)
}

// FutureBidAskConsumer mocks base method.
func (m *MockRabbit) FutureBidAskConsumer(code string, bidAskChan chan *entity.FutureRealTimeBidAsk) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FutureBidAskConsumer", code, bidAskChan)
}

// FutureBidAskConsumer indicates an expected call of FutureBidAskConsumer.
func (mr *MockRabbitMockRecorder) FutureBidAskConsumer(code, bidAskChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FutureBidAskConsumer", reflect.TypeOf((*MockRabbit)(nil).FutureBidAskConsumer), code, bidAskChan)
}

// FutureTickConsumer mocks base method.
func (m *MockRabbit) FutureTickConsumer(code string, tickChan chan *entity.RealTimeFutureTick) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FutureTickConsumer", code, tickChan)
}

// FutureTickConsumer indicates an expected call of FutureTickConsumer.
func (mr *MockRabbitMockRecorder) FutureTickConsumer(code, tickChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FutureTickConsumer", reflect.TypeOf((*MockRabbit)(nil).FutureTickConsumer), code, tickChan)
}

// OrderStatusArrConsumer mocks base method.
func (m *MockRabbit) OrderStatusArrConsumer(orderStatusChan chan interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OrderStatusArrConsumer", orderStatusChan)
}

// OrderStatusArrConsumer indicates an expected call of OrderStatusArrConsumer.
func (mr *MockRabbitMockRecorder) OrderStatusArrConsumer(orderStatusChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderStatusArrConsumer", reflect.TypeOf((*MockRabbit)(nil).OrderStatusArrConsumer), orderStatusChan)
}

// OrderStatusConsumer mocks base method.
func (m *MockRabbit) OrderStatusConsumer(orderStatusChan chan interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OrderStatusConsumer", orderStatusChan)
}

// OrderStatusConsumer indicates an expected call of OrderStatusConsumer.
func (mr *MockRabbitMockRecorder) OrderStatusConsumer(orderStatusChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderStatusConsumer", reflect.TypeOf((*MockRabbit)(nil).OrderStatusConsumer), orderStatusChan)
}

// PublishTerminate mocks base method.
func (m *MockRabbit) PublishTerminate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishTerminate")
}

// PublishTerminate indicates an expected call of PublishTerminate.
func (mr *MockRabbitMockRecorder) PublishTerminate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTerminate", reflect.TypeOf((*MockRabbit)(nil).PublishTerminate))
}

// StockBidAskConsumer mocks base method.
func (m *MockRabbit) StockBidAskConsumer(stockNum string, bidAskChan chan *entity.RealTimeStockBidAsk) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StockBidAskConsumer", stockNum, bidAskChan)
}

// StockBidAskConsumer indicates an expected call of StockBidAskConsumer.
func (mr *MockRabbitMockRecorder) StockBidAskConsumer(stockNum, bidAskChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StockBidAskConsumer", reflect.TypeOf((*MockRabbit)(nil).StockBidAskConsumer), stockNum, bidAskChan)
}

// StockTickConsumer mocks base method.
func (m *MockRabbit) StockTickConsumer(stockNum string, tickChan chan *entity.RealTimeStockTick) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StockTickConsumer", stockNum, tickChan)
}

// StockTickConsumer indicates an expected call of StockTickConsumer.
func (mr *MockRabbitMockRecorder) StockTickConsumer(stockNum, tickChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StockTickConsumer", reflect.TypeOf((*MockRabbit)(nil).StockTickConsumer), stockNum, tickChan)
}
