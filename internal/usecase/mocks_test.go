// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"
	time "time"
	entity "tmt/internal/entity"
	trader "tmt/internal/usecase/modules/trader"
	pb "tmt/pb"

	gomock "github.com/golang/mock/gomock"
)

// MockBasic is a mock of Basic interface.
type MockBasic struct {
	ctrl     *gomock.Controller
	recorder *MockBasicMockRecorder
}

// MockBasicMockRecorder is the mock recorder for MockBasic.
type MockBasicMockRecorder struct {
	mock *MockBasic
}

// NewMockBasic creates a new mock instance.
func NewMockBasic(ctrl *gomock.Controller) *MockBasic {
	mock := &MockBasic{ctrl: ctrl}
	mock.recorder = &MockBasicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBasic) EXPECT() *MockBasicMockRecorder {
	return m.recorder
}

// GetAllRepoStock mocks base method.
func (m *MockBasic) GetAllRepoStock(ctx context.Context) ([]*entity.Stock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRepoStock", ctx)
	ret0, _ := ret[0].([]*entity.Stock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRepoStock indicates an expected call of GetAllRepoStock.
func (mr *MockBasicMockRecorder) GetAllRepoStock(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRepoStock", reflect.TypeOf((*MockBasic)(nil).GetAllRepoStock), ctx)
}

// GetAllSinopacStockAndUpdateRepo mocks base method.
func (m *MockBasic) GetAllSinopacStockAndUpdateRepo(ctx context.Context) ([]*entity.Stock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSinopacStockAndUpdateRepo", ctx)
	ret0, _ := ret[0].([]*entity.Stock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSinopacStockAndUpdateRepo indicates an expected call of GetAllSinopacStockAndUpdateRepo.
func (mr *MockBasicMockRecorder) GetAllSinopacStockAndUpdateRepo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSinopacStockAndUpdateRepo", reflect.TypeOf((*MockBasic)(nil).GetAllSinopacStockAndUpdateRepo), ctx)
}

// TerminateSinopac mocks base method.
func (m *MockBasic) TerminateSinopac(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateSinopac", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// TerminateSinopac indicates an expected call of TerminateSinopac.
func (mr *MockBasicMockRecorder) TerminateSinopac(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateSinopac", reflect.TypeOf((*MockBasic)(nil).TerminateSinopac), ctx)
}

// MockBasicRepo is a mock of BasicRepo interface.
type MockBasicRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBasicRepoMockRecorder
}

// MockBasicRepoMockRecorder is the mock recorder for MockBasicRepo.
type MockBasicRepoMockRecorder struct {
	mock *MockBasicRepo
}

// NewMockBasicRepo creates a new mock instance.
func NewMockBasicRepo(ctrl *gomock.Controller) *MockBasicRepo {
	mock := &MockBasicRepo{ctrl: ctrl}
	mock.recorder = &MockBasicRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBasicRepo) EXPECT() *MockBasicRepoMockRecorder {
	return m.recorder
}

// InsertOrUpdatetCalendarDateArr mocks base method.
func (m *MockBasicRepo) InsertOrUpdatetCalendarDateArr(ctx context.Context, t []*entity.CalendarDate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdatetCalendarDateArr", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdatetCalendarDateArr indicates an expected call of InsertOrUpdatetCalendarDateArr.
func (mr *MockBasicRepoMockRecorder) InsertOrUpdatetCalendarDateArr(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdatetCalendarDateArr", reflect.TypeOf((*MockBasicRepo)(nil).InsertOrUpdatetCalendarDateArr), ctx, t)
}

// InsertOrUpdatetFutureArr mocks base method.
func (m *MockBasicRepo) InsertOrUpdatetFutureArr(ctx context.Context, t []*entity.Future) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdatetFutureArr", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdatetFutureArr indicates an expected call of InsertOrUpdatetFutureArr.
func (mr *MockBasicRepoMockRecorder) InsertOrUpdatetFutureArr(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdatetFutureArr", reflect.TypeOf((*MockBasicRepo)(nil).InsertOrUpdatetFutureArr), ctx, t)
}

// InsertOrUpdatetStockArr mocks base method.
func (m *MockBasicRepo) InsertOrUpdatetStockArr(ctx context.Context, t []*entity.Stock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdatetStockArr", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdatetStockArr indicates an expected call of InsertOrUpdatetStockArr.
func (mr *MockBasicRepoMockRecorder) InsertOrUpdatetStockArr(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdatetStockArr", reflect.TypeOf((*MockBasicRepo)(nil).InsertOrUpdatetStockArr), ctx, t)
}

// QueryAllCalendar mocks base method.
func (m *MockBasicRepo) QueryAllCalendar(ctx context.Context) (map[time.Time]*entity.CalendarDate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllCalendar", ctx)
	ret0, _ := ret[0].(map[time.Time]*entity.CalendarDate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllCalendar indicates an expected call of QueryAllCalendar.
func (mr *MockBasicRepoMockRecorder) QueryAllCalendar(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllCalendar", reflect.TypeOf((*MockBasicRepo)(nil).QueryAllCalendar), ctx)
}

// QueryAllFuture mocks base method.
func (m *MockBasicRepo) QueryAllFuture(ctx context.Context) (map[string]*entity.Future, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllFuture", ctx)
	ret0, _ := ret[0].(map[string]*entity.Future)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllFuture indicates an expected call of QueryAllFuture.
func (mr *MockBasicRepoMockRecorder) QueryAllFuture(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllFuture", reflect.TypeOf((*MockBasicRepo)(nil).QueryAllFuture), ctx)
}

// QueryAllMXFFuture mocks base method.
func (m *MockBasicRepo) QueryAllMXFFuture(ctx context.Context) ([]*entity.Future, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllMXFFuture", ctx)
	ret0, _ := ret[0].([]*entity.Future)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllMXFFuture indicates an expected call of QueryAllMXFFuture.
func (mr *MockBasicRepoMockRecorder) QueryAllMXFFuture(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllMXFFuture", reflect.TypeOf((*MockBasicRepo)(nil).QueryAllMXFFuture), ctx)
}

// QueryAllStock mocks base method.
func (m *MockBasicRepo) QueryAllStock(ctx context.Context) (map[string]*entity.Stock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllStock", ctx)
	ret0, _ := ret[0].(map[string]*entity.Stock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllStock indicates an expected call of QueryAllStock.
func (mr *MockBasicRepoMockRecorder) QueryAllStock(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllStock", reflect.TypeOf((*MockBasicRepo)(nil).QueryAllStock), ctx)
}

// UpdateAllStockDayTradeToNo mocks base method.
func (m *MockBasicRepo) UpdateAllStockDayTradeToNo(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllStockDayTradeToNo", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAllStockDayTradeToNo indicates an expected call of UpdateAllStockDayTradeToNo.
func (mr *MockBasicRepoMockRecorder) UpdateAllStockDayTradeToNo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllStockDayTradeToNo", reflect.TypeOf((*MockBasicRepo)(nil).UpdateAllStockDayTradeToNo), ctx)
}

// MockBasicgRPCAPI is a mock of BasicgRPCAPI interface.
type MockBasicgRPCAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBasicgRPCAPIMockRecorder
}

// MockBasicgRPCAPIMockRecorder is the mock recorder for MockBasicgRPCAPI.
type MockBasicgRPCAPIMockRecorder struct {
	mock *MockBasicgRPCAPI
}

// NewMockBasicgRPCAPI creates a new mock instance.
func NewMockBasicgRPCAPI(ctrl *gomock.Controller) *MockBasicgRPCAPI {
	mock := &MockBasicgRPCAPI{ctrl: ctrl}
	mock.recorder = &MockBasicgRPCAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBasicgRPCAPI) EXPECT() *MockBasicgRPCAPIMockRecorder {
	return m.recorder
}

// GetAllFutureDetail mocks base method.
func (m *MockBasicgRPCAPI) GetAllFutureDetail() ([]*pb.FutureDetailMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFutureDetail")
	ret0, _ := ret[0].([]*pb.FutureDetailMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFutureDetail indicates an expected call of GetAllFutureDetail.
func (mr *MockBasicgRPCAPIMockRecorder) GetAllFutureDetail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFutureDetail", reflect.TypeOf((*MockBasicgRPCAPI)(nil).GetAllFutureDetail))
}

// GetAllStockDetail mocks base method.
func (m *MockBasicgRPCAPI) GetAllStockDetail() ([]*pb.StockDetailMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStockDetail")
	ret0, _ := ret[0].([]*pb.StockDetailMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStockDetail indicates an expected call of GetAllStockDetail.
func (mr *MockBasicgRPCAPIMockRecorder) GetAllStockDetail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStockDetail", reflect.TypeOf((*MockBasicgRPCAPI)(nil).GetAllStockDetail))
}

// Heartbeat mocks base method.
func (m *MockBasicgRPCAPI) Heartbeat() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Heartbeat")
	ret0, _ := ret[0].(error)
	return ret0
}

// Heartbeat indicates an expected call of Heartbeat.
func (mr *MockBasicgRPCAPIMockRecorder) Heartbeat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Heartbeat", reflect.TypeOf((*MockBasicgRPCAPI)(nil).Heartbeat))
}

// Terminate mocks base method.
func (m *MockBasicgRPCAPI) Terminate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Terminate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Terminate indicates an expected call of Terminate.
func (mr *MockBasicgRPCAPIMockRecorder) Terminate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Terminate", reflect.TypeOf((*MockBasicgRPCAPI)(nil).Terminate))
}

// MockTarget is a mock of Target interface.
type MockTarget struct {
	ctrl     *gomock.Controller
	recorder *MockTargetMockRecorder
}

// MockTargetMockRecorder is the mock recorder for MockTarget.
type MockTargetMockRecorder struct {
	mock *MockTarget
}

// NewMockTarget creates a new mock instance.
func NewMockTarget(ctrl *gomock.Controller) *MockTarget {
	mock := &MockTarget{ctrl: ctrl}
	mock.recorder = &MockTargetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTarget) EXPECT() *MockTargetMockRecorder {
	return m.recorder
}

// GetTargets mocks base method.
func (m *MockTarget) GetTargets(ctx context.Context) []*entity.StockTarget {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargets", ctx)
	ret0, _ := ret[0].([]*entity.StockTarget)
	return ret0
}

// GetTargets indicates an expected call of GetTargets.
func (mr *MockTargetMockRecorder) GetTargets(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargets", reflect.TypeOf((*MockTarget)(nil).GetTargets), ctx)
}

// MockTargetRepo is a mock of TargetRepo interface.
type MockTargetRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTargetRepoMockRecorder
}

// MockTargetRepoMockRecorder is the mock recorder for MockTargetRepo.
type MockTargetRepoMockRecorder struct {
	mock *MockTargetRepo
}

// NewMockTargetRepo creates a new mock instance.
func NewMockTargetRepo(ctrl *gomock.Controller) *MockTargetRepo {
	mock := &MockTargetRepo{ctrl: ctrl}
	mock.recorder = &MockTargetRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTargetRepo) EXPECT() *MockTargetRepoMockRecorder {
	return m.recorder
}

// InsertOrUpdateTargetArr mocks base method.
func (m *MockTargetRepo) InsertOrUpdateTargetArr(ctx context.Context, t []*entity.StockTarget) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateTargetArr", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateTargetArr indicates an expected call of InsertOrUpdateTargetArr.
func (mr *MockTargetRepoMockRecorder) InsertOrUpdateTargetArr(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateTargetArr", reflect.TypeOf((*MockTargetRepo)(nil).InsertOrUpdateTargetArr), ctx, t)
}

// QueryTargetsByTradeDay mocks base method.
func (m *MockTargetRepo) QueryTargetsByTradeDay(ctx context.Context, tradeDay time.Time) ([]*entity.StockTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTargetsByTradeDay", ctx, tradeDay)
	ret0, _ := ret[0].([]*entity.StockTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTargetsByTradeDay indicates an expected call of QueryTargetsByTradeDay.
func (mr *MockTargetRepoMockRecorder) QueryTargetsByTradeDay(ctx, tradeDay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTargetsByTradeDay", reflect.TypeOf((*MockTargetRepo)(nil).QueryTargetsByTradeDay), ctx, tradeDay)
}

// MockTargetgRPCAPI is a mock of TargetgRPCAPI interface.
type MockTargetgRPCAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTargetgRPCAPIMockRecorder
}

// MockTargetgRPCAPIMockRecorder is the mock recorder for MockTargetgRPCAPI.
type MockTargetgRPCAPIMockRecorder struct {
	mock *MockTargetgRPCAPI
}

// NewMockTargetgRPCAPI creates a new mock instance.
func NewMockTargetgRPCAPI(ctrl *gomock.Controller) *MockTargetgRPCAPI {
	mock := &MockTargetgRPCAPI{ctrl: ctrl}
	mock.recorder = &MockTargetgRPCAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTargetgRPCAPI) EXPECT() *MockTargetgRPCAPIMockRecorder {
	return m.recorder
}

// GetStockVolumeRank mocks base method.
func (m *MockTargetgRPCAPI) GetStockVolumeRank(date string) ([]*pb.StockVolumeRankMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockVolumeRank", date)
	ret0, _ := ret[0].([]*pb.StockVolumeRankMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockVolumeRank indicates an expected call of GetStockVolumeRank.
func (mr *MockTargetgRPCAPIMockRecorder) GetStockVolumeRank(date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockVolumeRank", reflect.TypeOf((*MockTargetgRPCAPI)(nil).GetStockVolumeRank), date)
}

// SubscribeFutureBidAsk mocks base method.
func (m *MockTargetgRPCAPI) SubscribeFutureBidAsk(codeArr []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeFutureBidAsk", codeArr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeFutureBidAsk indicates an expected call of SubscribeFutureBidAsk.
func (mr *MockTargetgRPCAPIMockRecorder) SubscribeFutureBidAsk(codeArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeFutureBidAsk", reflect.TypeOf((*MockTargetgRPCAPI)(nil).SubscribeFutureBidAsk), codeArr)
}

// SubscribeFutureTick mocks base method.
func (m *MockTargetgRPCAPI) SubscribeFutureTick(codeArr []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeFutureTick", codeArr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeFutureTick indicates an expected call of SubscribeFutureTick.
func (mr *MockTargetgRPCAPIMockRecorder) SubscribeFutureTick(codeArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeFutureTick", reflect.TypeOf((*MockTargetgRPCAPI)(nil).SubscribeFutureTick), codeArr)
}

// SubscribeStockBidAsk mocks base method.
func (m *MockTargetgRPCAPI) SubscribeStockBidAsk(stockNumArr []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeStockBidAsk", stockNumArr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeStockBidAsk indicates an expected call of SubscribeStockBidAsk.
func (mr *MockTargetgRPCAPIMockRecorder) SubscribeStockBidAsk(stockNumArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeStockBidAsk", reflect.TypeOf((*MockTargetgRPCAPI)(nil).SubscribeStockBidAsk), stockNumArr)
}

// SubscribeStockTick mocks base method.
func (m *MockTargetgRPCAPI) SubscribeStockTick(stockNumArr []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeStockTick", stockNumArr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeStockTick indicates an expected call of SubscribeStockTick.
func (mr *MockTargetgRPCAPIMockRecorder) SubscribeStockTick(stockNumArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeStockTick", reflect.TypeOf((*MockTargetgRPCAPI)(nil).SubscribeStockTick), stockNumArr)
}

// UnSubscribeFutureBidAsk mocks base method.
func (m *MockTargetgRPCAPI) UnSubscribeFutureBidAsk(codeArr []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSubscribeFutureBidAsk", codeArr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnSubscribeFutureBidAsk indicates an expected call of UnSubscribeFutureBidAsk.
func (mr *MockTargetgRPCAPIMockRecorder) UnSubscribeFutureBidAsk(codeArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSubscribeFutureBidAsk", reflect.TypeOf((*MockTargetgRPCAPI)(nil).UnSubscribeFutureBidAsk), codeArr)
}

// UnSubscribeFutureTick mocks base method.
func (m *MockTargetgRPCAPI) UnSubscribeFutureTick(codeArr []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSubscribeFutureTick", codeArr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnSubscribeFutureTick indicates an expected call of UnSubscribeFutureTick.
func (mr *MockTargetgRPCAPIMockRecorder) UnSubscribeFutureTick(codeArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSubscribeFutureTick", reflect.TypeOf((*MockTargetgRPCAPI)(nil).UnSubscribeFutureTick), codeArr)
}

// UnSubscribeStockAllBidAsk mocks base method.
func (m *MockTargetgRPCAPI) UnSubscribeStockAllBidAsk() (*pb.ErrorMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSubscribeStockAllBidAsk")
	ret0, _ := ret[0].(*pb.ErrorMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnSubscribeStockAllBidAsk indicates an expected call of UnSubscribeStockAllBidAsk.
func (mr *MockTargetgRPCAPIMockRecorder) UnSubscribeStockAllBidAsk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSubscribeStockAllBidAsk", reflect.TypeOf((*MockTargetgRPCAPI)(nil).UnSubscribeStockAllBidAsk))
}

// UnSubscribeStockAllTick mocks base method.
func (m *MockTargetgRPCAPI) UnSubscribeStockAllTick() (*pb.ErrorMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSubscribeStockAllTick")
	ret0, _ := ret[0].(*pb.ErrorMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnSubscribeStockAllTick indicates an expected call of UnSubscribeStockAllTick.
func (mr *MockTargetgRPCAPIMockRecorder) UnSubscribeStockAllTick() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSubscribeStockAllTick", reflect.TypeOf((*MockTargetgRPCAPI)(nil).UnSubscribeStockAllTick))
}

// UnSubscribeStockBidAsk mocks base method.
func (m *MockTargetgRPCAPI) UnSubscribeStockBidAsk(stockNumArr []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSubscribeStockBidAsk", stockNumArr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnSubscribeStockBidAsk indicates an expected call of UnSubscribeStockBidAsk.
func (mr *MockTargetgRPCAPIMockRecorder) UnSubscribeStockBidAsk(stockNumArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSubscribeStockBidAsk", reflect.TypeOf((*MockTargetgRPCAPI)(nil).UnSubscribeStockBidAsk), stockNumArr)
}

// UnSubscribeStockTick mocks base method.
func (m *MockTargetgRPCAPI) UnSubscribeStockTick(stockNumArr []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSubscribeStockTick", stockNumArr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnSubscribeStockTick indicates an expected call of UnSubscribeStockTick.
func (mr *MockTargetgRPCAPIMockRecorder) UnSubscribeStockTick(stockNumArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSubscribeStockTick", reflect.TypeOf((*MockTargetgRPCAPI)(nil).UnSubscribeStockTick), stockNumArr)
}

// MockHistory is a mock of History interface.
type MockHistory struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryMockRecorder
}

// MockHistoryMockRecorder is the mock recorder for MockHistory.
type MockHistoryMockRecorder struct {
	mock *MockHistory
}

// NewMockHistory creates a new mock instance.
func NewMockHistory(ctrl *gomock.Controller) *MockHistory {
	mock := &MockHistory{ctrl: ctrl}
	mock.recorder = &MockHistoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistory) EXPECT() *MockHistoryMockRecorder {
	return m.recorder
}

// FetchFutureHistoryKbar mocks base method.
func (m *MockHistory) FetchFutureHistoryKbar(code string, date time.Time) ([]*entity.FutureHistoryKbar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFutureHistoryKbar", code, date)
	ret0, _ := ret[0].([]*entity.FutureHistoryKbar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFutureHistoryKbar indicates an expected call of FetchFutureHistoryKbar.
func (mr *MockHistoryMockRecorder) FetchFutureHistoryKbar(code, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFutureHistoryKbar", reflect.TypeOf((*MockHistory)(nil).FetchFutureHistoryKbar), code, date)
}

// GetDayKbarByStockNumDate mocks base method.
func (m *MockHistory) GetDayKbarByStockNumDate(stockNum string, date time.Time) *entity.StockHistoryKbar {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDayKbarByStockNumDate", stockNum, date)
	ret0, _ := ret[0].(*entity.StockHistoryKbar)
	return ret0
}

// GetDayKbarByStockNumDate indicates an expected call of GetDayKbarByStockNumDate.
func (mr *MockHistoryMockRecorder) GetDayKbarByStockNumDate(stockNum, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDayKbarByStockNumDate", reflect.TypeOf((*MockHistory)(nil).GetDayKbarByStockNumDate), stockNum, date)
}

// GetFutureTradeCond mocks base method.
func (m *MockHistory) GetFutureTradeCond(days int) trader.TradeBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFutureTradeCond", days)
	ret0, _ := ret[0].(trader.TradeBalance)
	return ret0
}

// GetFutureTradeCond indicates an expected call of GetFutureTradeCond.
func (mr *MockHistoryMockRecorder) GetFutureTradeCond(days interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFutureTradeCond", reflect.TypeOf((*MockHistory)(nil).GetFutureTradeCond), days)
}

// GetTradeDay mocks base method.
func (m *MockHistory) GetTradeDay() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradeDay")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetTradeDay indicates an expected call of GetTradeDay.
func (mr *MockHistoryMockRecorder) GetTradeDay() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradeDay", reflect.TypeOf((*MockHistory)(nil).GetTradeDay))
}

// MockHistoryRepo is a mock of HistoryRepo interface.
type MockHistoryRepo struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryRepoMockRecorder
}

// MockHistoryRepoMockRecorder is the mock recorder for MockHistoryRepo.
type MockHistoryRepoMockRecorder struct {
	mock *MockHistoryRepo
}

// NewMockHistoryRepo creates a new mock instance.
func NewMockHistoryRepo(ctrl *gomock.Controller) *MockHistoryRepo {
	mock := &MockHistoryRepo{ctrl: ctrl}
	mock.recorder = &MockHistoryRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryRepo) EXPECT() *MockHistoryRepoMockRecorder {
	return m.recorder
}

// DeleteHistoryCloseByStockAndDate mocks base method.
func (m *MockHistoryRepo) DeleteHistoryCloseByStockAndDate(ctx context.Context, stockNumArr []string, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHistoryCloseByStockAndDate", ctx, stockNumArr, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHistoryCloseByStockAndDate indicates an expected call of DeleteHistoryCloseByStockAndDate.
func (mr *MockHistoryRepoMockRecorder) DeleteHistoryCloseByStockAndDate(ctx, stockNumArr, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHistoryCloseByStockAndDate", reflect.TypeOf((*MockHistoryRepo)(nil).DeleteHistoryCloseByStockAndDate), ctx, stockNumArr, date)
}

// DeleteHistoryKbarByStockAndDate mocks base method.
func (m *MockHistoryRepo) DeleteHistoryKbarByStockAndDate(ctx context.Context, stockNumArr []string, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHistoryKbarByStockAndDate", ctx, stockNumArr, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHistoryKbarByStockAndDate indicates an expected call of DeleteHistoryKbarByStockAndDate.
func (mr *MockHistoryRepoMockRecorder) DeleteHistoryKbarByStockAndDate(ctx, stockNumArr, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHistoryKbarByStockAndDate", reflect.TypeOf((*MockHistoryRepo)(nil).DeleteHistoryKbarByStockAndDate), ctx, stockNumArr, date)
}

// DeleteHistoryTickByStockAndDate mocks base method.
func (m *MockHistoryRepo) DeleteHistoryTickByStockAndDate(ctx context.Context, stockNumArr []string, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHistoryTickByStockAndDate", ctx, stockNumArr, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHistoryTickByStockAndDate indicates an expected call of DeleteHistoryTickByStockAndDate.
func (mr *MockHistoryRepoMockRecorder) DeleteHistoryTickByStockAndDate(ctx, stockNumArr, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHistoryTickByStockAndDate", reflect.TypeOf((*MockHistoryRepo)(nil).DeleteHistoryTickByStockAndDate), ctx, stockNumArr, date)
}

// InsertFutureHistoryClose mocks base method.
func (m *MockHistoryRepo) InsertFutureHistoryClose(ctx context.Context, c *entity.FutureHistoryClose) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertFutureHistoryClose", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertFutureHistoryClose indicates an expected call of InsertFutureHistoryClose.
func (mr *MockHistoryRepoMockRecorder) InsertFutureHistoryClose(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertFutureHistoryClose", reflect.TypeOf((*MockHistoryRepo)(nil).InsertFutureHistoryClose), ctx, c)
}

// InsertFutureHistoryTickArr mocks base method.
func (m *MockHistoryRepo) InsertFutureHistoryTickArr(ctx context.Context, t []*entity.FutureHistoryTick) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertFutureHistoryTickArr", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertFutureHistoryTickArr indicates an expected call of InsertFutureHistoryTickArr.
func (mr *MockHistoryRepoMockRecorder) InsertFutureHistoryTickArr(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertFutureHistoryTickArr", reflect.TypeOf((*MockHistoryRepo)(nil).InsertFutureHistoryTickArr), ctx, t)
}

// InsertHistoryCloseArr mocks base method.
func (m *MockHistoryRepo) InsertHistoryCloseArr(ctx context.Context, t []*entity.StockHistoryClose) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertHistoryCloseArr", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertHistoryCloseArr indicates an expected call of InsertHistoryCloseArr.
func (mr *MockHistoryRepoMockRecorder) InsertHistoryCloseArr(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertHistoryCloseArr", reflect.TypeOf((*MockHistoryRepo)(nil).InsertHistoryCloseArr), ctx, t)
}

// InsertHistoryKbarArr mocks base method.
func (m *MockHistoryRepo) InsertHistoryKbarArr(ctx context.Context, t []*entity.StockHistoryKbar) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertHistoryKbarArr", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertHistoryKbarArr indicates an expected call of InsertHistoryKbarArr.
func (mr *MockHistoryRepoMockRecorder) InsertHistoryKbarArr(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertHistoryKbarArr", reflect.TypeOf((*MockHistoryRepo)(nil).InsertHistoryKbarArr), ctx, t)
}

// InsertHistoryTickArr mocks base method.
func (m *MockHistoryRepo) InsertHistoryTickArr(ctx context.Context, t []*entity.StockHistoryTick) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertHistoryTickArr", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertHistoryTickArr indicates an expected call of InsertHistoryTickArr.
func (mr *MockHistoryRepoMockRecorder) InsertHistoryTickArr(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertHistoryTickArr", reflect.TypeOf((*MockHistoryRepo)(nil).InsertHistoryTickArr), ctx, t)
}

// InsertQuaterMA mocks base method.
func (m *MockHistoryRepo) InsertQuaterMA(ctx context.Context, t *entity.StockHistoryAnalyze) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertQuaterMA", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertQuaterMA indicates an expected call of InsertQuaterMA.
func (mr *MockHistoryRepoMockRecorder) InsertQuaterMA(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertQuaterMA", reflect.TypeOf((*MockHistoryRepo)(nil).InsertQuaterMA), ctx, t)
}

// QueryAllQuaterMAByStockNum mocks base method.
func (m *MockHistoryRepo) QueryAllQuaterMAByStockNum(ctx context.Context, stockNum string) (map[time.Time]*entity.StockHistoryAnalyze, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllQuaterMAByStockNum", ctx, stockNum)
	ret0, _ := ret[0].(map[time.Time]*entity.StockHistoryAnalyze)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllQuaterMAByStockNum indicates an expected call of QueryAllQuaterMAByStockNum.
func (mr *MockHistoryRepoMockRecorder) QueryAllQuaterMAByStockNum(ctx, stockNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllQuaterMAByStockNum", reflect.TypeOf((*MockHistoryRepo)(nil).QueryAllQuaterMAByStockNum), ctx, stockNum)
}

// QueryFutureHistoryCloseByDate mocks base method.
func (m *MockHistoryRepo) QueryFutureHistoryCloseByDate(ctx context.Context, code string, tradeDay time.Time) (*entity.FutureHistoryClose, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFutureHistoryCloseByDate", ctx, code, tradeDay)
	ret0, _ := ret[0].(*entity.FutureHistoryClose)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFutureHistoryCloseByDate indicates an expected call of QueryFutureHistoryCloseByDate.
func (mr *MockHistoryRepoMockRecorder) QueryFutureHistoryCloseByDate(ctx, code, tradeDay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFutureHistoryCloseByDate", reflect.TypeOf((*MockHistoryRepo)(nil).QueryFutureHistoryCloseByDate), ctx, code, tradeDay)
}

// QueryFutureHistoryTickArrByTime mocks base method.
func (m *MockHistoryRepo) QueryFutureHistoryTickArrByTime(ctx context.Context, code string, startTime, endTime time.Time) ([]*entity.FutureHistoryTick, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFutureHistoryTickArrByTime", ctx, code, startTime, endTime)
	ret0, _ := ret[0].([]*entity.FutureHistoryTick)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFutureHistoryTickArrByTime indicates an expected call of QueryFutureHistoryTickArrByTime.
func (mr *MockHistoryRepoMockRecorder) QueryFutureHistoryTickArrByTime(ctx, code, startTime, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFutureHistoryTickArrByTime", reflect.TypeOf((*MockHistoryRepo)(nil).QueryFutureHistoryTickArrByTime), ctx, code, startTime, endTime)
}

// QueryMultiStockKbarArrByDate mocks base method.
func (m *MockHistoryRepo) QueryMultiStockKbarArrByDate(ctx context.Context, stockNumArr []string, date time.Time) (map[string][]*entity.StockHistoryKbar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMultiStockKbarArrByDate", ctx, stockNumArr, date)
	ret0, _ := ret[0].(map[string][]*entity.StockHistoryKbar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMultiStockKbarArrByDate indicates an expected call of QueryMultiStockKbarArrByDate.
func (mr *MockHistoryRepoMockRecorder) QueryMultiStockKbarArrByDate(ctx, stockNumArr, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMultiStockKbarArrByDate", reflect.TypeOf((*MockHistoryRepo)(nil).QueryMultiStockKbarArrByDate), ctx, stockNumArr, date)
}

// QueryMultiStockTickArrByDate mocks base method.
func (m *MockHistoryRepo) QueryMultiStockTickArrByDate(ctx context.Context, stockNumArr []string, date time.Time) (map[string][]*entity.StockHistoryTick, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMultiStockTickArrByDate", ctx, stockNumArr, date)
	ret0, _ := ret[0].(map[string][]*entity.StockHistoryTick)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMultiStockTickArrByDate indicates an expected call of QueryMultiStockTickArrByDate.
func (mr *MockHistoryRepoMockRecorder) QueryMultiStockTickArrByDate(ctx, stockNumArr, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMultiStockTickArrByDate", reflect.TypeOf((*MockHistoryRepo)(nil).QueryMultiStockTickArrByDate), ctx, stockNumArr, date)
}

// QueryMutltiStockCloseByDate mocks base method.
func (m *MockHistoryRepo) QueryMutltiStockCloseByDate(ctx context.Context, stockNumArr []string, date time.Time) (map[string]*entity.StockHistoryClose, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMutltiStockCloseByDate", ctx, stockNumArr, date)
	ret0, _ := ret[0].(map[string]*entity.StockHistoryClose)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMutltiStockCloseByDate indicates an expected call of QueryMutltiStockCloseByDate.
func (mr *MockHistoryRepoMockRecorder) QueryMutltiStockCloseByDate(ctx, stockNumArr, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMutltiStockCloseByDate", reflect.TypeOf((*MockHistoryRepo)(nil).QueryMutltiStockCloseByDate), ctx, stockNumArr, date)
}

// MockHistorygRPCAPI is a mock of HistorygRPCAPI interface.
type MockHistorygRPCAPI struct {
	ctrl     *gomock.Controller
	recorder *MockHistorygRPCAPIMockRecorder
}

// MockHistorygRPCAPIMockRecorder is the mock recorder for MockHistorygRPCAPI.
type MockHistorygRPCAPIMockRecorder struct {
	mock *MockHistorygRPCAPI
}

// NewMockHistorygRPCAPI creates a new mock instance.
func NewMockHistorygRPCAPI(ctrl *gomock.Controller) *MockHistorygRPCAPI {
	mock := &MockHistorygRPCAPI{ctrl: ctrl}
	mock.recorder = &MockHistorygRPCAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistorygRPCAPI) EXPECT() *MockHistorygRPCAPIMockRecorder {
	return m.recorder
}

// GetFutureHistoryClose mocks base method.
func (m *MockHistorygRPCAPI) GetFutureHistoryClose(codeArr []string, date string) ([]*pb.HistoryCloseMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFutureHistoryClose", codeArr, date)
	ret0, _ := ret[0].([]*pb.HistoryCloseMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFutureHistoryClose indicates an expected call of GetFutureHistoryClose.
func (mr *MockHistorygRPCAPIMockRecorder) GetFutureHistoryClose(codeArr, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFutureHistoryClose", reflect.TypeOf((*MockHistorygRPCAPI)(nil).GetFutureHistoryClose), codeArr, date)
}

// GetFutureHistoryKbar mocks base method.
func (m *MockHistorygRPCAPI) GetFutureHistoryKbar(codeArr []string, date string) ([]*pb.HistoryKbarMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFutureHistoryKbar", codeArr, date)
	ret0, _ := ret[0].([]*pb.HistoryKbarMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFutureHistoryKbar indicates an expected call of GetFutureHistoryKbar.
func (mr *MockHistorygRPCAPIMockRecorder) GetFutureHistoryKbar(codeArr, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFutureHistoryKbar", reflect.TypeOf((*MockHistorygRPCAPI)(nil).GetFutureHistoryKbar), codeArr, date)
}

// GetFutureHistoryTick mocks base method.
func (m *MockHistorygRPCAPI) GetFutureHistoryTick(codeArr []string, date string) ([]*pb.HistoryTickMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFutureHistoryTick", codeArr, date)
	ret0, _ := ret[0].([]*pb.HistoryTickMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFutureHistoryTick indicates an expected call of GetFutureHistoryTick.
func (mr *MockHistorygRPCAPIMockRecorder) GetFutureHistoryTick(codeArr, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFutureHistoryTick", reflect.TypeOf((*MockHistorygRPCAPI)(nil).GetFutureHistoryTick), codeArr, date)
}

// GetStockHistoryClose mocks base method.
func (m *MockHistorygRPCAPI) GetStockHistoryClose(stockNumArr []string, date string) ([]*pb.HistoryCloseMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockHistoryClose", stockNumArr, date)
	ret0, _ := ret[0].([]*pb.HistoryCloseMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockHistoryClose indicates an expected call of GetStockHistoryClose.
func (mr *MockHistorygRPCAPIMockRecorder) GetStockHistoryClose(stockNumArr, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockHistoryClose", reflect.TypeOf((*MockHistorygRPCAPI)(nil).GetStockHistoryClose), stockNumArr, date)
}

// GetStockHistoryCloseByDateArr mocks base method.
func (m *MockHistorygRPCAPI) GetStockHistoryCloseByDateArr(stockNumArr, date []string) ([]*pb.HistoryCloseMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockHistoryCloseByDateArr", stockNumArr, date)
	ret0, _ := ret[0].([]*pb.HistoryCloseMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockHistoryCloseByDateArr indicates an expected call of GetStockHistoryCloseByDateArr.
func (mr *MockHistorygRPCAPIMockRecorder) GetStockHistoryCloseByDateArr(stockNumArr, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockHistoryCloseByDateArr", reflect.TypeOf((*MockHistorygRPCAPI)(nil).GetStockHistoryCloseByDateArr), stockNumArr, date)
}

// GetStockHistoryKbar mocks base method.
func (m *MockHistorygRPCAPI) GetStockHistoryKbar(stockNumArr []string, date string) ([]*pb.HistoryKbarMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockHistoryKbar", stockNumArr, date)
	ret0, _ := ret[0].([]*pb.HistoryKbarMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockHistoryKbar indicates an expected call of GetStockHistoryKbar.
func (mr *MockHistorygRPCAPIMockRecorder) GetStockHistoryKbar(stockNumArr, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockHistoryKbar", reflect.TypeOf((*MockHistorygRPCAPI)(nil).GetStockHistoryKbar), stockNumArr, date)
}

// GetStockHistoryTick mocks base method.
func (m *MockHistorygRPCAPI) GetStockHistoryTick(stockNumArr []string, date string) ([]*pb.HistoryTickMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockHistoryTick", stockNumArr, date)
	ret0, _ := ret[0].([]*pb.HistoryTickMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockHistoryTick indicates an expected call of GetStockHistoryTick.
func (mr *MockHistorygRPCAPIMockRecorder) GetStockHistoryTick(stockNumArr, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockHistoryTick", reflect.TypeOf((*MockHistorygRPCAPI)(nil).GetStockHistoryTick), stockNumArr, date)
}

// GetStockTSEHistoryClose mocks base method.
func (m *MockHistorygRPCAPI) GetStockTSEHistoryClose(date string) ([]*pb.HistoryCloseMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockTSEHistoryClose", date)
	ret0, _ := ret[0].([]*pb.HistoryCloseMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockTSEHistoryClose indicates an expected call of GetStockTSEHistoryClose.
func (mr *MockHistorygRPCAPIMockRecorder) GetStockTSEHistoryClose(date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockTSEHistoryClose", reflect.TypeOf((*MockHistorygRPCAPI)(nil).GetStockTSEHistoryClose), date)
}

// GetStockTSEHistoryKbar mocks base method.
func (m *MockHistorygRPCAPI) GetStockTSEHistoryKbar(date string) ([]*pb.HistoryKbarMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockTSEHistoryKbar", date)
	ret0, _ := ret[0].([]*pb.HistoryKbarMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockTSEHistoryKbar indicates an expected call of GetStockTSEHistoryKbar.
func (mr *MockHistorygRPCAPIMockRecorder) GetStockTSEHistoryKbar(date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockTSEHistoryKbar", reflect.TypeOf((*MockHistorygRPCAPI)(nil).GetStockTSEHistoryKbar), date)
}

// GetStockTSEHistoryTick mocks base method.
func (m *MockHistorygRPCAPI) GetStockTSEHistoryTick(date string) ([]*pb.HistoryTickMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockTSEHistoryTick", date)
	ret0, _ := ret[0].([]*pb.HistoryTickMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockTSEHistoryTick indicates an expected call of GetStockTSEHistoryTick.
func (mr *MockHistorygRPCAPIMockRecorder) GetStockTSEHistoryTick(date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockTSEHistoryTick", reflect.TypeOf((*MockHistorygRPCAPI)(nil).GetStockTSEHistoryTick), date)
}

// MockStream is a mock of Stream interface.
type MockStream struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMockRecorder
}

// MockStreamMockRecorder is the mock recorder for MockStream.
type MockStreamMockRecorder struct {
	mock *MockStream
}

// NewMockStream creates a new mock instance.
func NewMockStream(ctrl *gomock.Controller) *MockStream {
	mock := &MockStream{ctrl: ctrl}
	mock.recorder = &MockStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStream) EXPECT() *MockStreamMockRecorder {
	return m.recorder
}

// DeleteFutureRealTimeConnection mocks base method.
func (m *MockStream) DeleteFutureRealTimeConnection(connectionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteFutureRealTimeConnection", connectionID)
}

// DeleteFutureRealTimeConnection indicates an expected call of DeleteFutureRealTimeConnection.
func (mr *MockStreamMockRecorder) DeleteFutureRealTimeConnection(connectionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFutureRealTimeConnection", reflect.TypeOf((*MockStream)(nil).DeleteFutureRealTimeConnection), connectionID)
}

// DeleteOrderStatusConnection mocks base method.
func (m *MockStream) DeleteOrderStatusConnection(connectionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteOrderStatusConnection", connectionID)
}

// DeleteOrderStatusConnection indicates an expected call of DeleteOrderStatusConnection.
func (mr *MockStreamMockRecorder) DeleteOrderStatusConnection(connectionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderStatusConnection", reflect.TypeOf((*MockStream)(nil).DeleteOrderStatusConnection), connectionID)
}

// GetFutureSnapshotByCode mocks base method.
func (m *MockStream) GetFutureSnapshotByCode(code string) (*entity.FutureSnapShot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFutureSnapshotByCode", code)
	ret0, _ := ret[0].(*entity.FutureSnapShot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFutureSnapshotByCode indicates an expected call of GetFutureSnapshotByCode.
func (mr *MockStreamMockRecorder) GetFutureSnapshotByCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFutureSnapshotByCode", reflect.TypeOf((*MockStream)(nil).GetFutureSnapshotByCode), code)
}

// GetFutureTradeSwitchStatus mocks base method.
func (m *MockStream) GetFutureTradeSwitchStatus(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFutureTradeSwitchStatus", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetFutureTradeSwitchStatus indicates an expected call of GetFutureTradeSwitchStatus.
func (mr *MockStreamMockRecorder) GetFutureTradeSwitchStatus(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFutureTradeSwitchStatus", reflect.TypeOf((*MockStream)(nil).GetFutureTradeSwitchStatus), ctx)
}

// GetMainFutureCode mocks base method.
func (m *MockStream) GetMainFutureCode() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMainFutureCode")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMainFutureCode indicates an expected call of GetMainFutureCode.
func (mr *MockStreamMockRecorder) GetMainFutureCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMainFutureCode", reflect.TypeOf((*MockStream)(nil).GetMainFutureCode))
}

// GetNasdaqClose mocks base method.
func (m *MockStream) GetNasdaqClose() (*entity.YahooPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNasdaqClose")
	ret0, _ := ret[0].(*entity.YahooPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNasdaqClose indicates an expected call of GetNasdaqClose.
func (mr *MockStreamMockRecorder) GetNasdaqClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNasdaqClose", reflect.TypeOf((*MockStream)(nil).GetNasdaqClose))
}

// GetNasdaqFutureClose mocks base method.
func (m *MockStream) GetNasdaqFutureClose() (*entity.YahooPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNasdaqFutureClose")
	ret0, _ := ret[0].(*entity.YahooPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNasdaqFutureClose indicates an expected call of GetNasdaqFutureClose.
func (mr *MockStreamMockRecorder) GetNasdaqFutureClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNasdaqFutureClose", reflect.TypeOf((*MockStream)(nil).GetNasdaqFutureClose))
}

// GetOTCSnapshot mocks base method.
func (m *MockStream) GetOTCSnapshot(ctx context.Context) (*entity.StockSnapShot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOTCSnapshot", ctx)
	ret0, _ := ret[0].(*entity.StockSnapShot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOTCSnapshot indicates an expected call of GetOTCSnapshot.
func (mr *MockStreamMockRecorder) GetOTCSnapshot(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOTCSnapshot", reflect.TypeOf((*MockStream)(nil).GetOTCSnapshot), ctx)
}

// GetStockSnapshotByNumArr mocks base method.
func (m *MockStream) GetStockSnapshotByNumArr(stockNumArr []string) ([]*entity.StockSnapShot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockSnapshotByNumArr", stockNumArr)
	ret0, _ := ret[0].([]*entity.StockSnapShot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockSnapshotByNumArr indicates an expected call of GetStockSnapshotByNumArr.
func (mr *MockStreamMockRecorder) GetStockSnapshotByNumArr(stockNumArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockSnapshotByNumArr", reflect.TypeOf((*MockStream)(nil).GetStockSnapshotByNumArr), stockNumArr)
}

// GetTSESnapshot mocks base method.
func (m *MockStream) GetTSESnapshot(ctx context.Context) (*entity.StockSnapShot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTSESnapshot", ctx)
	ret0, _ := ret[0].(*entity.StockSnapShot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTSESnapshot indicates an expected call of GetTSESnapshot.
func (mr *MockStreamMockRecorder) GetTSESnapshot(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTSESnapshot", reflect.TypeOf((*MockStream)(nil).GetTSESnapshot), ctx)
}

// GetTradeIndex mocks base method.
func (m *MockStream) GetTradeIndex() *entity.TradeIndex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradeIndex")
	ret0, _ := ret[0].(*entity.TradeIndex)
	return ret0
}

// GetTradeIndex indicates an expected call of GetTradeIndex.
func (mr *MockStreamMockRecorder) GetTradeIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradeIndex", reflect.TypeOf((*MockStream)(nil).GetTradeIndex))
}

// NewFutureRealTimeConnection mocks base method.
func (m *MockStream) NewFutureRealTimeConnection(tickChan chan *entity.RealTimeFutureTick, connectionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewFutureRealTimeConnection", tickChan, connectionID)
}

// NewFutureRealTimeConnection indicates an expected call of NewFutureRealTimeConnection.
func (mr *MockStreamMockRecorder) NewFutureRealTimeConnection(tickChan, connectionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFutureRealTimeConnection", reflect.TypeOf((*MockStream)(nil).NewFutureRealTimeConnection), tickChan, connectionID)
}

// NewOrderStatusConnection mocks base method.
func (m *MockStream) NewOrderStatusConnection(orderStatusChan chan interface{}, connectionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewOrderStatusConnection", orderStatusChan, connectionID)
}

// NewOrderStatusConnection indicates an expected call of NewOrderStatusConnection.
func (mr *MockStreamMockRecorder) NewOrderStatusConnection(orderStatusChan, connectionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewOrderStatusConnection", reflect.TypeOf((*MockStream)(nil).NewOrderStatusConnection), orderStatusChan, connectionID)
}

// ReceiveEvent mocks base method.
func (m *MockStream) ReceiveEvent(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceiveEvent", ctx)
}

// ReceiveEvent indicates an expected call of ReceiveEvent.
func (mr *MockStreamMockRecorder) ReceiveEvent(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveEvent", reflect.TypeOf((*MockStream)(nil).ReceiveEvent), ctx)
}

// ReceiveOrderStatus mocks base method.
func (m *MockStream) ReceiveOrderStatus(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceiveOrderStatus", ctx)
}

// ReceiveOrderStatus indicates an expected call of ReceiveOrderStatus.
func (mr *MockStreamMockRecorder) ReceiveOrderStatus(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveOrderStatus", reflect.TypeOf((*MockStream)(nil).ReceiveOrderStatus), ctx)
}

// ReceiveStreamData mocks base method.
func (m *MockStream) ReceiveStreamData(ctx context.Context, targetArr []*entity.StockTarget) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceiveStreamData", ctx, targetArr)
}

// ReceiveStreamData indicates an expected call of ReceiveStreamData.
func (mr *MockStreamMockRecorder) ReceiveStreamData(ctx, targetArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveStreamData", reflect.TypeOf((*MockStream)(nil).ReceiveStreamData), ctx, targetArr)
}

// TurnFutureTradeSwitch mocks base method.
func (m *MockStream) TurnFutureTradeSwitch(ctx context.Context, allow bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TurnFutureTradeSwitch", ctx, allow)
}

// TurnFutureTradeSwitch indicates an expected call of TurnFutureTradeSwitch.
func (mr *MockStreamMockRecorder) TurnFutureTradeSwitch(ctx, allow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TurnFutureTradeSwitch", reflect.TypeOf((*MockStream)(nil).TurnFutureTradeSwitch), ctx, allow)
}

// MockStreamRepo is a mock of StreamRepo interface.
type MockStreamRepo struct {
	ctrl     *gomock.Controller
	recorder *MockStreamRepoMockRecorder
}

// MockStreamRepoMockRecorder is the mock recorder for MockStreamRepo.
type MockStreamRepoMockRecorder struct {
	mock *MockStreamRepo
}

// NewMockStreamRepo creates a new mock instance.
func NewMockStreamRepo(ctrl *gomock.Controller) *MockStreamRepo {
	mock := &MockStreamRepo{ctrl: ctrl}
	mock.recorder = &MockStreamRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamRepo) EXPECT() *MockStreamRepoMockRecorder {
	return m.recorder
}

// InsertEvent mocks base method.
func (m *MockStreamRepo) InsertEvent(ctx context.Context, t *entity.SinopacEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertEvent", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertEvent indicates an expected call of InsertEvent.
func (mr *MockStreamRepoMockRecorder) InsertEvent(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEvent", reflect.TypeOf((*MockStreamRepo)(nil).InsertEvent), ctx, t)
}

// MockStreamgRPCAPI is a mock of StreamgRPCAPI interface.
type MockStreamgRPCAPI struct {
	ctrl     *gomock.Controller
	recorder *MockStreamgRPCAPIMockRecorder
}

// MockStreamgRPCAPIMockRecorder is the mock recorder for MockStreamgRPCAPI.
type MockStreamgRPCAPIMockRecorder struct {
	mock *MockStreamgRPCAPI
}

// NewMockStreamgRPCAPI creates a new mock instance.
func NewMockStreamgRPCAPI(ctrl *gomock.Controller) *MockStreamgRPCAPI {
	mock := &MockStreamgRPCAPI{ctrl: ctrl}
	mock.recorder = &MockStreamgRPCAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamgRPCAPI) EXPECT() *MockStreamgRPCAPIMockRecorder {
	return m.recorder
}

// GetAllStockSnapshot mocks base method.
func (m *MockStreamgRPCAPI) GetAllStockSnapshot() ([]*pb.SnapshotMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStockSnapshot")
	ret0, _ := ret[0].([]*pb.SnapshotMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStockSnapshot indicates an expected call of GetAllStockSnapshot.
func (mr *MockStreamgRPCAPIMockRecorder) GetAllStockSnapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStockSnapshot", reflect.TypeOf((*MockStreamgRPCAPI)(nil).GetAllStockSnapshot))
}

// GetFutureSnapshotByCode mocks base method.
func (m *MockStreamgRPCAPI) GetFutureSnapshotByCode(code string) (*pb.SnapshotMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFutureSnapshotByCode", code)
	ret0, _ := ret[0].(*pb.SnapshotMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFutureSnapshotByCode indicates an expected call of GetFutureSnapshotByCode.
func (mr *MockStreamgRPCAPIMockRecorder) GetFutureSnapshotByCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFutureSnapshotByCode", reflect.TypeOf((*MockStreamgRPCAPI)(nil).GetFutureSnapshotByCode), code)
}

// GetNasdaq mocks base method.
func (m *MockStreamgRPCAPI) GetNasdaq() (*pb.YahooFinancePrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNasdaq")
	ret0, _ := ret[0].(*pb.YahooFinancePrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNasdaq indicates an expected call of GetNasdaq.
func (mr *MockStreamgRPCAPIMockRecorder) GetNasdaq() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNasdaq", reflect.TypeOf((*MockStreamgRPCAPI)(nil).GetNasdaq))
}

// GetNasdaqFuture mocks base method.
func (m *MockStreamgRPCAPI) GetNasdaqFuture() (*pb.YahooFinancePrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNasdaqFuture")
	ret0, _ := ret[0].(*pb.YahooFinancePrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNasdaqFuture indicates an expected call of GetNasdaqFuture.
func (mr *MockStreamgRPCAPIMockRecorder) GetNasdaqFuture() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNasdaqFuture", reflect.TypeOf((*MockStreamgRPCAPI)(nil).GetNasdaqFuture))
}

// GetStockSnapshotByNumArr mocks base method.
func (m *MockStreamgRPCAPI) GetStockSnapshotByNumArr(stockNumArr []string) ([]*pb.SnapshotMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockSnapshotByNumArr", stockNumArr)
	ret0, _ := ret[0].([]*pb.SnapshotMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockSnapshotByNumArr indicates an expected call of GetStockSnapshotByNumArr.
func (mr *MockStreamgRPCAPIMockRecorder) GetStockSnapshotByNumArr(stockNumArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockSnapshotByNumArr", reflect.TypeOf((*MockStreamgRPCAPI)(nil).GetStockSnapshotByNumArr), stockNumArr)
}

// GetStockSnapshotOTC mocks base method.
func (m *MockStreamgRPCAPI) GetStockSnapshotOTC() (*pb.SnapshotMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockSnapshotOTC")
	ret0, _ := ret[0].(*pb.SnapshotMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockSnapshotOTC indicates an expected call of GetStockSnapshotOTC.
func (mr *MockStreamgRPCAPIMockRecorder) GetStockSnapshotOTC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockSnapshotOTC", reflect.TypeOf((*MockStreamgRPCAPI)(nil).GetStockSnapshotOTC))
}

// GetStockSnapshotTSE mocks base method.
func (m *MockStreamgRPCAPI) GetStockSnapshotTSE() (*pb.SnapshotMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockSnapshotTSE")
	ret0, _ := ret[0].(*pb.SnapshotMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockSnapshotTSE indicates an expected call of GetStockSnapshotTSE.
func (mr *MockStreamgRPCAPIMockRecorder) GetStockSnapshotTSE() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockSnapshotTSE", reflect.TypeOf((*MockStreamgRPCAPI)(nil).GetStockSnapshotTSE))
}

// MockStreamRabbit is a mock of StreamRabbit interface.
type MockStreamRabbit struct {
	ctrl     *gomock.Controller
	recorder *MockStreamRabbitMockRecorder
}

// MockStreamRabbitMockRecorder is the mock recorder for MockStreamRabbit.
type MockStreamRabbitMockRecorder struct {
	mock *MockStreamRabbit
}

// NewMockStreamRabbit creates a new mock instance.
func NewMockStreamRabbit(ctrl *gomock.Controller) *MockStreamRabbit {
	mock := &MockStreamRabbit{ctrl: ctrl}
	mock.recorder = &MockStreamRabbitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamRabbit) EXPECT() *MockStreamRabbitMockRecorder {
	return m.recorder
}

// AddFutureTickChan mocks base method.
func (m *MockStreamRabbit) AddFutureTickChan(tickChan chan *entity.RealTimeFutureTick, connectionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFutureTickChan", tickChan, connectionID)
}

// AddFutureTickChan indicates an expected call of AddFutureTickChan.
func (mr *MockStreamRabbitMockRecorder) AddFutureTickChan(tickChan, connectionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFutureTickChan", reflect.TypeOf((*MockStreamRabbit)(nil).AddFutureTickChan), tickChan, connectionID)
}

// AddOrderStatusChan mocks base method.
func (m *MockStreamRabbit) AddOrderStatusChan(orderStatusChan chan interface{}, connectionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddOrderStatusChan", orderStatusChan, connectionID)
}

// AddOrderStatusChan indicates an expected call of AddOrderStatusChan.
func (mr *MockStreamRabbitMockRecorder) AddOrderStatusChan(orderStatusChan, connectionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrderStatusChan", reflect.TypeOf((*MockStreamRabbit)(nil).AddOrderStatusChan), orderStatusChan, connectionID)
}

// EventConsumer mocks base method.
func (m *MockStreamRabbit) EventConsumer(eventChan chan *entity.SinopacEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EventConsumer", eventChan)
}

// EventConsumer indicates an expected call of EventConsumer.
func (mr *MockStreamRabbitMockRecorder) EventConsumer(eventChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventConsumer", reflect.TypeOf((*MockStreamRabbit)(nil).EventConsumer), eventChan)
}

// FillAllBasic mocks base method.
func (m *MockStreamRabbit) FillAllBasic(allStockMap map[string]*entity.Stock, allFutureMap map[string]*entity.Future) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FillAllBasic", allStockMap, allFutureMap)
}

// FillAllBasic indicates an expected call of FillAllBasic.
func (mr *MockStreamRabbitMockRecorder) FillAllBasic(allStockMap, allFutureMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FillAllBasic", reflect.TypeOf((*MockStreamRabbit)(nil).FillAllBasic), allStockMap, allFutureMap)
}

// FutureBidAskConsumer mocks base method.
func (m *MockStreamRabbit) FutureBidAskConsumer(code string, bidAskChan chan *entity.FutureRealTimeBidAsk) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FutureBidAskConsumer", code, bidAskChan)
}

// FutureBidAskConsumer indicates an expected call of FutureBidAskConsumer.
func (mr *MockStreamRabbitMockRecorder) FutureBidAskConsumer(code, bidAskChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FutureBidAskConsumer", reflect.TypeOf((*MockStreamRabbit)(nil).FutureBidAskConsumer), code, bidAskChan)
}

// FutureTickConsumer mocks base method.
func (m *MockStreamRabbit) FutureTickConsumer(code string, tickChan chan *entity.RealTimeFutureTick) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FutureTickConsumer", code, tickChan)
}

// FutureTickConsumer indicates an expected call of FutureTickConsumer.
func (mr *MockStreamRabbitMockRecorder) FutureTickConsumer(code, tickChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FutureTickConsumer", reflect.TypeOf((*MockStreamRabbit)(nil).FutureTickConsumer), code, tickChan)
}

// OrderStatusConsumer mocks base method.
func (m *MockStreamRabbit) OrderStatusConsumer(orderStatusChan chan interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OrderStatusConsumer", orderStatusChan)
}

// OrderStatusConsumer indicates an expected call of OrderStatusConsumer.
func (mr *MockStreamRabbitMockRecorder) OrderStatusConsumer(orderStatusChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderStatusConsumer", reflect.TypeOf((*MockStreamRabbit)(nil).OrderStatusConsumer), orderStatusChan)
}

// RemoveFutureTickChan mocks base method.
func (m *MockStreamRabbit) RemoveFutureTickChan(connectionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveFutureTickChan", connectionID)
}

// RemoveFutureTickChan indicates an expected call of RemoveFutureTickChan.
func (mr *MockStreamRabbitMockRecorder) RemoveFutureTickChan(connectionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFutureTickChan", reflect.TypeOf((*MockStreamRabbit)(nil).RemoveFutureTickChan), connectionID)
}

// RemoveOrderStatusChan mocks base method.
func (m *MockStreamRabbit) RemoveOrderStatusChan(connectionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveOrderStatusChan", connectionID)
}

// RemoveOrderStatusChan indicates an expected call of RemoveOrderStatusChan.
func (mr *MockStreamRabbitMockRecorder) RemoveOrderStatusChan(connectionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOrderStatusChan", reflect.TypeOf((*MockStreamRabbit)(nil).RemoveOrderStatusChan), connectionID)
}

// StockBidAskConsumer mocks base method.
func (m *MockStreamRabbit) StockBidAskConsumer(stockNum string, bidAskChan chan *entity.RealTimeStockBidAsk) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StockBidAskConsumer", stockNum, bidAskChan)
}

// StockBidAskConsumer indicates an expected call of StockBidAskConsumer.
func (mr *MockStreamRabbitMockRecorder) StockBidAskConsumer(stockNum, bidAskChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StockBidAskConsumer", reflect.TypeOf((*MockStreamRabbit)(nil).StockBidAskConsumer), stockNum, bidAskChan)
}

// TickConsumer mocks base method.
func (m *MockStreamRabbit) TickConsumer(stockNum string, tickChan chan *entity.RealTimeStockTick) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TickConsumer", stockNum, tickChan)
}

// TickConsumer indicates an expected call of TickConsumer.
func (mr *MockStreamRabbitMockRecorder) TickConsumer(stockNum, tickChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TickConsumer", reflect.TypeOf((*MockStreamRabbit)(nil).TickConsumer), stockNum, tickChan)
}

// MockOrder is a mock of Order interface.
type MockOrder struct {
	ctrl     *gomock.Controller
	recorder *MockOrderMockRecorder
}

// MockOrderMockRecorder is the mock recorder for MockOrder.
type MockOrderMockRecorder struct {
	mock *MockOrder
}

// NewMockOrder creates a new mock instance.
func NewMockOrder(ctrl *gomock.Controller) *MockOrder {
	mock := &MockOrder{ctrl: ctrl}
	mock.recorder = &MockOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrder) EXPECT() *MockOrderMockRecorder {
	return m.recorder
}

// BuyFuture mocks base method.
func (m *MockOrder) BuyFuture(order *entity.FutureOrder) (string, entity.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyFuture", order)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(entity.OrderStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BuyFuture indicates an expected call of BuyFuture.
func (mr *MockOrderMockRecorder) BuyFuture(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyFuture", reflect.TypeOf((*MockOrder)(nil).BuyFuture), order)
}

// BuyLaterFuture mocks base method.
func (m *MockOrder) BuyLaterFuture(order *entity.FutureOrder) (string, entity.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyLaterFuture", order)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(entity.OrderStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BuyLaterFuture indicates an expected call of BuyLaterFuture.
func (mr *MockOrderMockRecorder) BuyLaterFuture(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyLaterFuture", reflect.TypeOf((*MockOrder)(nil).BuyLaterFuture), order)
}

// CalculateBuyCost mocks base method.
func (m *MockOrder) CalculateBuyCost(price float64, quantity int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateBuyCost", price, quantity)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CalculateBuyCost indicates an expected call of CalculateBuyCost.
func (mr *MockOrderMockRecorder) CalculateBuyCost(price, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateBuyCost", reflect.TypeOf((*MockOrder)(nil).CalculateBuyCost), price, quantity)
}

// CalculateSellCost mocks base method.
func (m *MockOrder) CalculateSellCost(price float64, quantity int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateSellCost", price, quantity)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CalculateSellCost indicates an expected call of CalculateSellCost.
func (mr *MockOrderMockRecorder) CalculateSellCost(price, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateSellCost", reflect.TypeOf((*MockOrder)(nil).CalculateSellCost), price, quantity)
}

// CalculateTradeDiscount mocks base method.
func (m *MockOrder) CalculateTradeDiscount(price float64, quantity int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateTradeDiscount", price, quantity)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CalculateTradeDiscount indicates an expected call of CalculateTradeDiscount.
func (mr *MockOrderMockRecorder) CalculateTradeDiscount(price, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateTradeDiscount", reflect.TypeOf((*MockOrder)(nil).CalculateTradeDiscount), price, quantity)
}

// CancelFutureOrderID mocks base method.
func (m *MockOrder) CancelFutureOrderID(orderID string) (string, entity.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelFutureOrderID", orderID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(entity.OrderStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CancelFutureOrderID indicates an expected call of CancelFutureOrderID.
func (mr *MockOrderMockRecorder) CancelFutureOrderID(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelFutureOrderID", reflect.TypeOf((*MockOrder)(nil).CancelFutureOrderID), orderID)
}

// GetAllFutureOrder mocks base method.
func (m *MockOrder) GetAllFutureOrder(ctx context.Context) ([]*entity.FutureOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFutureOrder", ctx)
	ret0, _ := ret[0].([]*entity.FutureOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFutureOrder indicates an expected call of GetAllFutureOrder.
func (mr *MockOrderMockRecorder) GetAllFutureOrder(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFutureOrder", reflect.TypeOf((*MockOrder)(nil).GetAllFutureOrder), ctx)
}

// GetAllFutureTradeBalance mocks base method.
func (m *MockOrder) GetAllFutureTradeBalance(ctx context.Context) ([]*entity.FutureTradeBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFutureTradeBalance", ctx)
	ret0, _ := ret[0].([]*entity.FutureTradeBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFutureTradeBalance indicates an expected call of GetAllFutureTradeBalance.
func (mr *MockOrderMockRecorder) GetAllFutureTradeBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFutureTradeBalance", reflect.TypeOf((*MockOrder)(nil).GetAllFutureTradeBalance), ctx)
}

// GetAllStockOrder mocks base method.
func (m *MockOrder) GetAllStockOrder(ctx context.Context) ([]*entity.StockOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStockOrder", ctx)
	ret0, _ := ret[0].([]*entity.StockOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStockOrder indicates an expected call of GetAllStockOrder.
func (mr *MockOrderMockRecorder) GetAllStockOrder(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStockOrder", reflect.TypeOf((*MockOrder)(nil).GetAllStockOrder), ctx)
}

// GetAllStockTradeBalance mocks base method.
func (m *MockOrder) GetAllStockTradeBalance(ctx context.Context) ([]*entity.StockTradeBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStockTradeBalance", ctx)
	ret0, _ := ret[0].([]*entity.StockTradeBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStockTradeBalance indicates an expected call of GetAllStockTradeBalance.
func (mr *MockOrderMockRecorder) GetAllStockTradeBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStockTradeBalance", reflect.TypeOf((*MockOrder)(nil).GetAllStockTradeBalance), ctx)
}

// GetFutureOrderByTradeDay mocks base method.
func (m *MockOrder) GetFutureOrderByTradeDay(ctx context.Context, tradeDay string) ([]*entity.FutureOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFutureOrderByTradeDay", ctx, tradeDay)
	ret0, _ := ret[0].([]*entity.FutureOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFutureOrderByTradeDay indicates an expected call of GetFutureOrderByTradeDay.
func (mr *MockOrderMockRecorder) GetFutureOrderByTradeDay(ctx, tradeDay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFutureOrderByTradeDay", reflect.TypeOf((*MockOrder)(nil).GetFutureOrderByTradeDay), ctx, tradeDay)
}

// GetFuturePosition mocks base method.
func (m *MockOrder) GetFuturePosition() ([]*entity.FuturePosition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFuturePosition")
	ret0, _ := ret[0].([]*entity.FuturePosition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFuturePosition indicates an expected call of GetFuturePosition.
func (mr *MockOrderMockRecorder) GetFuturePosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFuturePosition", reflect.TypeOf((*MockOrder)(nil).GetFuturePosition))
}

// IsFutureTradeTime mocks base method.
func (m *MockOrder) IsFutureTradeTime() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFutureTradeTime")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFutureTradeTime indicates an expected call of IsFutureTradeTime.
func (mr *MockOrderMockRecorder) IsFutureTradeTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFutureTradeTime", reflect.TypeOf((*MockOrder)(nil).IsFutureTradeTime))
}

// ManualInsertFutureOrder mocks base method.
func (m *MockOrder) ManualInsertFutureOrder(ctx context.Context, order *entity.FutureOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManualInsertFutureOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// ManualInsertFutureOrder indicates an expected call of ManualInsertFutureOrder.
func (mr *MockOrderMockRecorder) ManualInsertFutureOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManualInsertFutureOrder", reflect.TypeOf((*MockOrder)(nil).ManualInsertFutureOrder), ctx, order)
}

// MoveFutureOrderToLatestTradeDay mocks base method.
func (m *MockOrder) MoveFutureOrderToLatestTradeDay(ctx context.Context, orderID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveFutureOrderToLatestTradeDay", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveFutureOrderToLatestTradeDay indicates an expected call of MoveFutureOrderToLatestTradeDay.
func (mr *MockOrderMockRecorder) MoveFutureOrderToLatestTradeDay(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveFutureOrderToLatestTradeDay", reflect.TypeOf((*MockOrder)(nil).MoveFutureOrderToLatestTradeDay), ctx, orderID)
}

// MoveStockOrderToLatestTradeDay mocks base method.
func (m *MockOrder) MoveStockOrderToLatestTradeDay(ctx context.Context, orderID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveStockOrderToLatestTradeDay", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveStockOrderToLatestTradeDay indicates an expected call of MoveStockOrderToLatestTradeDay.
func (mr *MockOrderMockRecorder) MoveStockOrderToLatestTradeDay(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveStockOrderToLatestTradeDay", reflect.TypeOf((*MockOrder)(nil).MoveStockOrderToLatestTradeDay), ctx, orderID)
}

// SellFirstFuture mocks base method.
func (m *MockOrder) SellFirstFuture(order *entity.FutureOrder) (string, entity.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SellFirstFuture", order)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(entity.OrderStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SellFirstFuture indicates an expected call of SellFirstFuture.
func (mr *MockOrderMockRecorder) SellFirstFuture(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SellFirstFuture", reflect.TypeOf((*MockOrder)(nil).SellFirstFuture), order)
}

// SellFuture mocks base method.
func (m *MockOrder) SellFuture(order *entity.FutureOrder) (string, entity.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SellFuture", order)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(entity.OrderStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SellFuture indicates an expected call of SellFuture.
func (mr *MockOrderMockRecorder) SellFuture(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SellFuture", reflect.TypeOf((*MockOrder)(nil).SellFuture), order)
}

// UpdateTradeBalanceByTradeDay mocks base method.
func (m *MockOrder) UpdateTradeBalanceByTradeDay(ctx context.Context, date string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTradeBalanceByTradeDay", ctx, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTradeBalanceByTradeDay indicates an expected call of UpdateTradeBalanceByTradeDay.
func (mr *MockOrderMockRecorder) UpdateTradeBalanceByTradeDay(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTradeBalanceByTradeDay", reflect.TypeOf((*MockOrder)(nil).UpdateTradeBalanceByTradeDay), ctx, date)
}

// MockOrderRepo is a mock of OrderRepo interface.
type MockOrderRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepoMockRecorder
}

// MockOrderRepoMockRecorder is the mock recorder for MockOrderRepo.
type MockOrderRepoMockRecorder struct {
	mock *MockOrderRepo
}

// NewMockOrderRepo creates a new mock instance.
func NewMockOrderRepo(ctrl *gomock.Controller) *MockOrderRepo {
	mock := &MockOrderRepo{ctrl: ctrl}
	mock.recorder = &MockOrderRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepo) EXPECT() *MockOrderRepoMockRecorder {
	return m.recorder
}

// InsertOrUpdateFutureOrderByOrderID mocks base method.
func (m *MockOrderRepo) InsertOrUpdateFutureOrderByOrderID(ctx context.Context, t *entity.FutureOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateFutureOrderByOrderID", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateFutureOrderByOrderID indicates an expected call of InsertOrUpdateFutureOrderByOrderID.
func (mr *MockOrderRepoMockRecorder) InsertOrUpdateFutureOrderByOrderID(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateFutureOrderByOrderID", reflect.TypeOf((*MockOrderRepo)(nil).InsertOrUpdateFutureOrderByOrderID), ctx, t)
}

// InsertOrUpdateFutureTradeBalance mocks base method.
func (m *MockOrderRepo) InsertOrUpdateFutureTradeBalance(ctx context.Context, t *entity.FutureTradeBalance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateFutureTradeBalance", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateFutureTradeBalance indicates an expected call of InsertOrUpdateFutureTradeBalance.
func (mr *MockOrderRepoMockRecorder) InsertOrUpdateFutureTradeBalance(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateFutureTradeBalance", reflect.TypeOf((*MockOrderRepo)(nil).InsertOrUpdateFutureTradeBalance), ctx, t)
}

// InsertOrUpdateOrderByOrderID mocks base method.
func (m *MockOrderRepo) InsertOrUpdateOrderByOrderID(ctx context.Context, t *entity.StockOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateOrderByOrderID", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateOrderByOrderID indicates an expected call of InsertOrUpdateOrderByOrderID.
func (mr *MockOrderRepoMockRecorder) InsertOrUpdateOrderByOrderID(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateOrderByOrderID", reflect.TypeOf((*MockOrderRepo)(nil).InsertOrUpdateOrderByOrderID), ctx, t)
}

// InsertOrUpdateStockTradeBalance mocks base method.
func (m *MockOrderRepo) InsertOrUpdateStockTradeBalance(ctx context.Context, t *entity.StockTradeBalance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateStockTradeBalance", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateStockTradeBalance indicates an expected call of InsertOrUpdateStockTradeBalance.
func (mr *MockOrderRepoMockRecorder) InsertOrUpdateStockTradeBalance(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateStockTradeBalance", reflect.TypeOf((*MockOrderRepo)(nil).InsertOrUpdateStockTradeBalance), ctx, t)
}

// QueryAllFutureOrder mocks base method.
func (m *MockOrderRepo) QueryAllFutureOrder(ctx context.Context) ([]*entity.FutureOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllFutureOrder", ctx)
	ret0, _ := ret[0].([]*entity.FutureOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllFutureOrder indicates an expected call of QueryAllFutureOrder.
func (mr *MockOrderRepoMockRecorder) QueryAllFutureOrder(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllFutureOrder", reflect.TypeOf((*MockOrderRepo)(nil).QueryAllFutureOrder), ctx)
}

// QueryAllFutureOrderByDate mocks base method.
func (m *MockOrderRepo) QueryAllFutureOrderByDate(ctx context.Context, timeTange []time.Time) ([]*entity.FutureOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllFutureOrderByDate", ctx, timeTange)
	ret0, _ := ret[0].([]*entity.FutureOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllFutureOrderByDate indicates an expected call of QueryAllFutureOrderByDate.
func (mr *MockOrderRepoMockRecorder) QueryAllFutureOrderByDate(ctx, timeTange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllFutureOrderByDate", reflect.TypeOf((*MockOrderRepo)(nil).QueryAllFutureOrderByDate), ctx, timeTange)
}

// QueryAllFutureTradeBalance mocks base method.
func (m *MockOrderRepo) QueryAllFutureTradeBalance(ctx context.Context) ([]*entity.FutureTradeBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllFutureTradeBalance", ctx)
	ret0, _ := ret[0].([]*entity.FutureTradeBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllFutureTradeBalance indicates an expected call of QueryAllFutureTradeBalance.
func (mr *MockOrderRepoMockRecorder) QueryAllFutureTradeBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllFutureTradeBalance", reflect.TypeOf((*MockOrderRepo)(nil).QueryAllFutureTradeBalance), ctx)
}

// QueryAllStockOrder mocks base method.
func (m *MockOrderRepo) QueryAllStockOrder(ctx context.Context) ([]*entity.StockOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllStockOrder", ctx)
	ret0, _ := ret[0].([]*entity.StockOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllStockOrder indicates an expected call of QueryAllStockOrder.
func (mr *MockOrderRepoMockRecorder) QueryAllStockOrder(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllStockOrder", reflect.TypeOf((*MockOrderRepo)(nil).QueryAllStockOrder), ctx)
}

// QueryAllStockOrderByDate mocks base method.
func (m *MockOrderRepo) QueryAllStockOrderByDate(ctx context.Context, timeTange []time.Time) ([]*entity.StockOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllStockOrderByDate", ctx, timeTange)
	ret0, _ := ret[0].([]*entity.StockOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllStockOrderByDate indicates an expected call of QueryAllStockOrderByDate.
func (mr *MockOrderRepoMockRecorder) QueryAllStockOrderByDate(ctx, timeTange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllStockOrderByDate", reflect.TypeOf((*MockOrderRepo)(nil).QueryAllStockOrderByDate), ctx, timeTange)
}

// QueryAllStockTradeBalance mocks base method.
func (m *MockOrderRepo) QueryAllStockTradeBalance(ctx context.Context) ([]*entity.StockTradeBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllStockTradeBalance", ctx)
	ret0, _ := ret[0].([]*entity.StockTradeBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllStockTradeBalance indicates an expected call of QueryAllStockTradeBalance.
func (mr *MockOrderRepoMockRecorder) QueryAllStockTradeBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllStockTradeBalance", reflect.TypeOf((*MockOrderRepo)(nil).QueryAllStockTradeBalance), ctx)
}

// QueryFutureOrderByID mocks base method.
func (m *MockOrderRepo) QueryFutureOrderByID(ctx context.Context, orderID string) (*entity.FutureOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFutureOrderByID", ctx, orderID)
	ret0, _ := ret[0].(*entity.FutureOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFutureOrderByID indicates an expected call of QueryFutureOrderByID.
func (mr *MockOrderRepoMockRecorder) QueryFutureOrderByID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFutureOrderByID", reflect.TypeOf((*MockOrderRepo)(nil).QueryFutureOrderByID), ctx, orderID)
}

// QueryFutureTradeBalanceByDate mocks base method.
func (m *MockOrderRepo) QueryFutureTradeBalanceByDate(ctx context.Context, date time.Time) (*entity.FutureTradeBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFutureTradeBalanceByDate", ctx, date)
	ret0, _ := ret[0].(*entity.FutureTradeBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFutureTradeBalanceByDate indicates an expected call of QueryFutureTradeBalanceByDate.
func (mr *MockOrderRepoMockRecorder) QueryFutureTradeBalanceByDate(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFutureTradeBalanceByDate", reflect.TypeOf((*MockOrderRepo)(nil).QueryFutureTradeBalanceByDate), ctx, date)
}

// QueryStockOrderByID mocks base method.
func (m *MockOrderRepo) QueryStockOrderByID(ctx context.Context, orderID string) (*entity.StockOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryStockOrderByID", ctx, orderID)
	ret0, _ := ret[0].(*entity.StockOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryStockOrderByID indicates an expected call of QueryStockOrderByID.
func (mr *MockOrderRepoMockRecorder) QueryStockOrderByID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryStockOrderByID", reflect.TypeOf((*MockOrderRepo)(nil).QueryStockOrderByID), ctx, orderID)
}

// QueryStockTradeBalanceByDate mocks base method.
func (m *MockOrderRepo) QueryStockTradeBalanceByDate(ctx context.Context, date time.Time) (*entity.StockTradeBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryStockTradeBalanceByDate", ctx, date)
	ret0, _ := ret[0].(*entity.StockTradeBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryStockTradeBalanceByDate indicates an expected call of QueryStockTradeBalanceByDate.
func (mr *MockOrderRepoMockRecorder) QueryStockTradeBalanceByDate(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryStockTradeBalanceByDate", reflect.TypeOf((*MockOrderRepo)(nil).QueryStockTradeBalanceByDate), ctx, date)
}

// MockOrdergRPCAPI is a mock of OrdergRPCAPI interface.
type MockOrdergRPCAPI struct {
	ctrl     *gomock.Controller
	recorder *MockOrdergRPCAPIMockRecorder
}

// MockOrdergRPCAPIMockRecorder is the mock recorder for MockOrdergRPCAPI.
type MockOrdergRPCAPIMockRecorder struct {
	mock *MockOrdergRPCAPI
}

// NewMockOrdergRPCAPI creates a new mock instance.
func NewMockOrdergRPCAPI(ctrl *gomock.Controller) *MockOrdergRPCAPI {
	mock := &MockOrdergRPCAPI{ctrl: ctrl}
	mock.recorder = &MockOrdergRPCAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrdergRPCAPI) EXPECT() *MockOrdergRPCAPIMockRecorder {
	return m.recorder
}

// BuyFuture mocks base method.
func (m *MockOrdergRPCAPI) BuyFuture(order *entity.FutureOrder, sim bool) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyFuture", order, sim)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuyFuture indicates an expected call of BuyFuture.
func (mr *MockOrdergRPCAPIMockRecorder) BuyFuture(order, sim interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyFuture", reflect.TypeOf((*MockOrdergRPCAPI)(nil).BuyFuture), order, sim)
}

// BuyStock mocks base method.
func (m *MockOrdergRPCAPI) BuyStock(order *entity.StockOrder, sim bool) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyStock", order, sim)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuyStock indicates an expected call of BuyStock.
func (mr *MockOrdergRPCAPIMockRecorder) BuyStock(order, sim interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyStock", reflect.TypeOf((*MockOrdergRPCAPI)(nil).BuyStock), order, sim)
}

// CancelFuture mocks base method.
func (m *MockOrdergRPCAPI) CancelFuture(orderID string, sim bool) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelFuture", orderID, sim)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelFuture indicates an expected call of CancelFuture.
func (mr *MockOrdergRPCAPIMockRecorder) CancelFuture(orderID, sim interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelFuture", reflect.TypeOf((*MockOrdergRPCAPI)(nil).CancelFuture), orderID, sim)
}

// CancelStock mocks base method.
func (m *MockOrdergRPCAPI) CancelStock(orderID string, sim bool) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelStock", orderID, sim)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelStock indicates an expected call of CancelStock.
func (mr *MockOrdergRPCAPIMockRecorder) CancelStock(orderID, sim interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelStock", reflect.TypeOf((*MockOrdergRPCAPI)(nil).CancelStock), orderID, sim)
}

// GetFuturePosition mocks base method.
func (m *MockOrdergRPCAPI) GetFuturePosition() (*pb.FuturePositionArr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFuturePosition")
	ret0, _ := ret[0].(*pb.FuturePositionArr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFuturePosition indicates an expected call of GetFuturePosition.
func (mr *MockOrdergRPCAPIMockRecorder) GetFuturePosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFuturePosition", reflect.TypeOf((*MockOrdergRPCAPI)(nil).GetFuturePosition))
}

// GetNonBlockOrderStatusArr mocks base method.
func (m *MockOrdergRPCAPI) GetNonBlockOrderStatusArr() (*pb.ErrorMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonBlockOrderStatusArr")
	ret0, _ := ret[0].(*pb.ErrorMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNonBlockOrderStatusArr indicates an expected call of GetNonBlockOrderStatusArr.
func (mr *MockOrdergRPCAPIMockRecorder) GetNonBlockOrderStatusArr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonBlockOrderStatusArr", reflect.TypeOf((*MockOrdergRPCAPI)(nil).GetNonBlockOrderStatusArr))
}

// GetOrderStatusArrFromMQ mocks base method.
func (m *MockOrdergRPCAPI) GetOrderStatusArrFromMQ(sim bool) (*pb.ErrorMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderStatusArrFromMQ", sim)
	ret0, _ := ret[0].(*pb.ErrorMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderStatusArrFromMQ indicates an expected call of GetOrderStatusArrFromMQ.
func (mr *MockOrdergRPCAPIMockRecorder) GetOrderStatusArrFromMQ(sim interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderStatusArrFromMQ", reflect.TypeOf((*MockOrdergRPCAPI)(nil).GetOrderStatusArrFromMQ), sim)
}

// GetOrderStatusByID mocks base method.
func (m *MockOrdergRPCAPI) GetOrderStatusByID(orderID string, sim bool) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderStatusByID", orderID, sim)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderStatusByID indicates an expected call of GetOrderStatusByID.
func (mr *MockOrdergRPCAPIMockRecorder) GetOrderStatusByID(orderID, sim interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderStatusByID", reflect.TypeOf((*MockOrdergRPCAPI)(nil).GetOrderStatusByID), orderID, sim)
}

// SellFirstFuture mocks base method.
func (m *MockOrdergRPCAPI) SellFirstFuture(order *entity.FutureOrder, sim bool) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SellFirstFuture", order, sim)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SellFirstFuture indicates an expected call of SellFirstFuture.
func (mr *MockOrdergRPCAPIMockRecorder) SellFirstFuture(order, sim interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SellFirstFuture", reflect.TypeOf((*MockOrdergRPCAPI)(nil).SellFirstFuture), order, sim)
}

// SellFirstStock mocks base method.
func (m *MockOrdergRPCAPI) SellFirstStock(order *entity.StockOrder, sim bool) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SellFirstStock", order, sim)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SellFirstStock indicates an expected call of SellFirstStock.
func (mr *MockOrdergRPCAPIMockRecorder) SellFirstStock(order, sim interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SellFirstStock", reflect.TypeOf((*MockOrdergRPCAPI)(nil).SellFirstStock), order, sim)
}

// SellFuture mocks base method.
func (m *MockOrdergRPCAPI) SellFuture(order *entity.FutureOrder, sim bool) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SellFuture", order, sim)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SellFuture indicates an expected call of SellFuture.
func (mr *MockOrdergRPCAPIMockRecorder) SellFuture(order, sim interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SellFuture", reflect.TypeOf((*MockOrdergRPCAPI)(nil).SellFuture), order, sim)
}

// SellStock mocks base method.
func (m *MockOrdergRPCAPI) SellStock(order *entity.StockOrder, sim bool) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SellStock", order, sim)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SellStock indicates an expected call of SellStock.
func (mr *MockOrdergRPCAPIMockRecorder) SellStock(order, sim interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SellStock", reflect.TypeOf((*MockOrdergRPCAPI)(nil).SellStock), order, sim)
}

// MockAnalyze is a mock of Analyze interface.
type MockAnalyze struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyzeMockRecorder
}

// MockAnalyzeMockRecorder is the mock recorder for MockAnalyze.
type MockAnalyzeMockRecorder struct {
	mock *MockAnalyze
}

// NewMockAnalyze creates a new mock instance.
func NewMockAnalyze(ctrl *gomock.Controller) *MockAnalyze {
	mock := &MockAnalyze{ctrl: ctrl}
	mock.recorder = &MockAnalyzeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalyze) EXPECT() *MockAnalyzeMockRecorder {
	return m.recorder
}

// GetRebornMap mocks base method.
func (m *MockAnalyze) GetRebornMap(ctx context.Context) map[time.Time][]entity.Stock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRebornMap", ctx)
	ret0, _ := ret[0].(map[time.Time][]entity.Stock)
	return ret0
}

// GetRebornMap indicates an expected call of GetRebornMap.
func (mr *MockAnalyzeMockRecorder) GetRebornMap(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRebornMap", reflect.TypeOf((*MockAnalyze)(nil).GetRebornMap), ctx)
}
