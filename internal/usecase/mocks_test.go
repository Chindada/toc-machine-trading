// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"
	time "time"
	entity "tmt/internal/entity"
	pb "tmt/pb"

	gomock "github.com/golang/mock/gomock"
)

// MockAnalyze is a mock of Analyze interface.
type MockAnalyze struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyzeMockRecorder
}

// MockAnalyzeMockRecorder is the mock recorder for MockAnalyze.
type MockAnalyzeMockRecorder struct {
	mock *MockAnalyze
}

// NewMockAnalyze creates a new mock instance.
func NewMockAnalyze(ctrl *gomock.Controller) *MockAnalyze {
	mock := &MockAnalyze{ctrl: ctrl}
	mock.recorder = &MockAnalyzeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalyze) EXPECT() *MockAnalyzeMockRecorder {
	return m.recorder
}

// GetRebornMap mocks base method.
func (m *MockAnalyze) GetRebornMap(ctx context.Context) map[time.Time][]entity.Stock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRebornMap", ctx)
	ret0, _ := ret[0].(map[time.Time][]entity.Stock)
	return ret0
}

// GetRebornMap indicates an expected call of GetRebornMap.
func (mr *MockAnalyzeMockRecorder) GetRebornMap(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRebornMap", reflect.TypeOf((*MockAnalyze)(nil).GetRebornMap), ctx)
}

// MockBasic is a mock of Basic interface.
type MockBasic struct {
	ctrl     *gomock.Controller
	recorder *MockBasicMockRecorder
}

// MockBasicMockRecorder is the mock recorder for MockBasic.
type MockBasicMockRecorder struct {
	mock *MockBasic
}

// NewMockBasic creates a new mock instance.
func NewMockBasic(ctrl *gomock.Controller) *MockBasic {
	mock := &MockBasic{ctrl: ctrl}
	mock.recorder = &MockBasicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBasic) EXPECT() *MockBasicMockRecorder {
	return m.recorder
}

// GetShioajiUsage mocks base method.
func (m *MockBasic) GetShioajiUsage() (*entity.ShioajiUsage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShioajiUsage")
	ret0, _ := ret[0].(*entity.ShioajiUsage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShioajiUsage indicates an expected call of GetShioajiUsage.
func (mr *MockBasicMockRecorder) GetShioajiUsage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShioajiUsage", reflect.TypeOf((*MockBasic)(nil).GetShioajiUsage))
}

// GetStockDetail mocks base method.
func (m *MockBasic) GetStockDetail(stockNum string) *entity.Stock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockDetail", stockNum)
	ret0, _ := ret[0].(*entity.Stock)
	return ret0
}

// GetStockDetail indicates an expected call of GetStockDetail.
func (mr *MockBasicMockRecorder) GetStockDetail(stockNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockDetail", reflect.TypeOf((*MockBasic)(nil).GetStockDetail), stockNum)
}

// MockBasicRepo is a mock of BasicRepo interface.
type MockBasicRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBasicRepoMockRecorder
}

// MockBasicRepoMockRecorder is the mock recorder for MockBasicRepo.
type MockBasicRepoMockRecorder struct {
	mock *MockBasicRepo
}

// NewMockBasicRepo creates a new mock instance.
func NewMockBasicRepo(ctrl *gomock.Controller) *MockBasicRepo {
	mock := &MockBasicRepo{ctrl: ctrl}
	mock.recorder = &MockBasicRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBasicRepo) EXPECT() *MockBasicRepoMockRecorder {
	return m.recorder
}

// InsertOrUpdatetCalendarDateArr mocks base method.
func (m *MockBasicRepo) InsertOrUpdatetCalendarDateArr(ctx context.Context, t []*entity.CalendarDate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdatetCalendarDateArr", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdatetCalendarDateArr indicates an expected call of InsertOrUpdatetCalendarDateArr.
func (mr *MockBasicRepoMockRecorder) InsertOrUpdatetCalendarDateArr(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdatetCalendarDateArr", reflect.TypeOf((*MockBasicRepo)(nil).InsertOrUpdatetCalendarDateArr), ctx, t)
}

// InsertOrUpdatetFutureArr mocks base method.
func (m *MockBasicRepo) InsertOrUpdatetFutureArr(ctx context.Context, t []*entity.Future) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdatetFutureArr", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdatetFutureArr indicates an expected call of InsertOrUpdatetFutureArr.
func (mr *MockBasicRepoMockRecorder) InsertOrUpdatetFutureArr(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdatetFutureArr", reflect.TypeOf((*MockBasicRepo)(nil).InsertOrUpdatetFutureArr), ctx, t)
}

// InsertOrUpdatetOptionArr mocks base method.
func (m *MockBasicRepo) InsertOrUpdatetOptionArr(ctx context.Context, t []*entity.Option) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdatetOptionArr", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdatetOptionArr indicates an expected call of InsertOrUpdatetOptionArr.
func (mr *MockBasicRepoMockRecorder) InsertOrUpdatetOptionArr(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdatetOptionArr", reflect.TypeOf((*MockBasicRepo)(nil).InsertOrUpdatetOptionArr), ctx, t)
}

// InsertOrUpdatetStockArr mocks base method.
func (m *MockBasicRepo) InsertOrUpdatetStockArr(ctx context.Context, t []*entity.Stock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdatetStockArr", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdatetStockArr indicates an expected call of InsertOrUpdatetStockArr.
func (mr *MockBasicRepoMockRecorder) InsertOrUpdatetStockArr(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdatetStockArr", reflect.TypeOf((*MockBasicRepo)(nil).InsertOrUpdatetStockArr), ctx, t)
}

// UpdateAllStockDayTradeToNo mocks base method.
func (m *MockBasicRepo) UpdateAllStockDayTradeToNo(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllStockDayTradeToNo", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAllStockDayTradeToNo indicates an expected call of UpdateAllStockDayTradeToNo.
func (mr *MockBasicRepoMockRecorder) UpdateAllStockDayTradeToNo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllStockDayTradeToNo", reflect.TypeOf((*MockBasicRepo)(nil).UpdateAllStockDayTradeToNo), ctx)
}

// MockBasicgRPCAPI is a mock of BasicgRPCAPI interface.
type MockBasicgRPCAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBasicgRPCAPIMockRecorder
}

// MockBasicgRPCAPIMockRecorder is the mock recorder for MockBasicgRPCAPI.
type MockBasicgRPCAPIMockRecorder struct {
	mock *MockBasicgRPCAPI
}

// NewMockBasicgRPCAPI creates a new mock instance.
func NewMockBasicgRPCAPI(ctrl *gomock.Controller) *MockBasicgRPCAPI {
	mock := &MockBasicgRPCAPI{ctrl: ctrl}
	mock.recorder = &MockBasicgRPCAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBasicgRPCAPI) EXPECT() *MockBasicgRPCAPIMockRecorder {
	return m.recorder
}

// CheckUsage mocks base method.
func (m *MockBasicgRPCAPI) CheckUsage() (*pb.ShioajiUsage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUsage")
	ret0, _ := ret[0].(*pb.ShioajiUsage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUsage indicates an expected call of CheckUsage.
func (mr *MockBasicgRPCAPIMockRecorder) CheckUsage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUsage", reflect.TypeOf((*MockBasicgRPCAPI)(nil).CheckUsage))
}

// CreateLongConnection mocks base method.
func (m *MockBasicgRPCAPI) CreateLongConnection() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLongConnection")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLongConnection indicates an expected call of CreateLongConnection.
func (mr *MockBasicgRPCAPIMockRecorder) CreateLongConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLongConnection", reflect.TypeOf((*MockBasicgRPCAPI)(nil).CreateLongConnection))
}

// GetAllFutureDetail mocks base method.
func (m *MockBasicgRPCAPI) GetAllFutureDetail() ([]*pb.FutureDetailMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFutureDetail")
	ret0, _ := ret[0].([]*pb.FutureDetailMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFutureDetail indicates an expected call of GetAllFutureDetail.
func (mr *MockBasicgRPCAPIMockRecorder) GetAllFutureDetail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFutureDetail", reflect.TypeOf((*MockBasicgRPCAPI)(nil).GetAllFutureDetail))
}

// GetAllOptionDetail mocks base method.
func (m *MockBasicgRPCAPI) GetAllOptionDetail() ([]*pb.OptionDetailMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOptionDetail")
	ret0, _ := ret[0].([]*pb.OptionDetailMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOptionDetail indicates an expected call of GetAllOptionDetail.
func (mr *MockBasicgRPCAPIMockRecorder) GetAllOptionDetail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOptionDetail", reflect.TypeOf((*MockBasicgRPCAPI)(nil).GetAllOptionDetail))
}

// GetAllStockDetail mocks base method.
func (m *MockBasicgRPCAPI) GetAllStockDetail() ([]*pb.StockDetailMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStockDetail")
	ret0, _ := ret[0].([]*pb.StockDetailMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStockDetail indicates an expected call of GetAllStockDetail.
func (mr *MockBasicgRPCAPIMockRecorder) GetAllStockDetail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStockDetail", reflect.TypeOf((*MockBasicgRPCAPI)(nil).GetAllStockDetail))
}

// Login mocks base method.
func (m *MockBasicgRPCAPI) Login() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login")
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockBasicgRPCAPIMockRecorder) Login() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockBasicgRPCAPI)(nil).Login))
}

// MockHistory is a mock of History interface.
type MockHistory struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryMockRecorder
}

// MockHistoryMockRecorder is the mock recorder for MockHistory.
type MockHistoryMockRecorder struct {
	mock *MockHistory
}

// NewMockHistory creates a new mock instance.
func NewMockHistory(ctrl *gomock.Controller) *MockHistory {
	mock := &MockHistory{ctrl: ctrl}
	mock.recorder = &MockHistoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistory) EXPECT() *MockHistoryMockRecorder {
	return m.recorder
}

// GetDayKbarByStockNumMultiDate mocks base method.
func (m *MockHistory) GetDayKbarByStockNumMultiDate(stockNum string, date time.Time, interval int64) ([]*entity.StockHistoryKbar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDayKbarByStockNumMultiDate", stockNum, date, interval)
	ret0, _ := ret[0].([]*entity.StockHistoryKbar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDayKbarByStockNumMultiDate indicates an expected call of GetDayKbarByStockNumMultiDate.
func (mr *MockHistoryMockRecorder) GetDayKbarByStockNumMultiDate(stockNum, date, interval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDayKbarByStockNumMultiDate", reflect.TypeOf((*MockHistory)(nil).GetDayKbarByStockNumMultiDate), stockNum, date, interval)
}

// GetFutureHistoryKbarByDate mocks base method.
func (m *MockHistory) GetFutureHistoryKbarByDate(code string, date time.Time) ([]*entity.FutureHistoryKbar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFutureHistoryKbarByDate", code, date)
	ret0, _ := ret[0].([]*entity.FutureHistoryKbar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFutureHistoryKbarByDate indicates an expected call of GetFutureHistoryKbarByDate.
func (mr *MockHistoryMockRecorder) GetFutureHistoryKbarByDate(code, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFutureHistoryKbarByDate", reflect.TypeOf((*MockHistory)(nil).GetFutureHistoryKbarByDate), code, date)
}

// MockHistoryRepo is a mock of HistoryRepo interface.
type MockHistoryRepo struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryRepoMockRecorder
}

// MockHistoryRepoMockRecorder is the mock recorder for MockHistoryRepo.
type MockHistoryRepoMockRecorder struct {
	mock *MockHistoryRepo
}

// NewMockHistoryRepo creates a new mock instance.
func NewMockHistoryRepo(ctrl *gomock.Controller) *MockHistoryRepo {
	mock := &MockHistoryRepo{ctrl: ctrl}
	mock.recorder = &MockHistoryRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryRepo) EXPECT() *MockHistoryRepoMockRecorder {
	return m.recorder
}

// DeleteHistoryCloseByStockAndDate mocks base method.
func (m *MockHistoryRepo) DeleteHistoryCloseByStockAndDate(ctx context.Context, stockNumArr []string, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHistoryCloseByStockAndDate", ctx, stockNumArr, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHistoryCloseByStockAndDate indicates an expected call of DeleteHistoryCloseByStockAndDate.
func (mr *MockHistoryRepoMockRecorder) DeleteHistoryCloseByStockAndDate(ctx, stockNumArr, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHistoryCloseByStockAndDate", reflect.TypeOf((*MockHistoryRepo)(nil).DeleteHistoryCloseByStockAndDate), ctx, stockNumArr, date)
}

// DeleteHistoryKbarByStockAndDate mocks base method.
func (m *MockHistoryRepo) DeleteHistoryKbarByStockAndDate(ctx context.Context, stockNumArr []string, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHistoryKbarByStockAndDate", ctx, stockNumArr, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHistoryKbarByStockAndDate indicates an expected call of DeleteHistoryKbarByStockAndDate.
func (mr *MockHistoryRepoMockRecorder) DeleteHistoryKbarByStockAndDate(ctx, stockNumArr, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHistoryKbarByStockAndDate", reflect.TypeOf((*MockHistoryRepo)(nil).DeleteHistoryKbarByStockAndDate), ctx, stockNumArr, date)
}

// DeleteHistoryTickByStockAndDate mocks base method.
func (m *MockHistoryRepo) DeleteHistoryTickByStockAndDate(ctx context.Context, stockNumArr []string, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHistoryTickByStockAndDate", ctx, stockNumArr, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHistoryTickByStockAndDate indicates an expected call of DeleteHistoryTickByStockAndDate.
func (mr *MockHistoryRepoMockRecorder) DeleteHistoryTickByStockAndDate(ctx, stockNumArr, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHistoryTickByStockAndDate", reflect.TypeOf((*MockHistoryRepo)(nil).DeleteHistoryTickByStockAndDate), ctx, stockNumArr, date)
}

// InsertHistoryCloseArr mocks base method.
func (m *MockHistoryRepo) InsertHistoryCloseArr(ctx context.Context, t []*entity.StockHistoryClose) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertHistoryCloseArr", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertHistoryCloseArr indicates an expected call of InsertHistoryCloseArr.
func (mr *MockHistoryRepoMockRecorder) InsertHistoryCloseArr(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertHistoryCloseArr", reflect.TypeOf((*MockHistoryRepo)(nil).InsertHistoryCloseArr), ctx, t)
}

// InsertHistoryKbarArr mocks base method.
func (m *MockHistoryRepo) InsertHistoryKbarArr(ctx context.Context, t []*entity.StockHistoryKbar) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertHistoryKbarArr", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertHistoryKbarArr indicates an expected call of InsertHistoryKbarArr.
func (mr *MockHistoryRepoMockRecorder) InsertHistoryKbarArr(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertHistoryKbarArr", reflect.TypeOf((*MockHistoryRepo)(nil).InsertHistoryKbarArr), ctx, t)
}

// InsertHistoryTickArr mocks base method.
func (m *MockHistoryRepo) InsertHistoryTickArr(ctx context.Context, t []*entity.StockHistoryTick) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertHistoryTickArr", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertHistoryTickArr indicates an expected call of InsertHistoryTickArr.
func (mr *MockHistoryRepoMockRecorder) InsertHistoryTickArr(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertHistoryTickArr", reflect.TypeOf((*MockHistoryRepo)(nil).InsertHistoryTickArr), ctx, t)
}

// InsertQuaterMA mocks base method.
func (m *MockHistoryRepo) InsertQuaterMA(ctx context.Context, t *entity.StockHistoryAnalyze) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertQuaterMA", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertQuaterMA indicates an expected call of InsertQuaterMA.
func (mr *MockHistoryRepoMockRecorder) InsertQuaterMA(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertQuaterMA", reflect.TypeOf((*MockHistoryRepo)(nil).InsertQuaterMA), ctx, t)
}

// QueryAllQuaterMAByStockNum mocks base method.
func (m *MockHistoryRepo) QueryAllQuaterMAByStockNum(ctx context.Context, stockNum string) (map[time.Time]*entity.StockHistoryAnalyze, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllQuaterMAByStockNum", ctx, stockNum)
	ret0, _ := ret[0].(map[time.Time]*entity.StockHistoryAnalyze)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllQuaterMAByStockNum indicates an expected call of QueryAllQuaterMAByStockNum.
func (mr *MockHistoryRepoMockRecorder) QueryAllQuaterMAByStockNum(ctx, stockNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllQuaterMAByStockNum", reflect.TypeOf((*MockHistoryRepo)(nil).QueryAllQuaterMAByStockNum), ctx, stockNum)
}

// QueryMultiStockKbarArrByDate mocks base method.
func (m *MockHistoryRepo) QueryMultiStockKbarArrByDate(ctx context.Context, stockNumArr []string, date time.Time) (map[string][]*entity.StockHistoryKbar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMultiStockKbarArrByDate", ctx, stockNumArr, date)
	ret0, _ := ret[0].(map[string][]*entity.StockHistoryKbar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMultiStockKbarArrByDate indicates an expected call of QueryMultiStockKbarArrByDate.
func (mr *MockHistoryRepoMockRecorder) QueryMultiStockKbarArrByDate(ctx, stockNumArr, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMultiStockKbarArrByDate", reflect.TypeOf((*MockHistoryRepo)(nil).QueryMultiStockKbarArrByDate), ctx, stockNumArr, date)
}

// QueryMultiStockTickArrByDate mocks base method.
func (m *MockHistoryRepo) QueryMultiStockTickArrByDate(ctx context.Context, stockNumArr []string, date time.Time) (map[string][]*entity.StockHistoryTick, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMultiStockTickArrByDate", ctx, stockNumArr, date)
	ret0, _ := ret[0].(map[string][]*entity.StockHistoryTick)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMultiStockTickArrByDate indicates an expected call of QueryMultiStockTickArrByDate.
func (mr *MockHistoryRepoMockRecorder) QueryMultiStockTickArrByDate(ctx, stockNumArr, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMultiStockTickArrByDate", reflect.TypeOf((*MockHistoryRepo)(nil).QueryMultiStockTickArrByDate), ctx, stockNumArr, date)
}

// QueryMutltiStockCloseByDate mocks base method.
func (m *MockHistoryRepo) QueryMutltiStockCloseByDate(ctx context.Context, stockNumArr []string, date time.Time) (map[string]*entity.StockHistoryClose, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMutltiStockCloseByDate", ctx, stockNumArr, date)
	ret0, _ := ret[0].(map[string]*entity.StockHistoryClose)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMutltiStockCloseByDate indicates an expected call of QueryMutltiStockCloseByDate.
func (mr *MockHistoryRepoMockRecorder) QueryMutltiStockCloseByDate(ctx, stockNumArr, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMutltiStockCloseByDate", reflect.TypeOf((*MockHistoryRepo)(nil).QueryMutltiStockCloseByDate), ctx, stockNumArr, date)
}

// MockHistorygRPCAPI is a mock of HistorygRPCAPI interface.
type MockHistorygRPCAPI struct {
	ctrl     *gomock.Controller
	recorder *MockHistorygRPCAPIMockRecorder
}

// MockHistorygRPCAPIMockRecorder is the mock recorder for MockHistorygRPCAPI.
type MockHistorygRPCAPIMockRecorder struct {
	mock *MockHistorygRPCAPI
}

// NewMockHistorygRPCAPI creates a new mock instance.
func NewMockHistorygRPCAPI(ctrl *gomock.Controller) *MockHistorygRPCAPI {
	mock := &MockHistorygRPCAPI{ctrl: ctrl}
	mock.recorder = &MockHistorygRPCAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistorygRPCAPI) EXPECT() *MockHistorygRPCAPIMockRecorder {
	return m.recorder
}

// GetFutureHistoryKbar mocks base method.
func (m *MockHistorygRPCAPI) GetFutureHistoryKbar(codeArr []string, date string) ([]*pb.HistoryKbarMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFutureHistoryKbar", codeArr, date)
	ret0, _ := ret[0].([]*pb.HistoryKbarMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFutureHistoryKbar indicates an expected call of GetFutureHistoryKbar.
func (mr *MockHistorygRPCAPIMockRecorder) GetFutureHistoryKbar(codeArr, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFutureHistoryKbar", reflect.TypeOf((*MockHistorygRPCAPI)(nil).GetFutureHistoryKbar), codeArr, date)
}

// GetStockHistoryClose mocks base method.
func (m *MockHistorygRPCAPI) GetStockHistoryClose(stockNumArr []string, date string) ([]*pb.HistoryCloseMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockHistoryClose", stockNumArr, date)
	ret0, _ := ret[0].([]*pb.HistoryCloseMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockHistoryClose indicates an expected call of GetStockHistoryClose.
func (mr *MockHistorygRPCAPIMockRecorder) GetStockHistoryClose(stockNumArr, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockHistoryClose", reflect.TypeOf((*MockHistorygRPCAPI)(nil).GetStockHistoryClose), stockNumArr, date)
}

// GetStockHistoryKbar mocks base method.
func (m *MockHistorygRPCAPI) GetStockHistoryKbar(stockNumArr []string, date string) ([]*pb.HistoryKbarMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockHistoryKbar", stockNumArr, date)
	ret0, _ := ret[0].([]*pb.HistoryKbarMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockHistoryKbar indicates an expected call of GetStockHistoryKbar.
func (mr *MockHistorygRPCAPIMockRecorder) GetStockHistoryKbar(stockNumArr, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockHistoryKbar", reflect.TypeOf((*MockHistorygRPCAPI)(nil).GetStockHistoryKbar), stockNumArr, date)
}

// GetStockHistoryTick mocks base method.
func (m *MockHistorygRPCAPI) GetStockHistoryTick(stockNumArr []string, date string) ([]*pb.HistoryTickMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockHistoryTick", stockNumArr, date)
	ret0, _ := ret[0].([]*pb.HistoryTickMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockHistoryTick indicates an expected call of GetStockHistoryTick.
func (mr *MockHistorygRPCAPIMockRecorder) GetStockHistoryTick(stockNumArr, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockHistoryTick", reflect.TypeOf((*MockHistorygRPCAPI)(nil).GetStockHistoryTick), stockNumArr, date)
}

// MockRealTime is a mock of RealTime interface.
type MockRealTime struct {
	ctrl     *gomock.Controller
	recorder *MockRealTimeMockRecorder
}

// MockRealTimeMockRecorder is the mock recorder for MockRealTime.
type MockRealTimeMockRecorder struct {
	mock *MockRealTime
}

// NewMockRealTime creates a new mock instance.
func NewMockRealTime(ctrl *gomock.Controller) *MockRealTime {
	mock := &MockRealTime{ctrl: ctrl}
	mock.recorder = &MockRealTimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRealTime) EXPECT() *MockRealTimeMockRecorder {
	return m.recorder
}

// CreateRealTimePick mocks base method.
func (m *MockRealTime) CreateRealTimePick(connectionID string, odd bool, com chan *pb.PickRealMap, tickChan chan []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateRealTimePick", connectionID, odd, com, tickChan)
}

// CreateRealTimePick indicates an expected call of CreateRealTimePick.
func (mr *MockRealTimeMockRecorder) CreateRealTimePick(connectionID, odd, com, tickChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRealTimePick", reflect.TypeOf((*MockRealTime)(nil).CreateRealTimePick), connectionID, odd, com, tickChan)
}

// DeleteRealTimeClient mocks base method.
func (m *MockRealTime) DeleteRealTimeClient(connectionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteRealTimeClient", connectionID)
}

// DeleteRealTimeClient indicates an expected call of DeleteRealTimeClient.
func (mr *MockRealTimeMockRecorder) DeleteRealTimeClient(connectionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRealTimeClient", reflect.TypeOf((*MockRealTime)(nil).DeleteRealTimeClient), connectionID)
}

// GetFutureSnapshotByCode mocks base method.
func (m *MockRealTime) GetFutureSnapshotByCode(code string) (*entity.FutureSnapShot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFutureSnapshotByCode", code)
	ret0, _ := ret[0].(*entity.FutureSnapShot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFutureSnapshotByCode indicates an expected call of GetFutureSnapshotByCode.
func (mr *MockRealTimeMockRecorder) GetFutureSnapshotByCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFutureSnapshotByCode", reflect.TypeOf((*MockRealTime)(nil).GetFutureSnapshotByCode), code)
}

// GetMainFuture mocks base method.
func (m *MockRealTime) GetMainFuture() *entity.Future {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMainFuture")
	ret0, _ := ret[0].(*entity.Future)
	return ret0
}

// GetMainFuture indicates an expected call of GetMainFuture.
func (mr *MockRealTimeMockRecorder) GetMainFuture() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMainFuture", reflect.TypeOf((*MockRealTime)(nil).GetMainFuture))
}

// GetStockSnapshotByNumArr mocks base method.
func (m *MockRealTime) GetStockSnapshotByNumArr(stockNumArr []string) ([]*entity.StockSnapShot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockSnapshotByNumArr", stockNumArr)
	ret0, _ := ret[0].([]*entity.StockSnapShot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockSnapshotByNumArr indicates an expected call of GetStockSnapshotByNumArr.
func (mr *MockRealTimeMockRecorder) GetStockSnapshotByNumArr(stockNumArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockSnapshotByNumArr", reflect.TypeOf((*MockRealTime)(nil).GetStockSnapshotByNumArr), stockNumArr)
}

// GetTradeIndex mocks base method.
func (m *MockRealTime) GetTradeIndex() *entity.TradeIndex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradeIndex")
	ret0, _ := ret[0].(*entity.TradeIndex)
	return ret0
}

// GetTradeIndex indicates an expected call of GetTradeIndex.
func (mr *MockRealTimeMockRecorder) GetTradeIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradeIndex", reflect.TypeOf((*MockRealTime)(nil).GetTradeIndex))
}

// NewFutureRealTimeClient mocks base method.
func (m *MockRealTime) NewFutureRealTimeClient(tickChan chan *entity.RealTimeFutureTick, orderStatusChan chan interface{}, connectionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewFutureRealTimeClient", tickChan, orderStatusChan, connectionID)
}

// NewFutureRealTimeClient indicates an expected call of NewFutureRealTimeClient.
func (mr *MockRealTimeMockRecorder) NewFutureRealTimeClient(tickChan, orderStatusChan, connectionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFutureRealTimeClient", reflect.TypeOf((*MockRealTime)(nil).NewFutureRealTimeClient), tickChan, orderStatusChan, connectionID)
}

// MockRealTimeRepo is a mock of RealTimeRepo interface.
type MockRealTimeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRealTimeRepoMockRecorder
}

// MockRealTimeRepoMockRecorder is the mock recorder for MockRealTimeRepo.
type MockRealTimeRepoMockRecorder struct {
	mock *MockRealTimeRepo
}

// NewMockRealTimeRepo creates a new mock instance.
func NewMockRealTimeRepo(ctrl *gomock.Controller) *MockRealTimeRepo {
	mock := &MockRealTimeRepo{ctrl: ctrl}
	mock.recorder = &MockRealTimeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRealTimeRepo) EXPECT() *MockRealTimeRepoMockRecorder {
	return m.recorder
}

// InsertEvent mocks base method.
func (m *MockRealTimeRepo) InsertEvent(ctx context.Context, t *entity.SinopacEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertEvent", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertEvent indicates an expected call of InsertEvent.
func (mr *MockRealTimeRepoMockRecorder) InsertEvent(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEvent", reflect.TypeOf((*MockRealTimeRepo)(nil).InsertEvent), ctx, t)
}

// MockRealTimegRPCAPI is a mock of RealTimegRPCAPI interface.
type MockRealTimegRPCAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRealTimegRPCAPIMockRecorder
}

// MockRealTimegRPCAPIMockRecorder is the mock recorder for MockRealTimegRPCAPI.
type MockRealTimegRPCAPIMockRecorder struct {
	mock *MockRealTimegRPCAPI
}

// NewMockRealTimegRPCAPI creates a new mock instance.
func NewMockRealTimegRPCAPI(ctrl *gomock.Controller) *MockRealTimegRPCAPI {
	mock := &MockRealTimegRPCAPI{ctrl: ctrl}
	mock.recorder = &MockRealTimegRPCAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRealTimegRPCAPI) EXPECT() *MockRealTimegRPCAPIMockRecorder {
	return m.recorder
}

// GetAllStockSnapshot mocks base method.
func (m *MockRealTimegRPCAPI) GetAllStockSnapshot() ([]*pb.SnapshotMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStockSnapshot")
	ret0, _ := ret[0].([]*pb.SnapshotMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStockSnapshot indicates an expected call of GetAllStockSnapshot.
func (mr *MockRealTimegRPCAPIMockRecorder) GetAllStockSnapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStockSnapshot", reflect.TypeOf((*MockRealTimegRPCAPI)(nil).GetAllStockSnapshot))
}

// GetFutureSnapshotByCode mocks base method.
func (m *MockRealTimegRPCAPI) GetFutureSnapshotByCode(code string) (*pb.SnapshotMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFutureSnapshotByCode", code)
	ret0, _ := ret[0].(*pb.SnapshotMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFutureSnapshotByCode indicates an expected call of GetFutureSnapshotByCode.
func (mr *MockRealTimegRPCAPIMockRecorder) GetFutureSnapshotByCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFutureSnapshotByCode", reflect.TypeOf((*MockRealTimegRPCAPI)(nil).GetFutureSnapshotByCode), code)
}

// GetNasdaq mocks base method.
func (m *MockRealTimegRPCAPI) GetNasdaq() (*pb.YahooFinancePrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNasdaq")
	ret0, _ := ret[0].(*pb.YahooFinancePrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNasdaq indicates an expected call of GetNasdaq.
func (mr *MockRealTimegRPCAPIMockRecorder) GetNasdaq() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNasdaq", reflect.TypeOf((*MockRealTimegRPCAPI)(nil).GetNasdaq))
}

// GetNasdaqFuture mocks base method.
func (m *MockRealTimegRPCAPI) GetNasdaqFuture() (*pb.YahooFinancePrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNasdaqFuture")
	ret0, _ := ret[0].(*pb.YahooFinancePrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNasdaqFuture indicates an expected call of GetNasdaqFuture.
func (mr *MockRealTimegRPCAPIMockRecorder) GetNasdaqFuture() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNasdaqFuture", reflect.TypeOf((*MockRealTimegRPCAPI)(nil).GetNasdaqFuture))
}

// GetStockSnapshotByNumArr mocks base method.
func (m *MockRealTimegRPCAPI) GetStockSnapshotByNumArr(stockNumArr []string) ([]*pb.SnapshotMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockSnapshotByNumArr", stockNumArr)
	ret0, _ := ret[0].([]*pb.SnapshotMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockSnapshotByNumArr indicates an expected call of GetStockSnapshotByNumArr.
func (mr *MockRealTimegRPCAPIMockRecorder) GetStockSnapshotByNumArr(stockNumArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockSnapshotByNumArr", reflect.TypeOf((*MockRealTimegRPCAPI)(nil).GetStockSnapshotByNumArr), stockNumArr)
}

// GetStockSnapshotOTC mocks base method.
func (m *MockRealTimegRPCAPI) GetStockSnapshotOTC() (*pb.SnapshotMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockSnapshotOTC")
	ret0, _ := ret[0].(*pb.SnapshotMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockSnapshotOTC indicates an expected call of GetStockSnapshotOTC.
func (mr *MockRealTimegRPCAPIMockRecorder) GetStockSnapshotOTC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockSnapshotOTC", reflect.TypeOf((*MockRealTimegRPCAPI)(nil).GetStockSnapshotOTC))
}

// GetStockSnapshotTSE mocks base method.
func (m *MockRealTimegRPCAPI) GetStockSnapshotTSE() (*pb.SnapshotMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockSnapshotTSE")
	ret0, _ := ret[0].(*pb.SnapshotMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockSnapshotTSE indicates an expected call of GetStockSnapshotTSE.
func (mr *MockRealTimegRPCAPIMockRecorder) GetStockSnapshotTSE() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockSnapshotTSE", reflect.TypeOf((*MockRealTimegRPCAPI)(nil).GetStockSnapshotTSE))
}

// GetStockVolumeRank mocks base method.
func (m *MockRealTimegRPCAPI) GetStockVolumeRank(date string) ([]*pb.StockVolumeRankMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockVolumeRank", date)
	ret0, _ := ret[0].([]*pb.StockVolumeRankMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockVolumeRank indicates an expected call of GetStockVolumeRank.
func (mr *MockRealTimegRPCAPIMockRecorder) GetStockVolumeRank(date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockVolumeRank", reflect.TypeOf((*MockRealTimegRPCAPI)(nil).GetStockVolumeRank), date)
}

// GetStockVolumeRankPB mocks base method.
func (m *MockRealTimegRPCAPI) GetStockVolumeRankPB(date string) (*pb.StockVolumeRankResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockVolumeRankPB", date)
	ret0, _ := ret[0].(*pb.StockVolumeRankResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockVolumeRankPB indicates an expected call of GetStockVolumeRankPB.
func (mr *MockRealTimegRPCAPIMockRecorder) GetStockVolumeRankPB(date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockVolumeRankPB", reflect.TypeOf((*MockRealTimegRPCAPI)(nil).GetStockVolumeRankPB), date)
}

// MockSubscribegRPCAPI is a mock of SubscribegRPCAPI interface.
type MockSubscribegRPCAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSubscribegRPCAPIMockRecorder
}

// MockSubscribegRPCAPIMockRecorder is the mock recorder for MockSubscribegRPCAPI.
type MockSubscribegRPCAPIMockRecorder struct {
	mock *MockSubscribegRPCAPI
}

// NewMockSubscribegRPCAPI creates a new mock instance.
func NewMockSubscribegRPCAPI(ctrl *gomock.Controller) *MockSubscribegRPCAPI {
	mock := &MockSubscribegRPCAPI{ctrl: ctrl}
	mock.recorder = &MockSubscribegRPCAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscribegRPCAPI) EXPECT() *MockSubscribegRPCAPIMockRecorder {
	return m.recorder
}

// SubscribeFutureBidAsk mocks base method.
func (m *MockSubscribegRPCAPI) SubscribeFutureBidAsk(codeArr []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeFutureBidAsk", codeArr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeFutureBidAsk indicates an expected call of SubscribeFutureBidAsk.
func (mr *MockSubscribegRPCAPIMockRecorder) SubscribeFutureBidAsk(codeArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeFutureBidAsk", reflect.TypeOf((*MockSubscribegRPCAPI)(nil).SubscribeFutureBidAsk), codeArr)
}

// SubscribeFutureTick mocks base method.
func (m *MockSubscribegRPCAPI) SubscribeFutureTick(codeArr []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeFutureTick", codeArr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeFutureTick indicates an expected call of SubscribeFutureTick.
func (mr *MockSubscribegRPCAPIMockRecorder) SubscribeFutureTick(codeArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeFutureTick", reflect.TypeOf((*MockSubscribegRPCAPI)(nil).SubscribeFutureTick), codeArr)
}

// SubscribeStockBidAsk mocks base method.
func (m *MockSubscribegRPCAPI) SubscribeStockBidAsk(stockNumArr []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeStockBidAsk", stockNumArr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeStockBidAsk indicates an expected call of SubscribeStockBidAsk.
func (mr *MockSubscribegRPCAPIMockRecorder) SubscribeStockBidAsk(stockNumArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeStockBidAsk", reflect.TypeOf((*MockSubscribegRPCAPI)(nil).SubscribeStockBidAsk), stockNumArr)
}

// SubscribeStockTick mocks base method.
func (m *MockSubscribegRPCAPI) SubscribeStockTick(stockNumArr []string, odd bool) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeStockTick", stockNumArr, odd)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeStockTick indicates an expected call of SubscribeStockTick.
func (mr *MockSubscribegRPCAPIMockRecorder) SubscribeStockTick(stockNumArr, odd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeStockTick", reflect.TypeOf((*MockSubscribegRPCAPI)(nil).SubscribeStockTick), stockNumArr, odd)
}

// UnSubscribeAllBidAsk mocks base method.
func (m *MockSubscribegRPCAPI) UnSubscribeAllBidAsk() (*pb.ErrorMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSubscribeAllBidAsk")
	ret0, _ := ret[0].(*pb.ErrorMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnSubscribeAllBidAsk indicates an expected call of UnSubscribeAllBidAsk.
func (mr *MockSubscribegRPCAPIMockRecorder) UnSubscribeAllBidAsk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSubscribeAllBidAsk", reflect.TypeOf((*MockSubscribegRPCAPI)(nil).UnSubscribeAllBidAsk))
}

// UnSubscribeAllTick mocks base method.
func (m *MockSubscribegRPCAPI) UnSubscribeAllTick() (*pb.ErrorMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSubscribeAllTick")
	ret0, _ := ret[0].(*pb.ErrorMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnSubscribeAllTick indicates an expected call of UnSubscribeAllTick.
func (mr *MockSubscribegRPCAPIMockRecorder) UnSubscribeAllTick() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSubscribeAllTick", reflect.TypeOf((*MockSubscribegRPCAPI)(nil).UnSubscribeAllTick))
}

// UnSubscribeFutureBidAsk mocks base method.
func (m *MockSubscribegRPCAPI) UnSubscribeFutureBidAsk(codeArr []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSubscribeFutureBidAsk", codeArr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnSubscribeFutureBidAsk indicates an expected call of UnSubscribeFutureBidAsk.
func (mr *MockSubscribegRPCAPIMockRecorder) UnSubscribeFutureBidAsk(codeArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSubscribeFutureBidAsk", reflect.TypeOf((*MockSubscribegRPCAPI)(nil).UnSubscribeFutureBidAsk), codeArr)
}

// UnSubscribeFutureTick mocks base method.
func (m *MockSubscribegRPCAPI) UnSubscribeFutureTick(codeArr []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSubscribeFutureTick", codeArr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnSubscribeFutureTick indicates an expected call of UnSubscribeFutureTick.
func (mr *MockSubscribegRPCAPIMockRecorder) UnSubscribeFutureTick(codeArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSubscribeFutureTick", reflect.TypeOf((*MockSubscribegRPCAPI)(nil).UnSubscribeFutureTick), codeArr)
}

// UnSubscribeStockBidAsk mocks base method.
func (m *MockSubscribegRPCAPI) UnSubscribeStockBidAsk(stockNumArr []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSubscribeStockBidAsk", stockNumArr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnSubscribeStockBidAsk indicates an expected call of UnSubscribeStockBidAsk.
func (mr *MockSubscribegRPCAPIMockRecorder) UnSubscribeStockBidAsk(stockNumArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSubscribeStockBidAsk", reflect.TypeOf((*MockSubscribegRPCAPI)(nil).UnSubscribeStockBidAsk), stockNumArr)
}

// UnSubscribeStockTick mocks base method.
func (m *MockSubscribegRPCAPI) UnSubscribeStockTick(stockNumArr []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSubscribeStockTick", stockNumArr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnSubscribeStockTick indicates an expected call of UnSubscribeStockTick.
func (mr *MockSubscribegRPCAPIMockRecorder) UnSubscribeStockTick(stockNumArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSubscribeStockTick", reflect.TypeOf((*MockSubscribegRPCAPI)(nil).UnSubscribeStockTick), stockNumArr)
}

// MockRabbit is a mock of Rabbit interface.
type MockRabbit struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitMockRecorder
}

// MockRabbitMockRecorder is the mock recorder for MockRabbit.
type MockRabbitMockRecorder struct {
	mock *MockRabbit
}

// NewMockRabbit creates a new mock instance.
func NewMockRabbit(ctrl *gomock.Controller) *MockRabbit {
	mock := &MockRabbit{ctrl: ctrl}
	mock.recorder = &MockRabbitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbit) EXPECT() *MockRabbitMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRabbit) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRabbitMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRabbit)(nil).Close))
}

// EventConsumer mocks base method.
func (m *MockRabbit) EventConsumer(eventChan chan *entity.SinopacEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EventConsumer", eventChan)
}

// EventConsumer indicates an expected call of EventConsumer.
func (mr *MockRabbitMockRecorder) EventConsumer(eventChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventConsumer", reflect.TypeOf((*MockRabbit)(nil).EventConsumer), eventChan)
}

// FutureTickConsumer mocks base method.
func (m *MockRabbit) FutureTickConsumer(code string, tickChan chan *entity.RealTimeFutureTick) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FutureTickConsumer", code, tickChan)
}

// FutureTickConsumer indicates an expected call of FutureTickConsumer.
func (mr *MockRabbitMockRecorder) FutureTickConsumer(code, tickChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FutureTickConsumer", reflect.TypeOf((*MockRabbit)(nil).FutureTickConsumer), code, tickChan)
}

// OrderStatusArrConsumer mocks base method.
func (m *MockRabbit) OrderStatusArrConsumer(orderStatusChan chan interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OrderStatusArrConsumer", orderStatusChan)
}

// OrderStatusArrConsumer indicates an expected call of OrderStatusArrConsumer.
func (mr *MockRabbitMockRecorder) OrderStatusArrConsumer(orderStatusChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderStatusArrConsumer", reflect.TypeOf((*MockRabbit)(nil).OrderStatusArrConsumer), orderStatusChan)
}

// OrderStatusConsumer mocks base method.
func (m *MockRabbit) OrderStatusConsumer(orderStatusChan chan interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OrderStatusConsumer", orderStatusChan)
}

// OrderStatusConsumer indicates an expected call of OrderStatusConsumer.
func (mr *MockRabbitMockRecorder) OrderStatusConsumer(orderStatusChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderStatusConsumer", reflect.TypeOf((*MockRabbit)(nil).OrderStatusConsumer), orderStatusChan)
}

// StockTickOddsPbConsumer mocks base method.
func (m *MockRabbit) StockTickOddsPbConsumer(ctx context.Context, stockNum string, tickChan chan []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StockTickOddsPbConsumer", ctx, stockNum, tickChan)
}

// StockTickOddsPbConsumer indicates an expected call of StockTickOddsPbConsumer.
func (mr *MockRabbitMockRecorder) StockTickOddsPbConsumer(ctx, stockNum, tickChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StockTickOddsPbConsumer", reflect.TypeOf((*MockRabbit)(nil).StockTickOddsPbConsumer), ctx, stockNum, tickChan)
}

// StockTickPbConsumer mocks base method.
func (m *MockRabbit) StockTickPbConsumer(ctx context.Context, stockNum string, tickChan chan []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StockTickPbConsumer", ctx, stockNum, tickChan)
}

// StockTickPbConsumer indicates an expected call of StockTickPbConsumer.
func (mr *MockRabbitMockRecorder) StockTickPbConsumer(ctx, stockNum, tickChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StockTickPbConsumer", reflect.TypeOf((*MockRabbit)(nil).StockTickPbConsumer), ctx, stockNum, tickChan)
}

// MockTarget is a mock of Target interface.
type MockTarget struct {
	ctrl     *gomock.Controller
	recorder *MockTargetMockRecorder
}

// MockTargetMockRecorder is the mock recorder for MockTarget.
type MockTargetMockRecorder struct {
	mock *MockTarget
}

// NewMockTarget creates a new mock instance.
func NewMockTarget(ctrl *gomock.Controller) *MockTarget {
	mock := &MockTarget{ctrl: ctrl}
	mock.recorder = &MockTargetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTarget) EXPECT() *MockTargetMockRecorder {
	return m.recorder
}

// GetCurrentVolumeRank mocks base method.
func (m *MockTarget) GetCurrentVolumeRank() (*pb.StockVolumeRankResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentVolumeRank")
	ret0, _ := ret[0].(*pb.StockVolumeRankResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentVolumeRank indicates an expected call of GetCurrentVolumeRank.
func (mr *MockTargetMockRecorder) GetCurrentVolumeRank() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentVolumeRank", reflect.TypeOf((*MockTarget)(nil).GetCurrentVolumeRank))
}

// GetTargets mocks base method.
func (m *MockTarget) GetTargets(ctx context.Context) []*entity.StockTarget {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargets", ctx)
	ret0, _ := ret[0].([]*entity.StockTarget)
	return ret0
}

// GetTargets indicates an expected call of GetTargets.
func (mr *MockTargetMockRecorder) GetTargets(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargets", reflect.TypeOf((*MockTarget)(nil).GetTargets), ctx)
}

// MockTargetRepo is a mock of TargetRepo interface.
type MockTargetRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTargetRepoMockRecorder
}

// MockTargetRepoMockRecorder is the mock recorder for MockTargetRepo.
type MockTargetRepoMockRecorder struct {
	mock *MockTargetRepo
}

// NewMockTargetRepo creates a new mock instance.
func NewMockTargetRepo(ctrl *gomock.Controller) *MockTargetRepo {
	mock := &MockTargetRepo{ctrl: ctrl}
	mock.recorder = &MockTargetRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTargetRepo) EXPECT() *MockTargetRepoMockRecorder {
	return m.recorder
}

// InsertOrUpdateTargetArr mocks base method.
func (m *MockTargetRepo) InsertOrUpdateTargetArr(ctx context.Context, t []*entity.StockTarget) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateTargetArr", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateTargetArr indicates an expected call of InsertOrUpdateTargetArr.
func (mr *MockTargetRepoMockRecorder) InsertOrUpdateTargetArr(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateTargetArr", reflect.TypeOf((*MockTargetRepo)(nil).InsertOrUpdateTargetArr), ctx, t)
}

// QueryAllMXFFuture mocks base method.
func (m *MockTargetRepo) QueryAllMXFFuture(ctx context.Context) ([]*entity.Future, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllMXFFuture", ctx)
	ret0, _ := ret[0].([]*entity.Future)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllMXFFuture indicates an expected call of QueryAllMXFFuture.
func (mr *MockTargetRepoMockRecorder) QueryAllMXFFuture(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllMXFFuture", reflect.TypeOf((*MockTargetRepo)(nil).QueryAllMXFFuture), ctx)
}

// QueryTargetsByTradeDay mocks base method.
func (m *MockTargetRepo) QueryTargetsByTradeDay(ctx context.Context, tradeDay time.Time) ([]*entity.StockTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTargetsByTradeDay", ctx, tradeDay)
	ret0, _ := ret[0].([]*entity.StockTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTargetsByTradeDay indicates an expected call of QueryTargetsByTradeDay.
func (mr *MockTargetRepoMockRecorder) QueryTargetsByTradeDay(ctx, tradeDay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTargetsByTradeDay", reflect.TypeOf((*MockTargetRepo)(nil).QueryTargetsByTradeDay), ctx, tradeDay)
}

// MockTrade is a mock of Trade interface.
type MockTrade struct {
	ctrl     *gomock.Controller
	recorder *MockTradeMockRecorder
}

// MockTradeMockRecorder is the mock recorder for MockTrade.
type MockTradeMockRecorder struct {
	mock *MockTrade
}

// NewMockTrade creates a new mock instance.
func NewMockTrade(ctrl *gomock.Controller) *MockTrade {
	mock := &MockTrade{ctrl: ctrl}
	mock.recorder = &MockTradeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrade) EXPECT() *MockTradeMockRecorder {
	return m.recorder
}

// BuyFuture mocks base method.
func (m *MockTrade) BuyFuture(order *entity.FutureOrder) (string, entity.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyFuture", order)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(entity.OrderStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BuyFuture indicates an expected call of BuyFuture.
func (mr *MockTradeMockRecorder) BuyFuture(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyFuture", reflect.TypeOf((*MockTrade)(nil).BuyFuture), order)
}

// BuyOddStock mocks base method.
func (m *MockTrade) BuyOddStock(num string, price float64, share int64) (string, entity.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyOddStock", num, price, share)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(entity.OrderStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BuyOddStock indicates an expected call of BuyOddStock.
func (mr *MockTradeMockRecorder) BuyOddStock(num, price, share interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyOddStock", reflect.TypeOf((*MockTrade)(nil).BuyOddStock), num, price, share)
}

// CancelFutureOrderByID mocks base method.
func (m *MockTrade) CancelFutureOrderByID(orderID string) (string, entity.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelFutureOrderByID", orderID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(entity.OrderStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CancelFutureOrderByID indicates an expected call of CancelFutureOrderByID.
func (mr *MockTradeMockRecorder) CancelFutureOrderByID(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelFutureOrderByID", reflect.TypeOf((*MockTrade)(nil).CancelFutureOrderByID), orderID)
}

// GetAllFutureOrder mocks base method.
func (m *MockTrade) GetAllFutureOrder(ctx context.Context) ([]*entity.FutureOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFutureOrder", ctx)
	ret0, _ := ret[0].([]*entity.FutureOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFutureOrder indicates an expected call of GetAllFutureOrder.
func (mr *MockTradeMockRecorder) GetAllFutureOrder(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFutureOrder", reflect.TypeOf((*MockTrade)(nil).GetAllFutureOrder), ctx)
}

// GetAllFutureTradeBalance mocks base method.
func (m *MockTrade) GetAllFutureTradeBalance(ctx context.Context) ([]*entity.FutureTradeBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFutureTradeBalance", ctx)
	ret0, _ := ret[0].([]*entity.FutureTradeBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFutureTradeBalance indicates an expected call of GetAllFutureTradeBalance.
func (mr *MockTradeMockRecorder) GetAllFutureTradeBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFutureTradeBalance", reflect.TypeOf((*MockTrade)(nil).GetAllFutureTradeBalance), ctx)
}

// GetAllStockOrder mocks base method.
func (m *MockTrade) GetAllStockOrder(ctx context.Context) ([]*entity.StockOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStockOrder", ctx)
	ret0, _ := ret[0].([]*entity.StockOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStockOrder indicates an expected call of GetAllStockOrder.
func (mr *MockTradeMockRecorder) GetAllStockOrder(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStockOrder", reflect.TypeOf((*MockTrade)(nil).GetAllStockOrder), ctx)
}

// GetAllStockTradeBalance mocks base method.
func (m *MockTrade) GetAllStockTradeBalance(ctx context.Context) ([]*entity.StockTradeBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStockTradeBalance", ctx)
	ret0, _ := ret[0].([]*entity.StockTradeBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStockTradeBalance indicates an expected call of GetAllStockTradeBalance.
func (mr *MockTradeMockRecorder) GetAllStockTradeBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStockTradeBalance", reflect.TypeOf((*MockTrade)(nil).GetAllStockTradeBalance), ctx)
}

// GetFutureOrderByTradeDay mocks base method.
func (m *MockTrade) GetFutureOrderByTradeDay(ctx context.Context, tradeDay string) ([]*entity.FutureOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFutureOrderByTradeDay", ctx, tradeDay)
	ret0, _ := ret[0].([]*entity.FutureOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFutureOrderByTradeDay indicates an expected call of GetFutureOrderByTradeDay.
func (mr *MockTradeMockRecorder) GetFutureOrderByTradeDay(ctx, tradeDay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFutureOrderByTradeDay", reflect.TypeOf((*MockTrade)(nil).GetFutureOrderByTradeDay), ctx, tradeDay)
}

// GetFuturePosition mocks base method.
func (m *MockTrade) GetFuturePosition() ([]*entity.FuturePosition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFuturePosition")
	ret0, _ := ret[0].([]*entity.FuturePosition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFuturePosition indicates an expected call of GetFuturePosition.
func (mr *MockTradeMockRecorder) GetFuturePosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFuturePosition", reflect.TypeOf((*MockTrade)(nil).GetFuturePosition))
}

// GetLatestInventoryStock mocks base method.
func (m *MockTrade) GetLatestInventoryStock() ([]*entity.InventoryStock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestInventoryStock")
	ret0, _ := ret[0].([]*entity.InventoryStock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestInventoryStock indicates an expected call of GetLatestInventoryStock.
func (mr *MockTradeMockRecorder) GetLatestInventoryStock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestInventoryStock", reflect.TypeOf((*MockTrade)(nil).GetLatestInventoryStock))
}

// IsAuthUser mocks base method.
func (m *MockTrade) IsAuthUser(username string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthUser", username)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAuthUser indicates an expected call of IsAuthUser.
func (mr *MockTradeMockRecorder) IsAuthUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthUser", reflect.TypeOf((*MockTrade)(nil).IsAuthUser), username)
}

// IsFutureTradeTime mocks base method.
func (m *MockTrade) IsFutureTradeTime() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFutureTradeTime")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFutureTradeTime indicates an expected call of IsFutureTradeTime.
func (mr *MockTradeMockRecorder) IsFutureTradeTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFutureTradeTime", reflect.TypeOf((*MockTrade)(nil).IsFutureTradeTime))
}

// SellFuture mocks base method.
func (m *MockTrade) SellFuture(order *entity.FutureOrder) (string, entity.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SellFuture", order)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(entity.OrderStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SellFuture indicates an expected call of SellFuture.
func (mr *MockTradeMockRecorder) SellFuture(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SellFuture", reflect.TypeOf((*MockTrade)(nil).SellFuture), order)
}

// MockTradeRepo is a mock of TradeRepo interface.
type MockTradeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTradeRepoMockRecorder
}

// MockTradeRepoMockRecorder is the mock recorder for MockTradeRepo.
type MockTradeRepoMockRecorder struct {
	mock *MockTradeRepo
}

// NewMockTradeRepo creates a new mock instance.
func NewMockTradeRepo(ctrl *gomock.Controller) *MockTradeRepo {
	mock := &MockTradeRepo{ctrl: ctrl}
	mock.recorder = &MockTradeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTradeRepo) EXPECT() *MockTradeRepoMockRecorder {
	return m.recorder
}

// ClearInventoryStockByUUID mocks base method.
func (m *MockTradeRepo) ClearInventoryStockByUUID(ctx context.Context, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearInventoryStockByUUID", ctx, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearInventoryStockByUUID indicates an expected call of ClearInventoryStockByUUID.
func (mr *MockTradeRepoMockRecorder) ClearInventoryStockByUUID(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearInventoryStockByUUID", reflect.TypeOf((*MockTradeRepo)(nil).ClearInventoryStockByUUID), ctx, uuid)
}

// InsertOrUpdateAccountBalance mocks base method.
func (m *MockTradeRepo) InsertOrUpdateAccountBalance(ctx context.Context, t *entity.AccountBalance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateAccountBalance", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateAccountBalance indicates an expected call of InsertOrUpdateAccountBalance.
func (mr *MockTradeRepoMockRecorder) InsertOrUpdateAccountBalance(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateAccountBalance", reflect.TypeOf((*MockTradeRepo)(nil).InsertOrUpdateAccountBalance), ctx, t)
}

// InsertOrUpdateAccountSettlement mocks base method.
func (m *MockTradeRepo) InsertOrUpdateAccountSettlement(ctx context.Context, t *entity.Settlement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateAccountSettlement", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateAccountSettlement indicates an expected call of InsertOrUpdateAccountSettlement.
func (mr *MockTradeRepoMockRecorder) InsertOrUpdateAccountSettlement(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateAccountSettlement", reflect.TypeOf((*MockTradeRepo)(nil).InsertOrUpdateAccountSettlement), ctx, t)
}

// InsertOrUpdateFutureOrderByOrderID mocks base method.
func (m *MockTradeRepo) InsertOrUpdateFutureOrderByOrderID(ctx context.Context, t *entity.FutureOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateFutureOrderByOrderID", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateFutureOrderByOrderID indicates an expected call of InsertOrUpdateFutureOrderByOrderID.
func (mr *MockTradeRepoMockRecorder) InsertOrUpdateFutureOrderByOrderID(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateFutureOrderByOrderID", reflect.TypeOf((*MockTradeRepo)(nil).InsertOrUpdateFutureOrderByOrderID), ctx, t)
}

// InsertOrUpdateFutureTradeBalance mocks base method.
func (m *MockTradeRepo) InsertOrUpdateFutureTradeBalance(ctx context.Context, t *entity.FutureTradeBalance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateFutureTradeBalance", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateFutureTradeBalance indicates an expected call of InsertOrUpdateFutureTradeBalance.
func (mr *MockTradeRepoMockRecorder) InsertOrUpdateFutureTradeBalance(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateFutureTradeBalance", reflect.TypeOf((*MockTradeRepo)(nil).InsertOrUpdateFutureTradeBalance), ctx, t)
}

// InsertOrUpdateInventoryStock mocks base method.
func (m *MockTradeRepo) InsertOrUpdateInventoryStock(ctx context.Context, t []*entity.InventoryStock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateInventoryStock", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateInventoryStock indicates an expected call of InsertOrUpdateInventoryStock.
func (mr *MockTradeRepoMockRecorder) InsertOrUpdateInventoryStock(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateInventoryStock", reflect.TypeOf((*MockTradeRepo)(nil).InsertOrUpdateInventoryStock), ctx, t)
}

// InsertOrUpdateOrderByOrderID mocks base method.
func (m *MockTradeRepo) InsertOrUpdateOrderByOrderID(ctx context.Context, t *entity.StockOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateOrderByOrderID", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateOrderByOrderID indicates an expected call of InsertOrUpdateOrderByOrderID.
func (mr *MockTradeRepoMockRecorder) InsertOrUpdateOrderByOrderID(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateOrderByOrderID", reflect.TypeOf((*MockTradeRepo)(nil).InsertOrUpdateOrderByOrderID), ctx, t)
}

// InsertOrUpdateStockTradeBalance mocks base method.
func (m *MockTradeRepo) InsertOrUpdateStockTradeBalance(ctx context.Context, t *entity.StockTradeBalance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateStockTradeBalance", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateStockTradeBalance indicates an expected call of InsertOrUpdateStockTradeBalance.
func (mr *MockTradeRepoMockRecorder) InsertOrUpdateStockTradeBalance(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateStockTradeBalance", reflect.TypeOf((*MockTradeRepo)(nil).InsertOrUpdateStockTradeBalance), ctx, t)
}

// QueryAllFutureOrder mocks base method.
func (m *MockTradeRepo) QueryAllFutureOrder(ctx context.Context) ([]*entity.FutureOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllFutureOrder", ctx)
	ret0, _ := ret[0].([]*entity.FutureOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllFutureOrder indicates an expected call of QueryAllFutureOrder.
func (mr *MockTradeRepoMockRecorder) QueryAllFutureOrder(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllFutureOrder", reflect.TypeOf((*MockTradeRepo)(nil).QueryAllFutureOrder), ctx)
}

// QueryAllFutureOrderByDate mocks base method.
func (m *MockTradeRepo) QueryAllFutureOrderByDate(ctx context.Context, timeTange []time.Time) ([]*entity.FutureOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllFutureOrderByDate", ctx, timeTange)
	ret0, _ := ret[0].([]*entity.FutureOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllFutureOrderByDate indicates an expected call of QueryAllFutureOrderByDate.
func (mr *MockTradeRepoMockRecorder) QueryAllFutureOrderByDate(ctx, timeTange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllFutureOrderByDate", reflect.TypeOf((*MockTradeRepo)(nil).QueryAllFutureOrderByDate), ctx, timeTange)
}

// QueryAllFutureTradeBalance mocks base method.
func (m *MockTradeRepo) QueryAllFutureTradeBalance(ctx context.Context) ([]*entity.FutureTradeBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllFutureTradeBalance", ctx)
	ret0, _ := ret[0].([]*entity.FutureTradeBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllFutureTradeBalance indicates an expected call of QueryAllFutureTradeBalance.
func (mr *MockTradeRepoMockRecorder) QueryAllFutureTradeBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllFutureTradeBalance", reflect.TypeOf((*MockTradeRepo)(nil).QueryAllFutureTradeBalance), ctx)
}

// QueryAllStockOrder mocks base method.
func (m *MockTradeRepo) QueryAllStockOrder(ctx context.Context) ([]*entity.StockOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllStockOrder", ctx)
	ret0, _ := ret[0].([]*entity.StockOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllStockOrder indicates an expected call of QueryAllStockOrder.
func (mr *MockTradeRepoMockRecorder) QueryAllStockOrder(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllStockOrder", reflect.TypeOf((*MockTradeRepo)(nil).QueryAllStockOrder), ctx)
}

// QueryAllStockOrderByDate mocks base method.
func (m *MockTradeRepo) QueryAllStockOrderByDate(ctx context.Context, timeTange []time.Time) ([]*entity.StockOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllStockOrderByDate", ctx, timeTange)
	ret0, _ := ret[0].([]*entity.StockOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllStockOrderByDate indicates an expected call of QueryAllStockOrderByDate.
func (mr *MockTradeRepoMockRecorder) QueryAllStockOrderByDate(ctx, timeTange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllStockOrderByDate", reflect.TypeOf((*MockTradeRepo)(nil).QueryAllStockOrderByDate), ctx, timeTange)
}

// QueryAllStockTradeBalance mocks base method.
func (m *MockTradeRepo) QueryAllStockTradeBalance(ctx context.Context) ([]*entity.StockTradeBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllStockTradeBalance", ctx)
	ret0, _ := ret[0].([]*entity.StockTradeBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllStockTradeBalance indicates an expected call of QueryAllStockTradeBalance.
func (mr *MockTradeRepoMockRecorder) QueryAllStockTradeBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllStockTradeBalance", reflect.TypeOf((*MockTradeRepo)(nil).QueryAllStockTradeBalance), ctx)
}

// QueryInventoryStockByDate mocks base method.
func (m *MockTradeRepo) QueryInventoryStockByDate(ctx context.Context, date time.Time) ([]*entity.InventoryStock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryInventoryStockByDate", ctx, date)
	ret0, _ := ret[0].([]*entity.InventoryStock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryInventoryStockByDate indicates an expected call of QueryInventoryStockByDate.
func (mr *MockTradeRepoMockRecorder) QueryInventoryStockByDate(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInventoryStockByDate", reflect.TypeOf((*MockTradeRepo)(nil).QueryInventoryStockByDate), ctx, date)
}

// QueryInventoryUUIDStockByDate mocks base method.
func (m *MockTradeRepo) QueryInventoryUUIDStockByDate(ctx context.Context, date time.Time) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryInventoryUUIDStockByDate", ctx, date)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryInventoryUUIDStockByDate indicates an expected call of QueryInventoryUUIDStockByDate.
func (mr *MockTradeRepoMockRecorder) QueryInventoryUUIDStockByDate(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInventoryUUIDStockByDate", reflect.TypeOf((*MockTradeRepo)(nil).QueryInventoryUUIDStockByDate), ctx, date)
}

// QueryLastAccountBalance mocks base method.
func (m *MockTradeRepo) QueryLastAccountBalance(ctx context.Context) (*entity.AccountBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLastAccountBalance", ctx)
	ret0, _ := ret[0].(*entity.AccountBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLastAccountBalance indicates an expected call of QueryLastAccountBalance.
func (mr *MockTradeRepoMockRecorder) QueryLastAccountBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLastAccountBalance", reflect.TypeOf((*MockTradeRepo)(nil).QueryLastAccountBalance), ctx)
}

// MockTradegRPCAPI is a mock of TradegRPCAPI interface.
type MockTradegRPCAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTradegRPCAPIMockRecorder
}

// MockTradegRPCAPIMockRecorder is the mock recorder for MockTradegRPCAPI.
type MockTradegRPCAPIMockRecorder struct {
	mock *MockTradegRPCAPI
}

// NewMockTradegRPCAPI creates a new mock instance.
func NewMockTradegRPCAPI(ctrl *gomock.Controller) *MockTradegRPCAPI {
	mock := &MockTradegRPCAPI{ctrl: ctrl}
	mock.recorder = &MockTradegRPCAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTradegRPCAPI) EXPECT() *MockTradegRPCAPIMockRecorder {
	return m.recorder
}

// BuyFuture mocks base method.
func (m *MockTradegRPCAPI) BuyFuture(order *entity.FutureOrder) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyFuture", order)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuyFuture indicates an expected call of BuyFuture.
func (mr *MockTradegRPCAPIMockRecorder) BuyFuture(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyFuture", reflect.TypeOf((*MockTradegRPCAPI)(nil).BuyFuture), order)
}

// BuyOddStock mocks base method.
func (m *MockTradegRPCAPI) BuyOddStock(order *entity.StockOrder) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyOddStock", order)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuyOddStock indicates an expected call of BuyOddStock.
func (mr *MockTradegRPCAPIMockRecorder) BuyOddStock(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyOddStock", reflect.TypeOf((*MockTradegRPCAPI)(nil).BuyOddStock), order)
}

// BuyStock mocks base method.
func (m *MockTradegRPCAPI) BuyStock(order *entity.StockOrder) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyStock", order)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuyStock indicates an expected call of BuyStock.
func (mr *MockTradegRPCAPIMockRecorder) BuyStock(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyStock", reflect.TypeOf((*MockTradegRPCAPI)(nil).BuyStock), order)
}

// CancelFuture mocks base method.
func (m *MockTradegRPCAPI) CancelFuture(orderID string) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelFuture", orderID)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelFuture indicates an expected call of CancelFuture.
func (mr *MockTradegRPCAPIMockRecorder) CancelFuture(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelFuture", reflect.TypeOf((*MockTradegRPCAPI)(nil).CancelFuture), orderID)
}

// CancelStock mocks base method.
func (m *MockTradegRPCAPI) CancelStock(orderID string) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelStock", orderID)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelStock indicates an expected call of CancelStock.
func (mr *MockTradegRPCAPIMockRecorder) CancelStock(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelStock", reflect.TypeOf((*MockTradegRPCAPI)(nil).CancelStock), orderID)
}

// GetAccountBalance mocks base method.
func (m *MockTradegRPCAPI) GetAccountBalance() (*pb.AccountBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBalance")
	ret0, _ := ret[0].(*pb.AccountBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBalance indicates an expected call of GetAccountBalance.
func (mr *MockTradegRPCAPIMockRecorder) GetAccountBalance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBalance", reflect.TypeOf((*MockTradegRPCAPI)(nil).GetAccountBalance))
}

// GetFuturePosition mocks base method.
func (m *MockTradegRPCAPI) GetFuturePosition() (*pb.FuturePositionArr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFuturePosition")
	ret0, _ := ret[0].(*pb.FuturePositionArr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFuturePosition indicates an expected call of GetFuturePosition.
func (mr *MockTradegRPCAPIMockRecorder) GetFuturePosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFuturePosition", reflect.TypeOf((*MockTradegRPCAPI)(nil).GetFuturePosition))
}

// GetLocalOrderStatusArr mocks base method.
func (m *MockTradegRPCAPI) GetLocalOrderStatusArr() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalOrderStatusArr")
	ret0, _ := ret[0].(error)
	return ret0
}

// GetLocalOrderStatusArr indicates an expected call of GetLocalOrderStatusArr.
func (mr *MockTradegRPCAPIMockRecorder) GetLocalOrderStatusArr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalOrderStatusArr", reflect.TypeOf((*MockTradegRPCAPI)(nil).GetLocalOrderStatusArr))
}

// GetMargin mocks base method.
func (m *MockTradegRPCAPI) GetMargin() (*pb.Margin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMargin")
	ret0, _ := ret[0].(*pb.Margin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMargin indicates an expected call of GetMargin.
func (mr *MockTradegRPCAPIMockRecorder) GetMargin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMargin", reflect.TypeOf((*MockTradegRPCAPI)(nil).GetMargin))
}

// GetSettlement mocks base method.
func (m *MockTradegRPCAPI) GetSettlement() (*pb.SettlementList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettlement")
	ret0, _ := ret[0].(*pb.SettlementList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettlement indicates an expected call of GetSettlement.
func (mr *MockTradegRPCAPIMockRecorder) GetSettlement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettlement", reflect.TypeOf((*MockTradegRPCAPI)(nil).GetSettlement))
}

// GetSimulateOrderStatusArr mocks base method.
func (m *MockTradegRPCAPI) GetSimulateOrderStatusArr() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSimulateOrderStatusArr")
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSimulateOrderStatusArr indicates an expected call of GetSimulateOrderStatusArr.
func (mr *MockTradegRPCAPIMockRecorder) GetSimulateOrderStatusArr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSimulateOrderStatusArr", reflect.TypeOf((*MockTradegRPCAPI)(nil).GetSimulateOrderStatusArr))
}

// GetStockPosition mocks base method.
func (m *MockTradegRPCAPI) GetStockPosition() (*pb.StockPositionArr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockPosition")
	ret0, _ := ret[0].(*pb.StockPositionArr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockPosition indicates an expected call of GetStockPosition.
func (mr *MockTradegRPCAPIMockRecorder) GetStockPosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockPosition", reflect.TypeOf((*MockTradegRPCAPI)(nil).GetStockPosition))
}

// SellFirstFuture mocks base method.
func (m *MockTradegRPCAPI) SellFirstFuture(order *entity.FutureOrder) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SellFirstFuture", order)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SellFirstFuture indicates an expected call of SellFirstFuture.
func (mr *MockTradegRPCAPIMockRecorder) SellFirstFuture(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SellFirstFuture", reflect.TypeOf((*MockTradegRPCAPI)(nil).SellFirstFuture), order)
}

// SellFirstStock mocks base method.
func (m *MockTradegRPCAPI) SellFirstStock(order *entity.StockOrder) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SellFirstStock", order)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SellFirstStock indicates an expected call of SellFirstStock.
func (mr *MockTradegRPCAPIMockRecorder) SellFirstStock(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SellFirstStock", reflect.TypeOf((*MockTradegRPCAPI)(nil).SellFirstStock), order)
}

// SellFuture mocks base method.
func (m *MockTradegRPCAPI) SellFuture(order *entity.FutureOrder) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SellFuture", order)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SellFuture indicates an expected call of SellFuture.
func (mr *MockTradegRPCAPIMockRecorder) SellFuture(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SellFuture", reflect.TypeOf((*MockTradegRPCAPI)(nil).SellFuture), order)
}

// SellOddStock mocks base method.
func (m *MockTradegRPCAPI) SellOddStock(order *entity.StockOrder) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SellOddStock", order)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SellOddStock indicates an expected call of SellOddStock.
func (mr *MockTradegRPCAPIMockRecorder) SellOddStock(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SellOddStock", reflect.TypeOf((*MockTradegRPCAPI)(nil).SellOddStock), order)
}

// SellStock mocks base method.
func (m *MockTradegRPCAPI) SellStock(order *entity.StockOrder) (*pb.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SellStock", order)
	ret0, _ := ret[0].(*pb.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SellStock indicates an expected call of SellStock.
func (mr *MockTradegRPCAPIMockRecorder) SellStock(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SellStock", reflect.TypeOf((*MockTradegRPCAPI)(nil).SellStock), order)
}

// MockSystem is a mock of System interface.
type MockSystem struct {
	ctrl     *gomock.Controller
	recorder *MockSystemMockRecorder
}

// MockSystemMockRecorder is the mock recorder for MockSystem.
type MockSystemMockRecorder struct {
	mock *MockSystem
}

// NewMockSystem creates a new mock instance.
func NewMockSystem(ctrl *gomock.Controller) *MockSystem {
	mock := &MockSystem{ctrl: ctrl}
	mock.recorder = &MockSystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSystem) EXPECT() *MockSystemMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockSystem) AddUser(ctx context.Context, t *entity.NewUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockSystemMockRecorder) AddUser(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockSystem)(nil).AddUser), ctx, t)
}

// DeleteAllPushTokens mocks base method.
func (m *MockSystem) DeleteAllPushTokens(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllPushTokens", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllPushTokens indicates an expected call of DeleteAllPushTokens.
func (mr *MockSystemMockRecorder) DeleteAllPushTokens(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllPushTokens", reflect.TypeOf((*MockSystem)(nil).DeleteAllPushTokens), ctx)
}

// GetLastJWT mocks base method.
func (m *MockSystem) GetLastJWT(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastJWT", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastJWT indicates an expected call of GetLastJWT.
func (mr *MockSystemMockRecorder) GetLastJWT(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastJWT", reflect.TypeOf((*MockSystem)(nil).GetLastJWT), ctx)
}

// GetUserInfo mocks base method.
func (m *MockSystem) GetUserInfo(ctx context.Context, username string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, username)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockSystemMockRecorder) GetUserInfo(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockSystem)(nil).GetUserInfo), ctx, username)
}

// InsertJWT mocks base method.
func (m *MockSystem) InsertJWT(ctx context.Context, jwt string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertJWT", ctx, jwt)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertJWT indicates an expected call of InsertJWT.
func (mr *MockSystemMockRecorder) InsertJWT(ctx, jwt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertJWT", reflect.TypeOf((*MockSystem)(nil).InsertJWT), ctx, jwt)
}

// InsertPushToken mocks base method.
func (m *MockSystem) InsertPushToken(ctx context.Context, token, username string, enabled bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPushToken", ctx, token, username, enabled)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPushToken indicates an expected call of InsertPushToken.
func (mr *MockSystemMockRecorder) InsertPushToken(ctx, token, username, enabled interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPushToken", reflect.TypeOf((*MockSystem)(nil).InsertPushToken), ctx, token, username, enabled)
}

// IsPushTokenEnabled mocks base method.
func (m *MockSystem) IsPushTokenEnabled(ctx context.Context, token string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPushTokenEnabled", ctx, token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPushTokenEnabled indicates an expected call of IsPushTokenEnabled.
func (mr *MockSystemMockRecorder) IsPushTokenEnabled(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPushTokenEnabled", reflect.TypeOf((*MockSystem)(nil).IsPushTokenEnabled), ctx, token)
}

// Login mocks base method.
func (m *MockSystem) Login(ctx context.Context, username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockSystemMockRecorder) Login(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockSystem)(nil).Login), ctx, username, password)
}

// UpdateAuthTradeUser mocks base method.
func (m *MockSystem) UpdateAuthTradeUser() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateAuthTradeUser")
}

// UpdateAuthTradeUser indicates an expected call of UpdateAuthTradeUser.
func (mr *MockSystemMockRecorder) UpdateAuthTradeUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthTradeUser", reflect.TypeOf((*MockSystem)(nil).UpdateAuthTradeUser))
}

// VerifyEmail mocks base method.
func (m *MockSystem) VerifyEmail(ctx context.Context, username, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmail", ctx, username, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockSystemMockRecorder) VerifyEmail(ctx, username, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockSystem)(nil).VerifyEmail), ctx, username, code)
}

// MockSystemRepo is a mock of SystemRepo interface.
type MockSystemRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSystemRepoMockRecorder
}

// MockSystemRepoMockRecorder is the mock recorder for MockSystemRepo.
type MockSystemRepoMockRecorder struct {
	mock *MockSystemRepo
}

// NewMockSystemRepo creates a new mock instance.
func NewMockSystemRepo(ctrl *gomock.Controller) *MockSystemRepo {
	mock := &MockSystemRepo{ctrl: ctrl}
	mock.recorder = &MockSystemRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSystemRepo) EXPECT() *MockSystemRepoMockRecorder {
	return m.recorder
}

// DeleteAllPushTokens mocks base method.
func (m *MockSystemRepo) DeleteAllPushTokens(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllPushTokens", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllPushTokens indicates an expected call of DeleteAllPushTokens.
func (mr *MockSystemRepoMockRecorder) DeleteAllPushTokens(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllPushTokens", reflect.TypeOf((*MockSystemRepo)(nil).DeleteAllPushTokens), ctx)
}

// EmailVerification mocks base method.
func (m *MockSystemRepo) EmailVerification(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmailVerification", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// EmailVerification indicates an expected call of EmailVerification.
func (mr *MockSystemRepoMockRecorder) EmailVerification(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmailVerification", reflect.TypeOf((*MockSystemRepo)(nil).EmailVerification), ctx, username)
}

// GetAllPushTokens mocks base method.
func (m *MockSystemRepo) GetAllPushTokens(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPushTokens", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPushTokens indicates an expected call of GetAllPushTokens.
func (mr *MockSystemRepoMockRecorder) GetAllPushTokens(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPushTokens", reflect.TypeOf((*MockSystemRepo)(nil).GetAllPushTokens), ctx)
}

// GetLastJWT mocks base method.
func (m *MockSystemRepo) GetLastJWT(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastJWT", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastJWT indicates an expected call of GetLastJWT.
func (mr *MockSystemRepoMockRecorder) GetLastJWT(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastJWT", reflect.TypeOf((*MockSystemRepo)(nil).GetLastJWT), ctx)
}

// GetPushToken mocks base method.
func (m *MockSystemRepo) GetPushToken(ctx context.Context, token string) (*entity.PushToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPushToken", ctx, token)
	ret0, _ := ret[0].(*entity.PushToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPushToken indicates an expected call of GetPushToken.
func (mr *MockSystemRepoMockRecorder) GetPushToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPushToken", reflect.TypeOf((*MockSystemRepo)(nil).GetPushToken), ctx, token)
}

// InsertJWT mocks base method.
func (m *MockSystemRepo) InsertJWT(ctx context.Context, jwt string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertJWT", ctx, jwt)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertJWT indicates an expected call of InsertJWT.
func (mr *MockSystemRepoMockRecorder) InsertJWT(ctx, jwt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertJWT", reflect.TypeOf((*MockSystemRepo)(nil).InsertJWT), ctx, jwt)
}

// InsertOrUpdatePushToken mocks base method.
func (m *MockSystemRepo) InsertOrUpdatePushToken(ctx context.Context, token, username string, enabled bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdatePushToken", ctx, token, username, enabled)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdatePushToken indicates an expected call of InsertOrUpdatePushToken.
func (mr *MockSystemRepoMockRecorder) InsertOrUpdatePushToken(ctx, token, username, enabled interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdatePushToken", reflect.TypeOf((*MockSystemRepo)(nil).InsertOrUpdatePushToken), ctx, token, username, enabled)
}

// InsertUser mocks base method.
func (m *MockSystemRepo) InsertUser(ctx context.Context, t *entity.NewUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockSystemRepoMockRecorder) InsertUser(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockSystemRepo)(nil).InsertUser), ctx, t)
}

// QueryAllUser mocks base method.
func (m *MockSystemRepo) QueryAllUser(ctx context.Context) ([]*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllUser", ctx)
	ret0, _ := ret[0].([]*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllUser indicates an expected call of QueryAllUser.
func (mr *MockSystemRepoMockRecorder) QueryAllUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllUser", reflect.TypeOf((*MockSystemRepo)(nil).QueryAllUser), ctx)
}

// QueryUserByUsername mocks base method.
func (m *MockSystemRepo) QueryUserByUsername(ctx context.Context, username string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUserByUsername", ctx, username)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUserByUsername indicates an expected call of QueryUserByUsername.
func (mr *MockSystemRepoMockRecorder) QueryUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUserByUsername", reflect.TypeOf((*MockSystemRepo)(nil).QueryUserByUsername), ctx, username)
}

// MockFCM is a mock of FCM interface.
type MockFCM struct {
	ctrl     *gomock.Controller
	recorder *MockFCMMockRecorder
}

// MockFCMMockRecorder is the mock recorder for MockFCM.
type MockFCMMockRecorder struct {
	mock *MockFCM
}

// NewMockFCM creates a new mock instance.
func NewMockFCM(ctrl *gomock.Controller) *MockFCM {
	mock := &MockFCM{ctrl: ctrl}
	mock.recorder = &MockFCMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFCM) EXPECT() *MockFCMMockRecorder {
	return m.recorder
}

// AnnounceMessage mocks base method.
func (m *MockFCM) AnnounceMessage(msg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnnounceMessage", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AnnounceMessage indicates an expected call of AnnounceMessage.
func (mr *MockFCMMockRecorder) AnnounceMessage(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnnounceMessage", reflect.TypeOf((*MockFCM)(nil).AnnounceMessage), msg)
}

// PushNotification mocks base method.
func (m *MockFCM) PushNotification(title, msg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushNotification", title, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushNotification indicates an expected call of PushNotification.
func (mr *MockFCMMockRecorder) PushNotification(title, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushNotification", reflect.TypeOf((*MockFCM)(nil).PushNotification), title, msg)
}
