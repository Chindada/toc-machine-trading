// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"
	entity "toc-machine-trading/internal/entity"
	pb "toc-machine-trading/pb"

	gomock "github.com/golang/mock/gomock"
)

// MockBasic is a mock of Basic interface.
type MockBasic struct {
	ctrl     *gomock.Controller
	recorder *MockBasicMockRecorder
}

// MockBasicMockRecorder is the mock recorder for MockBasic.
type MockBasicMockRecorder struct {
	mock *MockBasic
}

// NewMockBasic creates a new mock instance.
func NewMockBasic(ctrl *gomock.Controller) *MockBasic {
	mock := &MockBasic{ctrl: ctrl}
	mock.recorder = &MockBasicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBasic) EXPECT() *MockBasicMockRecorder {
	return m.recorder
}

// GetAllRepoStock mocks base method.
func (m *MockBasic) GetAllRepoStock(ctx context.Context) ([]*entity.Stock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRepoStock", ctx)
	ret0, _ := ret[0].([]*entity.Stock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRepoStock indicates an expected call of GetAllRepoStock.
func (mr *MockBasicMockRecorder) GetAllRepoStock(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRepoStock", reflect.TypeOf((*MockBasic)(nil).GetAllRepoStock), ctx)
}

// GetAllSinopacStockAndUpdateRepo mocks base method.
func (m *MockBasic) GetAllSinopacStockAndUpdateRepo(ctx context.Context) ([]*entity.Stock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSinopacStockAndUpdateRepo", ctx)
	ret0, _ := ret[0].([]*entity.Stock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSinopacStockAndUpdateRepo indicates an expected call of GetAllSinopacStockAndUpdateRepo.
func (mr *MockBasicMockRecorder) GetAllSinopacStockAndUpdateRepo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSinopacStockAndUpdateRepo", reflect.TypeOf((*MockBasic)(nil).GetAllSinopacStockAndUpdateRepo), ctx)
}

// MockBasicRepo is a mock of BasicRepo interface.
type MockBasicRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBasicRepoMockRecorder
}

// MockBasicRepoMockRecorder is the mock recorder for MockBasicRepo.
type MockBasicRepoMockRecorder struct {
	mock *MockBasicRepo
}

// NewMockBasicRepo creates a new mock instance.
func NewMockBasicRepo(ctrl *gomock.Controller) *MockBasicRepo {
	mock := &MockBasicRepo{ctrl: ctrl}
	mock.recorder = &MockBasicRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBasicRepo) EXPECT() *MockBasicRepoMockRecorder {
	return m.recorder
}

// InserOrUpdatetCalendarDateArr mocks base method.
func (m *MockBasicRepo) InserOrUpdatetCalendarDateArr(ctx context.Context, t []*entity.CalendarDate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InserOrUpdatetCalendarDateArr", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InserOrUpdatetCalendarDateArr indicates an expected call of InserOrUpdatetCalendarDateArr.
func (mr *MockBasicRepoMockRecorder) InserOrUpdatetCalendarDateArr(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InserOrUpdatetCalendarDateArr", reflect.TypeOf((*MockBasicRepo)(nil).InserOrUpdatetCalendarDateArr), ctx, t)
}

// InserOrUpdatetStockArr mocks base method.
func (m *MockBasicRepo) InserOrUpdatetStockArr(ctx context.Context, t []*entity.Stock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InserOrUpdatetStockArr", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InserOrUpdatetStockArr indicates an expected call of InserOrUpdatetStockArr.
func (mr *MockBasicRepoMockRecorder) InserOrUpdatetStockArr(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InserOrUpdatetStockArr", reflect.TypeOf((*MockBasicRepo)(nil).InserOrUpdatetStockArr), ctx, t)
}

// QueryAllStock mocks base method.
func (m *MockBasicRepo) QueryAllStock(ctx context.Context) ([]*entity.Stock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllStock", ctx)
	ret0, _ := ret[0].([]*entity.Stock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllStock indicates an expected call of QueryAllStock.
func (mr *MockBasicRepoMockRecorder) QueryAllStock(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllStock", reflect.TypeOf((*MockBasicRepo)(nil).QueryAllStock), ctx)
}

// QueryAllTradeDay mocks base method.
func (m *MockBasicRepo) QueryAllTradeDay(ctx context.Context) ([]*entity.CalendarDate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllTradeDay", ctx)
	ret0, _ := ret[0].([]*entity.CalendarDate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllTradeDay indicates an expected call of QueryAllTradeDay.
func (mr *MockBasicRepoMockRecorder) QueryAllTradeDay(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllTradeDay", reflect.TypeOf((*MockBasicRepo)(nil).QueryAllTradeDay), ctx)
}

// MockBasicgRPCAPI is a mock of BasicgRPCAPI interface.
type MockBasicgRPCAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBasicgRPCAPIMockRecorder
}

// MockBasicgRPCAPIMockRecorder is the mock recorder for MockBasicgRPCAPI.
type MockBasicgRPCAPIMockRecorder struct {
	mock *MockBasicgRPCAPI
}

// NewMockBasicgRPCAPI creates a new mock instance.
func NewMockBasicgRPCAPI(ctrl *gomock.Controller) *MockBasicgRPCAPI {
	mock := &MockBasicgRPCAPI{ctrl: ctrl}
	mock.recorder = &MockBasicgRPCAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBasicgRPCAPI) EXPECT() *MockBasicgRPCAPIMockRecorder {
	return m.recorder
}

// GetAllStockDetail mocks base method.
func (m *MockBasicgRPCAPI) GetAllStockDetail() ([]*pb.StockDetailMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStockDetail")
	ret0, _ := ret[0].([]*pb.StockDetailMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStockDetail indicates an expected call of GetAllStockDetail.
func (mr *MockBasicgRPCAPIMockRecorder) GetAllStockDetail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStockDetail", reflect.TypeOf((*MockBasicgRPCAPI)(nil).GetAllStockDetail))
}

// MockStream is a mock of Stream interface.
type MockStream struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMockRecorder
}

// MockStreamMockRecorder is the mock recorder for MockStream.
type MockStreamMockRecorder struct {
	mock *MockStream
}

// NewMockStream creates a new mock instance.
func NewMockStream(ctrl *gomock.Controller) *MockStream {
	mock := &MockStream{ctrl: ctrl}
	mock.recorder = &MockStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStream) EXPECT() *MockStreamMockRecorder {
	return m.recorder
}

// ReceiveEvent mocks base method.
func (m *MockStream) ReceiveEvent(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceiveEvent", ctx)
}

// ReceiveEvent indicates an expected call of ReceiveEvent.
func (mr *MockStreamMockRecorder) ReceiveEvent(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveEvent", reflect.TypeOf((*MockStream)(nil).ReceiveEvent), ctx)
}

// MockStreamRepo is a mock of StreamRepo interface.
type MockStreamRepo struct {
	ctrl     *gomock.Controller
	recorder *MockStreamRepoMockRecorder
}

// MockStreamRepoMockRecorder is the mock recorder for MockStreamRepo.
type MockStreamRepoMockRecorder struct {
	mock *MockStreamRepo
}

// NewMockStreamRepo creates a new mock instance.
func NewMockStreamRepo(ctrl *gomock.Controller) *MockStreamRepo {
	mock := &MockStreamRepo{ctrl: ctrl}
	mock.recorder = &MockStreamRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamRepo) EXPECT() *MockStreamRepoMockRecorder {
	return m.recorder
}

// InsertEvent mocks base method.
func (m *MockStreamRepo) InsertEvent(ctx context.Context, t *entity.SinopacEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertEvent", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertEvent indicates an expected call of InsertEvent.
func (mr *MockStreamRepoMockRecorder) InsertEvent(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEvent", reflect.TypeOf((*MockStreamRepo)(nil).InsertEvent), ctx, t)
}

// MockStreamgRPCAPI is a mock of StreamgRPCAPI interface.
type MockStreamgRPCAPI struct {
	ctrl     *gomock.Controller
	recorder *MockStreamgRPCAPIMockRecorder
}

// MockStreamgRPCAPIMockRecorder is the mock recorder for MockStreamgRPCAPI.
type MockStreamgRPCAPIMockRecorder struct {
	mock *MockStreamgRPCAPI
}

// NewMockStreamgRPCAPI creates a new mock instance.
func NewMockStreamgRPCAPI(ctrl *gomock.Controller) *MockStreamgRPCAPI {
	mock := &MockStreamgRPCAPI{ctrl: ctrl}
	mock.recorder = &MockStreamgRPCAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamgRPCAPI) EXPECT() *MockStreamgRPCAPIMockRecorder {
	return m.recorder
}

// BidAskChannel mocks base method.
func (m *MockStreamgRPCAPI) BidAskChannel(bidAskChan chan *entity.RealTimeBidAsk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BidAskChannel", bidAskChan)
	ret0, _ := ret[0].(error)
	return ret0
}

// BidAskChannel indicates an expected call of BidAskChannel.
func (mr *MockStreamgRPCAPIMockRecorder) BidAskChannel(bidAskChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BidAskChannel", reflect.TypeOf((*MockStreamgRPCAPI)(nil).BidAskChannel), bidAskChan)
}

// EventChannel mocks base method.
func (m *MockStreamgRPCAPI) EventChannel(eventChan chan *entity.SinopacEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventChannel", eventChan)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventChannel indicates an expected call of EventChannel.
func (mr *MockStreamgRPCAPIMockRecorder) EventChannel(eventChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventChannel", reflect.TypeOf((*MockStreamgRPCAPI)(nil).EventChannel), eventChan)
}

// TickChannel mocks base method.
func (m *MockStreamgRPCAPI) TickChannel(tickChan chan *entity.RealTimeTick) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TickChannel", tickChan)
	ret0, _ := ret[0].(error)
	return ret0
}

// TickChannel indicates an expected call of TickChannel.
func (mr *MockStreamgRPCAPIMockRecorder) TickChannel(tickChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TickChannel", reflect.TypeOf((*MockStreamgRPCAPI)(nil).TickChannel), tickChan)
}
