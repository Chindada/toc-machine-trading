// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package realtime_test is a generated GoMock package.
package realtime_test

import (
	context "context"
	reflect "reflect"
	entity "tmt/internal/entity"
	cache "tmt/internal/usecase/cache"
	realtime "tmt/internal/usecase/cases/realtime"
	pb "tmt/pb"
	eventbus "tmt/pkg/eventbus"
	log "tmt/pkg/log"

	gomock "github.com/golang/mock/gomock"
)

// MockRealTime is a mock of RealTime interface.
type MockRealTime struct {
	ctrl     *gomock.Controller
	recorder *MockRealTimeMockRecorder
}

// MockRealTimeMockRecorder is the mock recorder for MockRealTime.
type MockRealTimeMockRecorder struct {
	mock *MockRealTime
}

// NewMockRealTime creates a new mock instance.
func NewMockRealTime(ctrl *gomock.Controller) *MockRealTime {
	mock := &MockRealTime{ctrl: ctrl}
	mock.recorder = &MockRealTimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRealTime) EXPECT() *MockRealTimeMockRecorder {
	return m.recorder
}

// DeleteFutureRealTimeClient mocks base method.
func (m *MockRealTime) DeleteFutureRealTimeClient(connectionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteFutureRealTimeClient", connectionID)
}

// DeleteFutureRealTimeClient indicates an expected call of DeleteFutureRealTimeClient.
func (mr *MockRealTimeMockRecorder) DeleteFutureRealTimeClient(connectionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFutureRealTimeClient", reflect.TypeOf((*MockRealTime)(nil).DeleteFutureRealTimeClient), connectionID)
}

// GetFutureSnapshotByCode mocks base method.
func (m *MockRealTime) GetFutureSnapshotByCode(code string) (*entity.FutureSnapShot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFutureSnapshotByCode", code)
	ret0, _ := ret[0].(*entity.FutureSnapShot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFutureSnapshotByCode indicates an expected call of GetFutureSnapshotByCode.
func (mr *MockRealTimeMockRecorder) GetFutureSnapshotByCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFutureSnapshotByCode", reflect.TypeOf((*MockRealTime)(nil).GetFutureSnapshotByCode), code)
}

// GetMainFuture mocks base method.
func (m *MockRealTime) GetMainFuture() *entity.Future {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMainFuture")
	ret0, _ := ret[0].(*entity.Future)
	return ret0
}

// GetMainFuture indicates an expected call of GetMainFuture.
func (mr *MockRealTimeMockRecorder) GetMainFuture() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMainFuture", reflect.TypeOf((*MockRealTime)(nil).GetMainFuture))
}

// GetOTCSnapshot mocks base method.
func (m *MockRealTime) GetOTCSnapshot(ctx context.Context) (*entity.StockSnapShot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOTCSnapshot", ctx)
	ret0, _ := ret[0].(*entity.StockSnapShot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOTCSnapshot indicates an expected call of GetOTCSnapshot.
func (mr *MockRealTimeMockRecorder) GetOTCSnapshot(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOTCSnapshot", reflect.TypeOf((*MockRealTime)(nil).GetOTCSnapshot), ctx)
}

// GetStockSnapshotByNumArr mocks base method.
func (m *MockRealTime) GetStockSnapshotByNumArr(stockNumArr []string) ([]*entity.StockSnapShot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockSnapshotByNumArr", stockNumArr)
	ret0, _ := ret[0].([]*entity.StockSnapShot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockSnapshotByNumArr indicates an expected call of GetStockSnapshotByNumArr.
func (mr *MockRealTimeMockRecorder) GetStockSnapshotByNumArr(stockNumArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockSnapshotByNumArr", reflect.TypeOf((*MockRealTime)(nil).GetStockSnapshotByNumArr), stockNumArr)
}

// GetTSESnapshot mocks base method.
func (m *MockRealTime) GetTSESnapshot(ctx context.Context) (*entity.StockSnapShot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTSESnapshot", ctx)
	ret0, _ := ret[0].(*entity.StockSnapShot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTSESnapshot indicates an expected call of GetTSESnapshot.
func (mr *MockRealTimeMockRecorder) GetTSESnapshot(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTSESnapshot", reflect.TypeOf((*MockRealTime)(nil).GetTSESnapshot), ctx)
}

// GetTradeIndex mocks base method.
func (m *MockRealTime) GetTradeIndex() *entity.TradeIndex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradeIndex")
	ret0, _ := ret[0].(*entity.TradeIndex)
	return ret0
}

// GetTradeIndex indicates an expected call of GetTradeIndex.
func (mr *MockRealTimeMockRecorder) GetTradeIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradeIndex", reflect.TypeOf((*MockRealTime)(nil).GetTradeIndex))
}

// Init mocks base method.
func (m *MockRealTime) Init(logger *log.Log, cc *cache.Cache, bus *eventbus.Bus) realtime.RealTime {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", logger, cc, bus)
	ret0, _ := ret[0].(realtime.RealTime)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockRealTimeMockRecorder) Init(logger, cc, bus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockRealTime)(nil).Init), logger, cc, bus)
}

// NewFutureRealTimeClient mocks base method.
func (m *MockRealTime) NewFutureRealTimeClient(tickChan chan *entity.RealTimeFutureTick, orderStatusChan chan interface{}, connectionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewFutureRealTimeClient", tickChan, orderStatusChan, connectionID)
}

// NewFutureRealTimeClient indicates an expected call of NewFutureRealTimeClient.
func (mr *MockRealTimeMockRecorder) NewFutureRealTimeClient(tickChan, orderStatusChan, connectionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFutureRealTimeClient", reflect.TypeOf((*MockRealTime)(nil).NewFutureRealTimeClient), tickChan, orderStatusChan, connectionID)
}

// MockRealTimeRepo is a mock of RealTimeRepo interface.
type MockRealTimeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRealTimeRepoMockRecorder
}

// MockRealTimeRepoMockRecorder is the mock recorder for MockRealTimeRepo.
type MockRealTimeRepoMockRecorder struct {
	mock *MockRealTimeRepo
}

// NewMockRealTimeRepo creates a new mock instance.
func NewMockRealTimeRepo(ctrl *gomock.Controller) *MockRealTimeRepo {
	mock := &MockRealTimeRepo{ctrl: ctrl}
	mock.recorder = &MockRealTimeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRealTimeRepo) EXPECT() *MockRealTimeRepoMockRecorder {
	return m.recorder
}

// InsertEvent mocks base method.
func (m *MockRealTimeRepo) InsertEvent(ctx context.Context, t *entity.SinopacEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertEvent", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertEvent indicates an expected call of InsertEvent.
func (mr *MockRealTimeRepoMockRecorder) InsertEvent(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEvent", reflect.TypeOf((*MockRealTimeRepo)(nil).InsertEvent), ctx, t)
}

// MockRealTimegRPCAPI is a mock of RealTimegRPCAPI interface.
type MockRealTimegRPCAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRealTimegRPCAPIMockRecorder
}

// MockRealTimegRPCAPIMockRecorder is the mock recorder for MockRealTimegRPCAPI.
type MockRealTimegRPCAPIMockRecorder struct {
	mock *MockRealTimegRPCAPI
}

// NewMockRealTimegRPCAPI creates a new mock instance.
func NewMockRealTimegRPCAPI(ctrl *gomock.Controller) *MockRealTimegRPCAPI {
	mock := &MockRealTimegRPCAPI{ctrl: ctrl}
	mock.recorder = &MockRealTimegRPCAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRealTimegRPCAPI) EXPECT() *MockRealTimegRPCAPIMockRecorder {
	return m.recorder
}

// GetAllStockSnapshot mocks base method.
func (m *MockRealTimegRPCAPI) GetAllStockSnapshot() ([]*pb.SnapshotMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStockSnapshot")
	ret0, _ := ret[0].([]*pb.SnapshotMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStockSnapshot indicates an expected call of GetAllStockSnapshot.
func (mr *MockRealTimegRPCAPIMockRecorder) GetAllStockSnapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStockSnapshot", reflect.TypeOf((*MockRealTimegRPCAPI)(nil).GetAllStockSnapshot))
}

// GetFutureSnapshotByCode mocks base method.
func (m *MockRealTimegRPCAPI) GetFutureSnapshotByCode(code string) (*pb.SnapshotMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFutureSnapshotByCode", code)
	ret0, _ := ret[0].(*pb.SnapshotMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFutureSnapshotByCode indicates an expected call of GetFutureSnapshotByCode.
func (mr *MockRealTimegRPCAPIMockRecorder) GetFutureSnapshotByCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFutureSnapshotByCode", reflect.TypeOf((*MockRealTimegRPCAPI)(nil).GetFutureSnapshotByCode), code)
}

// GetNasdaq mocks base method.
func (m *MockRealTimegRPCAPI) GetNasdaq() (*pb.YahooFinancePrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNasdaq")
	ret0, _ := ret[0].(*pb.YahooFinancePrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNasdaq indicates an expected call of GetNasdaq.
func (mr *MockRealTimegRPCAPIMockRecorder) GetNasdaq() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNasdaq", reflect.TypeOf((*MockRealTimegRPCAPI)(nil).GetNasdaq))
}

// GetNasdaqFuture mocks base method.
func (m *MockRealTimegRPCAPI) GetNasdaqFuture() (*pb.YahooFinancePrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNasdaqFuture")
	ret0, _ := ret[0].(*pb.YahooFinancePrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNasdaqFuture indicates an expected call of GetNasdaqFuture.
func (mr *MockRealTimegRPCAPIMockRecorder) GetNasdaqFuture() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNasdaqFuture", reflect.TypeOf((*MockRealTimegRPCAPI)(nil).GetNasdaqFuture))
}

// GetStockSnapshotByNumArr mocks base method.
func (m *MockRealTimegRPCAPI) GetStockSnapshotByNumArr(stockNumArr []string) ([]*pb.SnapshotMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockSnapshotByNumArr", stockNumArr)
	ret0, _ := ret[0].([]*pb.SnapshotMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockSnapshotByNumArr indicates an expected call of GetStockSnapshotByNumArr.
func (mr *MockRealTimegRPCAPIMockRecorder) GetStockSnapshotByNumArr(stockNumArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockSnapshotByNumArr", reflect.TypeOf((*MockRealTimegRPCAPI)(nil).GetStockSnapshotByNumArr), stockNumArr)
}

// GetStockSnapshotOTC mocks base method.
func (m *MockRealTimegRPCAPI) GetStockSnapshotOTC() (*pb.SnapshotMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockSnapshotOTC")
	ret0, _ := ret[0].(*pb.SnapshotMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockSnapshotOTC indicates an expected call of GetStockSnapshotOTC.
func (mr *MockRealTimegRPCAPIMockRecorder) GetStockSnapshotOTC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockSnapshotOTC", reflect.TypeOf((*MockRealTimegRPCAPI)(nil).GetStockSnapshotOTC))
}

// GetStockSnapshotTSE mocks base method.
func (m *MockRealTimegRPCAPI) GetStockSnapshotTSE() (*pb.SnapshotMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockSnapshotTSE")
	ret0, _ := ret[0].(*pb.SnapshotMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockSnapshotTSE indicates an expected call of GetStockSnapshotTSE.
func (mr *MockRealTimegRPCAPIMockRecorder) GetStockSnapshotTSE() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockSnapshotTSE", reflect.TypeOf((*MockRealTimegRPCAPI)(nil).GetStockSnapshotTSE))
}

// GetStockVolumeRank mocks base method.
func (m *MockRealTimegRPCAPI) GetStockVolumeRank(date string) ([]*pb.StockVolumeRankMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockVolumeRank", date)
	ret0, _ := ret[0].([]*pb.StockVolumeRankMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockVolumeRank indicates an expected call of GetStockVolumeRank.
func (mr *MockRealTimegRPCAPIMockRecorder) GetStockVolumeRank(date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockVolumeRank", reflect.TypeOf((*MockRealTimegRPCAPI)(nil).GetStockVolumeRank), date)
}

// MockSubscribegRPCAPI is a mock of SubscribegRPCAPI interface.
type MockSubscribegRPCAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSubscribegRPCAPIMockRecorder
}

// MockSubscribegRPCAPIMockRecorder is the mock recorder for MockSubscribegRPCAPI.
type MockSubscribegRPCAPIMockRecorder struct {
	mock *MockSubscribegRPCAPI
}

// NewMockSubscribegRPCAPI creates a new mock instance.
func NewMockSubscribegRPCAPI(ctrl *gomock.Controller) *MockSubscribegRPCAPI {
	mock := &MockSubscribegRPCAPI{ctrl: ctrl}
	mock.recorder = &MockSubscribegRPCAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscribegRPCAPI) EXPECT() *MockSubscribegRPCAPIMockRecorder {
	return m.recorder
}

// SubscribeFutureBidAsk mocks base method.
func (m *MockSubscribegRPCAPI) SubscribeFutureBidAsk(codeArr []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeFutureBidAsk", codeArr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeFutureBidAsk indicates an expected call of SubscribeFutureBidAsk.
func (mr *MockSubscribegRPCAPIMockRecorder) SubscribeFutureBidAsk(codeArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeFutureBidAsk", reflect.TypeOf((*MockSubscribegRPCAPI)(nil).SubscribeFutureBidAsk), codeArr)
}

// SubscribeFutureTick mocks base method.
func (m *MockSubscribegRPCAPI) SubscribeFutureTick(codeArr []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeFutureTick", codeArr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeFutureTick indicates an expected call of SubscribeFutureTick.
func (mr *MockSubscribegRPCAPIMockRecorder) SubscribeFutureTick(codeArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeFutureTick", reflect.TypeOf((*MockSubscribegRPCAPI)(nil).SubscribeFutureTick), codeArr)
}

// SubscribeStockBidAsk mocks base method.
func (m *MockSubscribegRPCAPI) SubscribeStockBidAsk(stockNumArr []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeStockBidAsk", stockNumArr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeStockBidAsk indicates an expected call of SubscribeStockBidAsk.
func (mr *MockSubscribegRPCAPIMockRecorder) SubscribeStockBidAsk(stockNumArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeStockBidAsk", reflect.TypeOf((*MockSubscribegRPCAPI)(nil).SubscribeStockBidAsk), stockNumArr)
}

// SubscribeStockTick mocks base method.
func (m *MockSubscribegRPCAPI) SubscribeStockTick(stockNumArr []string, odd bool) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeStockTick", stockNumArr, odd)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeStockTick indicates an expected call of SubscribeStockTick.
func (mr *MockSubscribegRPCAPIMockRecorder) SubscribeStockTick(stockNumArr, odd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeStockTick", reflect.TypeOf((*MockSubscribegRPCAPI)(nil).SubscribeStockTick), stockNumArr, odd)
}

// UnSubscribeAllBidAsk mocks base method.
func (m *MockSubscribegRPCAPI) UnSubscribeAllBidAsk() (*pb.ErrorMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSubscribeAllBidAsk")
	ret0, _ := ret[0].(*pb.ErrorMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnSubscribeAllBidAsk indicates an expected call of UnSubscribeAllBidAsk.
func (mr *MockSubscribegRPCAPIMockRecorder) UnSubscribeAllBidAsk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSubscribeAllBidAsk", reflect.TypeOf((*MockSubscribegRPCAPI)(nil).UnSubscribeAllBidAsk))
}

// UnSubscribeAllTick mocks base method.
func (m *MockSubscribegRPCAPI) UnSubscribeAllTick() (*pb.ErrorMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSubscribeAllTick")
	ret0, _ := ret[0].(*pb.ErrorMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnSubscribeAllTick indicates an expected call of UnSubscribeAllTick.
func (mr *MockSubscribegRPCAPIMockRecorder) UnSubscribeAllTick() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSubscribeAllTick", reflect.TypeOf((*MockSubscribegRPCAPI)(nil).UnSubscribeAllTick))
}

// UnSubscribeFutureBidAsk mocks base method.
func (m *MockSubscribegRPCAPI) UnSubscribeFutureBidAsk(codeArr []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSubscribeFutureBidAsk", codeArr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnSubscribeFutureBidAsk indicates an expected call of UnSubscribeFutureBidAsk.
func (mr *MockSubscribegRPCAPIMockRecorder) UnSubscribeFutureBidAsk(codeArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSubscribeFutureBidAsk", reflect.TypeOf((*MockSubscribegRPCAPI)(nil).UnSubscribeFutureBidAsk), codeArr)
}

// UnSubscribeFutureTick mocks base method.
func (m *MockSubscribegRPCAPI) UnSubscribeFutureTick(codeArr []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSubscribeFutureTick", codeArr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnSubscribeFutureTick indicates an expected call of UnSubscribeFutureTick.
func (mr *MockSubscribegRPCAPIMockRecorder) UnSubscribeFutureTick(codeArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSubscribeFutureTick", reflect.TypeOf((*MockSubscribegRPCAPI)(nil).UnSubscribeFutureTick), codeArr)
}

// UnSubscribeStockBidAsk mocks base method.
func (m *MockSubscribegRPCAPI) UnSubscribeStockBidAsk(stockNumArr []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSubscribeStockBidAsk", stockNumArr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnSubscribeStockBidAsk indicates an expected call of UnSubscribeStockBidAsk.
func (mr *MockSubscribegRPCAPIMockRecorder) UnSubscribeStockBidAsk(stockNumArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSubscribeStockBidAsk", reflect.TypeOf((*MockSubscribegRPCAPI)(nil).UnSubscribeStockBidAsk), stockNumArr)
}

// UnSubscribeStockTick mocks base method.
func (m *MockSubscribegRPCAPI) UnSubscribeStockTick(stockNumArr []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSubscribeStockTick", stockNumArr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnSubscribeStockTick indicates an expected call of UnSubscribeStockTick.
func (mr *MockSubscribegRPCAPIMockRecorder) UnSubscribeStockTick(stockNumArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSubscribeStockTick", reflect.TypeOf((*MockSubscribegRPCAPI)(nil).UnSubscribeStockTick), stockNumArr)
}

// MockRabbit is a mock of Rabbit interface.
type MockRabbit struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitMockRecorder
}

// MockRabbitMockRecorder is the mock recorder for MockRabbit.
type MockRabbitMockRecorder struct {
	mock *MockRabbit
}

// NewMockRabbit creates a new mock instance.
func NewMockRabbit(ctrl *gomock.Controller) *MockRabbit {
	mock := &MockRabbit{ctrl: ctrl}
	mock.recorder = &MockRabbitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbit) EXPECT() *MockRabbitMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRabbit) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRabbitMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRabbit)(nil).Close))
}

// EventConsumer mocks base method.
func (m *MockRabbit) EventConsumer(eventChan chan *entity.SinopacEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EventConsumer", eventChan)
}

// EventConsumer indicates an expected call of EventConsumer.
func (mr *MockRabbitMockRecorder) EventConsumer(eventChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventConsumer", reflect.TypeOf((*MockRabbit)(nil).EventConsumer), eventChan)
}

// FillAllBasic mocks base method.
func (m *MockRabbit) FillAllBasic(allStockMap map[string]*entity.Stock, allFutureMap map[string]*entity.Future) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FillAllBasic", allStockMap, allFutureMap)
}

// FillAllBasic indicates an expected call of FillAllBasic.
func (mr *MockRabbitMockRecorder) FillAllBasic(allStockMap, allFutureMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FillAllBasic", reflect.TypeOf((*MockRabbit)(nil).FillAllBasic), allStockMap, allFutureMap)
}

// FutureBidAskConsumer mocks base method.
func (m *MockRabbit) FutureBidAskConsumer(code string, bidAskChan chan *entity.FutureRealTimeBidAsk) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FutureBidAskConsumer", code, bidAskChan)
}

// FutureBidAskConsumer indicates an expected call of FutureBidAskConsumer.
func (mr *MockRabbitMockRecorder) FutureBidAskConsumer(code, bidAskChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FutureBidAskConsumer", reflect.TypeOf((*MockRabbit)(nil).FutureBidAskConsumer), code, bidAskChan)
}

// FutureTickConsumer mocks base method.
func (m *MockRabbit) FutureTickConsumer(code string, tickChan chan *entity.RealTimeFutureTick) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FutureTickConsumer", code, tickChan)
}

// FutureTickConsumer indicates an expected call of FutureTickConsumer.
func (mr *MockRabbitMockRecorder) FutureTickConsumer(code, tickChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FutureTickConsumer", reflect.TypeOf((*MockRabbit)(nil).FutureTickConsumer), code, tickChan)
}

// OrderStatusArrConsumer mocks base method.
func (m *MockRabbit) OrderStatusArrConsumer(orderStatusChan chan interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OrderStatusArrConsumer", orderStatusChan)
}

// OrderStatusArrConsumer indicates an expected call of OrderStatusArrConsumer.
func (mr *MockRabbitMockRecorder) OrderStatusArrConsumer(orderStatusChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderStatusArrConsumer", reflect.TypeOf((*MockRabbit)(nil).OrderStatusArrConsumer), orderStatusChan)
}

// OrderStatusConsumer mocks base method.
func (m *MockRabbit) OrderStatusConsumer(orderStatusChan chan interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OrderStatusConsumer", orderStatusChan)
}

// OrderStatusConsumer indicates an expected call of OrderStatusConsumer.
func (mr *MockRabbitMockRecorder) OrderStatusConsumer(orderStatusChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderStatusConsumer", reflect.TypeOf((*MockRabbit)(nil).OrderStatusConsumer), orderStatusChan)
}

// StockBidAskConsumer mocks base method.
func (m *MockRabbit) StockBidAskConsumer(stockNum string, bidAskChan chan *entity.RealTimeStockBidAsk) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StockBidAskConsumer", stockNum, bidAskChan)
}

// StockBidAskConsumer indicates an expected call of StockBidAskConsumer.
func (mr *MockRabbitMockRecorder) StockBidAskConsumer(stockNum, bidAskChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StockBidAskConsumer", reflect.TypeOf((*MockRabbit)(nil).StockBidAskConsumer), stockNum, bidAskChan)
}

// StockTickConsumer mocks base method.
func (m *MockRabbit) StockTickConsumer(stockNum string, tickChan chan *entity.RealTimeStockTick) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StockTickConsumer", stockNum, tickChan)
}

// StockTickConsumer indicates an expected call of StockTickConsumer.
func (mr *MockRabbitMockRecorder) StockTickConsumer(stockNum, tickChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StockTickConsumer", reflect.TypeOf((*MockRabbit)(nil).StockTickConsumer), stockNum, tickChan)
}
